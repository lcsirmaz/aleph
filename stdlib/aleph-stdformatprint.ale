$ standard ALEPH library -- fprintf
'pragmat'module=stdlib,title="stdlib format print".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2.2)
$
$  (C) 2020-2025, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
$ fprintf
'a'printf+t[]+@+>ptr.
'a'fprintf+""f+t[]+@+>ptr.

$ formatted printing using format characters
$  %n, %x, %d, %c

$ BODY ******************************************************** $
'pragmat'if=compile.
'constant'hexshift=/a/-10.
'a'printf+t[]+@+>ptr: fprintf+STDOUT+t+@.
'a'printint+""f+>n:
   n=min int,put char+f+/-/,subtr+-1+n+n,printint1+f+n+/1/;
   n<0,put char+f+/-/,get abs+n+n,printint1+f+n+/0/;
   printint1+f+n+/0/.
'a'printint1+""f+>n+>c-q-r:
   divrem+n+10+q+r,(q=0; printint1+f+q+/0/),
     add+r+c+r,put char+f+r.
'a'printhex+""f+>n:
   printhex1+f+n.
'a'printhex1+""f+>n-r:
   bool and+n+0xf+r,right clear+n+4,(n=0; printhex1+f+n),
     (r<10,add+/0/+r+r;add+r+hexshift+r),put char+f+r.

'a'fprintf+""f+t[]+@+>arg-ptr-cnt-ch:
   arg->ptr,0->cnt,(nxt:string elem+t+ptr+cnt+ch,incr+cnt,
     (ch != /%/, put char+f+ch,:nxt;
      (string elem+t+ptr+cnt+ch,incr+cnt;+),(=ch= $ format char
       [/n/],put char+f+newline,:nxt;
       [/c/],(shift affix block+@,put char+f+arg,:nxt;+);
       [/d/],(shift affix block+@,printint+f+arg,:nxt;+);
       [/x/],(shift affix block+@,printhex+f+arg,:nxt;+);
       put char+f+ch,:nxt));
      +).

'root'+.
'pragmat'endif=compile.
'end'

