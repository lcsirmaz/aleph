$ "next perm" considers the rightmost "n" elements of "st"
$ as a permutation and replaces them by the elements of the next
$ permutation in lexicographical order. If there is no next
$ permutation, "next perm" fails.
\smallskip
'predicate'next perm+>i+[]st[]-p:
  less+i+>>st,plus+i+1+p,
    (next perm+p+st;
     less+st[i]+st[p],simple perm+i+st
    ).
'action'simple perm+>i+[]st[]-p-q:
  $ the rightmost "i" elements of "st" do have a next permutation
  $ but the rightmost "i-1" don\char39t
  >>st->q,
   (find new ith elem:
     less+st[q]+st[i],decr+q,:find new ith elem;+),
   swap+st+i+q,
   plus+i+1+p,>>st->q,
   (invert perm tail:
     mreq+p+q;swap+st+p+q,incr+p,decr+q,:invert perm tail).
'action'swap+[]st[]+>i1+>i2-elem:
  st[i1]->elem,st[i2]->st[i1],elem->st[i2].
'stack' st=(/1/,/2/,/3/,/4/).
\smallskip
'root'display perms+st.
'action'display perms+[]st[]:
  put line+output+st+new line,
    (next perm+<<st+st,:display perms;+).
\smallskip
'charfile'output="output">.
'end'

