$ synbolic derivation
'stack'[100](op,left,right)expr.
'table'operator=("+":plus op,"-":min op,"*":tim op,"/":div op,
       "log":log op, $ log(f) is represented as 0 "log" f $
       "^": pow op ).
'stack'[10] const=(0:c zero,1:c one, 2:c two).
'stack'[1] var = ("x":x var ).
'action'derivative+>e+de>-f-df-g-dg-n1-n2-n3:
  was+const+e, c zero->de;
  was+var+e,   c one ->de;
  left*expr[e]->f,derivative+f+df,
  right*expr[e]->g, derivative+g+dg,
  (= op*expr[e] =
   [plus op],M+df+plus op+dg+de;
   [min op], M+df+min op+dg+de;
   [tim op], M+df+tim op+g+n1,M+f+tim op+dg+n2,
                M+n1+plus op+n2+de;
   [div op], M+df+tim op+g+n1,M+f+tim op+dg+n2,
                M+n1+min op+n2+n1,M+g+pow op+c two+n2,
                M+n1+div op+n2+de;
   [log op], M+dg+div op+g+de;
   [pow op], M+g+min op+c one+n1,M+f+pow op+n1+n1,
             M+df+tim op+g+n2,M+n2+tim op+n1+n1,
             M+c zero+log op+f+n2,M+n2+tim op+dg+n2,
             M+f+pow op+g+n3,M+n2+tim op+n3+n2,
             M+n1+plus op+n2+de
   ).
'action'M+>left+>op+>right+res>:
  (*left->left,op->op,right->right*) expr, >>expr->res.
'action'print expr+>e:
  was+const+e,out+const[e];
  was+var+e,put string+STDOUT+var+e;
  put char+STDOUT+/(/,
  (=op*expr[e]=
   [plus op;min op;tim op;div op;pow op],print expr+left*expr[e];+),
  put string+STDOUT+operator+op*expr[e],
  print expr+right*expr[e],put char+STDOUT+/)/.
'action'out+>n-r:
  divrem+n+10+n+r,add+r+/0/+r,
  (n=0;out+n),put char+STDOUT+r.
'action'line:
  put char+STDOUT+newline.
'root'-y1-y2:
  M+x var+pow op+x var+y1,print expr+y1,line, $ x^x $
    derivative+y1+y2,print expr+y2,line,
  M+x var+plus op+c one+y1,M+x var+min op+c one+y2,
    M+y1+div op+y2+y1,print expr+y1,line, $ (x+1)/(x-1)$
    derivative+y1+y2,print expr+y2,line.

'end'



