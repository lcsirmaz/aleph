'pragmat'title="getting time, module initializations".
$ creating new external library rule; testing bounds
'pragmat'warning="Compile with stack trace: -X -g".
'pragmat'require=("a18m1","a18m2").

'table'(a,b,c)T[]=(/a/,/b/,/c/,/x/,/y/,/z/).
'table'(a,b,c)(#,#,test)test[]=((1,2,3),(11,12,13),(21,22,23),(31,32,33)).

'pragmat'bounds=on.
$ go ahead until zero or 1 is entered
'a'read 01+how>-i:
   c str+"zero for up, one for down: ",
   (get char+STDIN+i,(=i=
      [/0/],0->how;
      [/1/],1->how;
      c str+"wrong input",exit+1);
    c str+"no input",exit+0).
$ this is an exit rule, no return
'e'test bounds-how-idx:
   read01+how,(how=0,<<test->idx,
      (nxt:c int+idx,c int+test[idx],c char+newline,incr+idx,:nxt);
   >>test->idx,
      (nxt:c int+idx,c int+test[idx],c char+newline,decr+idx,:nxt)).
'pragmat'bounds=off.
'root' dummy action,c arr+T,test bounds.

'end'

