$ lexical parsing of .ice files
'pragmat'module=lexical,title="optimizer lexical v2.2".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2.2)
$
$  (C) 2020-2025, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
'constant'
   Darea,Dbox,Dcalibre,Dexpression,Dextension,Dexternal,
   Dfile,Dfill,Dlist,Dlwb,Dnode,Drule,Dto,Dupb,Dvlwb,Dvupb,
   Dfrontmatter,Dbackmatter,
   Danchor,Dand,Dbus,Dclose,Dcolon,Dcomma,Dcompl,Ddiv,Dminus,
   Dnewline,Dnoarg,Dopen,Dor,Dout,Dplus,Dpoint,Dsemicolon,
   Dstar,Dsub,Dxor,Dend,
   Tconst,Ttype,Tnode,Titem,Tformal,Tlocal,Tstring,TTnum,TTstring,
   $ types $
$   Iconstant,Ivariable,Istatic var,
   Itable,Istack,Istatic stack,
$   Ipointer constant,Ichar file,Idata file,
   Irule,
   Iformal stack,Iformal table,Iformal file,Iformal in,
   Iformal out,Iformal inout,Iformal anchor,Iformal shift.

'a'next symbol.        $ read next symbol
'variable' inpt,       $ next symbol
           inpt value, $ auxiliary value
           source line.$ source line count

'p'R+>x:x=inpt,next symbol.
'p'RR+>x+y>:x=inpt,inpt value->y,next symbol.
'a'must+>x+y>:x=inpt,inpt value->y,next symbol;corrupt ice file+_rule_.
'pragmat'require="error".

'pragmat'macro=(R,RR,must).

$ printing
'a'toggle out+>what. $ 1: print read, 0: stop printing
'a'W+>x.		$ print symbol
'a'WW+>type+>val.	$ print val of given type

$ manupulating LEXT entries
$ each entry has a data field (zero), and an image (string)

'a'open source+>ifile.
   $ STDARG to be opened.
'a'rewind source+>ofile+>tmpfile.
   $ ofile is zero or ptr to STDARG; 
   $ tmpfile is ptr in MESSAGE to be used when ofile=0
'a'close source.
   $ close source, copy tmpfile to original when optil=0.

'stack'BUFFER,(next,def)LEXT.

$ BODY ******************************************************** $
'pragmat'if=compile.
'pragmat'require=("error","item").

'stack'[2]BUFFER[].
'a'extend BUFFER+>x: (* x->BUFFER *)BUFFER.

'variable'inpt=0,inpt value=0,source line=1.

$ source and result files
'charfile'SOURCE=>"aleph.ice".     $ ice file $
'charfile'RESULT="optimized.txt">. $ result ice file

'table'MESSAGE=(
  "Cannot open input file %s":cannot open input, $ %s for STDARG
  "Cannot create output file %s":cannot open output,
  "Cannot create temporary file":cannot create temp file,
  "Error replacing file %x, result is at %x":cannot move result,
  ".ice": ice extension
).

'variable'inf=0,outf=0. $ LEXT ptrs for input and output

'a'try to open+res>:
   $ res=0: OK,
   $ res=2: not found
   $ res=-1: error
   open file+SOURCE+/r/+LEXT+>>LEXT,0->res;
   get file error+SOURCE+res,(res=2;-1->res).

'a'open source file+>ifile-errno-n:
   copy string+STDARG+ifile+LEXT,try to open+errno,
     (errno=0;
      errno<0,error+eERR+cannot open input+ifile;
      $ not found, try to add extension
      unstack string+LEXT,scratch+BUFFER,>>BUFFER->n,
       unpack string+STDARG+ifile+BUFFER,          $ original
       unpack string+MESSAGE+ice extension+BUFFER, $ add extension
       subtr+>>BUFFER+n+n,pack string+BUFFER+n+LEXT,scratch+BUFFER,
       try to open+errno,
       (errno=0;
        error+eERR+cannot open input+ifile)).
'a'open source+>ifile:
    $ SOURCE opened, file name is in LEXT
    open source file+ifile,add LEXT entry+inf,
    1->source line,end char->char,0->output,next char,next symbol.

'a'rewind source+>ofile+>tmpfile:
   $ open output file
   (is+ofile,0->outf,
     (open file+RESULT+/w/+STDARG+ofile;
      error+eERR+cannot open output+ofile);
    copy string+MESSAGE+tmpfile+LEXT,
     (open temp file+RESULT+LEXT+>>LEXT,add LEXT entry+outf;
      error+eERR+cannot create temp file)),
   $ rewind SOURCE
   set file pos+SOURCE+0,1->source line,end char->char,1->output,next char,next symbol.
'a'close source:
   close file+SOURCE,close file+RESULT,
   (outf=0;move temp file).
'a'copy source to result-ch:
   get char+SOURCE+ch,put char+RESULT+ch,:copy source to result;
   close file+SOURCE,close file+RESULT.
'a'move temp file-if-of:
   get tag image+outf+if,get tag image+inf+of,
   ((open file+SOURCE+/r/+LEXT+if,open file+RESULT+/w/+LEXT+of);
      error+eMOVE+cannot move result+of+if),
   copy source to result,unlink file+LEXT+if.

$ CHARACTERS ************************************************** $
'pragmat'macro=(bold letter,digit,read index,read minus).

'variable'char=/ /.
'variable'output=0.
'constant'end char=1.

'a'toggle out+>what: what -> output.
'a'next char:
   (output=0;char=end char;put char+RESULT+char),
   (get char+SOURCE+char,
     (=char=
      [newline],incr+source line;
      [:31],:next char;
      +);
   end char->char).
'p'bold letter+x>:
  =char= [/a/:/z/],char->x,nextchar;-.
'p'digit+x>:
  =char=[/0/:/9/],subtr+char+/0/+x,next char;
  -.
'a'comment:
  char=newline;char=end char;next char,:comment.
$ NUMBER ********************************** $
'a'read index+>sign+x>-d:
  ((digit+x,(x>0;sign=0));corrupt ice file+_rule_),
  (nxt:digit+d,addmult+x+10+d+x,:nxt;
       is+sign,subtr+0+x+x;
       +).
'a'read minus+x>+y>:
  =char=[/0/:/9/],Tconst->x,read index+1+y;
      Dminus->x,0->y.
'a'read destination+x>:
  =char=[/N/],next char,read index+0+x;
        [/0/],next char,0->x;
        [/-/],next char,read index+1+x;
        corrupt ice file+_rule_.

$ STRING ********************************** $
$ strings identify tags, sources and titles.
$
$ strings in LEXT are hashed, strings with the same
$   has value are linked throught the "next" field.
$   the "def" field points to the global definition
$   of this tag (global definitons are unique).
'constant'
  HASH increment = 1024. $ HASH size grows by that much
'variable'
  HASH size=HASH increment-1, $current HASH size $
  HASH entries=1.       $ string entries in LEXT table
'stack'[20](next,def)LEXT[]=
  (""      ,(0,0):Squote image).
'stack'[2]HASH[].

'a'enter string+>ptr+out>-string-hash-ptr2-string2-eq:
  subtr+ptr+<>LEXT+string,string hash+LEXT+string+hash,
  bool and+hash+max int+hash,divrem+hash+HASH size+#+hash,
  add+hash+<<HASH+hash,HASH[hash]->ptr2,
    (nxt:ptr2=0,HASH[hash]->next*LEXT[ptr],ptr->HASH[hash]->out,
       incr+HASH entries,
       (HASH entries<HASH size;
        add+HASH size+HASH increment+HASH size,rehash);
     subtr+ptr2+<>LEXT+string2,compare string+LEXT+string+LEXT+string2+eq,
       (eq=0,ptr2->out;
        next*LEXT[ptr2]->ptr2,:nxt)).

'a'rehash-ptr-block:
   0->HASH entries,>>HASH->ptr, $ clear all entries in HASH
     (nxt:ptr<<<HASH;0->HASH[ptr],previous+HASH+ptr,:nxt),
   $ makes sure there are HASH size entries
   subtr+>>HASH+<<HASH+block,incr+block,
     (nxt:block>=HASH size;(*0->HASH*)HASH,incr+block,:nxt),
   >>LEXT->ptr,(nxt:ptr<<<LEXT; $ done $
   enter string+ptr+block,
     (block=ptr,previous+LEXT+ptr,previous string+LEXT+ptr,:nxt;
      internal error+_rule_)).

'root'rehash. $ initialize the HASH table $

'f'get tag image+>tag+ptr>:  subtr+tag+<>LEXT+ptr.
'a'add LEXT entry+x>:
  (*0->next->def*)LEXT,enter string+>>LEXT+x,
  (x=>>LEXT;unstack+LEXT,unstack string+LEXT).

'a'read string+x>-n-obuff:
  >>BUFFER->obuff,0->n,
  (nxt: next char,(=char=
   [/"/],next char, $ closing quote mark
     (char=/"/,extend BUFFER+char,incr+n,:nxt;
      n=0,Squote image->x;
      pack string+BUFFER+n+LEXT,unstack to+BUFFER+obuff,add LEXT entry+x);
   [newline;end char],corrupt ice file+_rule_;
   extend BUFFER+char,incr+n,:nxt)).

'a'read target string+x>-n-obuff:
   >>BUFFER->obuff,0->n,(char=/"/;corrupt ice file+_rule_),
   (nxt: next char,(=char=
    [/"/],next char,
      (char=/"/,extend BUFFER+char,incr+n,:nxt;
       n=0,Squote image->x;
       pack string+BUFFER+n+LEXT,unstack to+BUFFER+obuff,add LEXT entry+x);
    [newline;end char],corrupt ice file+_rule_;
    extend BUFFER+char,incr+n,:nxt)).

'a'read target number+x>-n-obuff:
   >>BUFFER->obuff,1->n,extend BUFFER+/X/,
   (char=/-/,extend BUFFER+char,incr+n,next char;+),
   (nxt:=char=
      [/0/:/9/],extend BUFFER+char,incr+n,next char,:nxt;
      +),
   pack string+BUFFER+n+LEXT,unstack to+BUFFER+obuff,add LEXT entry+x.

$ BOLD ************************************ $

'table'BOLD[] = (
 "area"		:Darea:first BOLD,
 "back"		:Dbackmatter,
 "box"		:Dbox,
 "calibre"	:Dcalibre,
 "expression"	:Dexpression,
 "extension"	:Dextension,
 "external"	:Dexternal,
 "file"		:Dfile,
 "fill"		:Dfill,
 "front"	:Dfrontmatter,
$ "include"      :Dinclude,
 "list"		:Dlist,
 "lwb"		:Dlwb,
 "main"         :Dmain,
 "module"	:Dmodule,
 "node"		:Dnode,
 "rule"		:Drule,
 "to"		:Dto,
 "upb"		:Dupb,
 "vlwb"		:Dvlwb,
 "vupb"		:Dvupb:last BOLD,
$ types $
 "constant"	:Iconstant:first TYPE,
 "variable"	:Ivariable,
 "static var"   :Istatic var,
 "table"	:Itable,
 "stack"	:Istack,
 "static stack"	:Istatic stack,
 "pointer constant":Ipointer constant,
 "charfile"	:Ichar file,
 "datafile"	:Idata file,
 "rule"		:Irule,
$ formal types $
 "formal stack"	:Iformal stack,
 "formal table"	:Iformal table,
 "formal file"	:Iformal file,
 "formal in"	:Iformal in,
 "formal out"	:Iformal out,
 "formal inout"	:Iformal inout,
 "formal anchor":Iformal anchor,
 "formal shift"	:Iformal shift:last TYPE,
$ single characters $
 "@"            :Danchor,
 "&"		:Dand,
 "]"		:Dbus,
 ")"		:Dclose,
 ":"		:Dcolon,
 ","		:Dcomma,
 "~"		:Dcompl,
 "/"		:Ddiv,
 "-"		:Dminus,
 "%n"		:Dnewline,
 "#"		:Dnoarg,
 "("		:Dopen,
 "|"		:Dor,
 ">"		:Dout,
 "+"		:Dplus,
 "."		:Dpoint,
 ";"		:Dsemicolon,
 "*"		:Dstar,
 "["		:Dsub,
 "^"		:Dxor,
$ internal $
 "const"        :Tconst,	$ constant
 "number"       :TTnum,		$ target number
 "tstr"		:TTstring,	$ target string
 "type"		:Ttype,		$ <type>
 "node"		:Tnode,		$ N12, N0, N-2
 "item"		:Titem,		$ I12
 "formal"	:Tformal,	$ F3
 "local"	:Tlocal,	$ L4
 "string"       :Tstring,	$ "xxx", stored uniquely
 "***"		:Dend
).

'a'read bold+x>-n-obuff:
  $ read a bold symbol 'abc'
  next char,>>BUFFER->obuff,0->n,
  (nxt-t:bold letter+t,extend BUFFER+t,incr+n,:nxt;
        char=/'/,next char;
        corrupt ice file+_rule_),
   pack string+BUFFER+n+LEXT,unstack to+BUFFER+obuff,last BOLD->x,
   (nxt:compare string+BOLD+x+LEXT+>>LEXT+n,
        (n=0;
         x=first BOLD,corrupt ice file+_rule_;
         previous string+BOLD+x,:nxt)),
   unstack string+LEXT.
$ TYPES *********************************** $
$ <type>
'a'read type+x>-n-obuff:
  next char,>>BUFFER->obuff,0->n,
  (nxt-t:bold letter+t,extend BUFFER+t,incr+n,:nxt;
         char=/ /,extend BUFFER+/ /,incr+n,next char,:nxt;
         char=/>/,next char;
         corrupt ice file+_rule_),
  pack string+BUFFER+n+LEXT,unstack to+BUFFER+obuff,last TYPE->x,
  (nxt:compare string+BOLD+x+LEXT+>>LEXT+n,
       (n=0;
        x=first TYPE,corrupt ice file+_rule_;
        previous string+BOLD+x,:nxt)),
   unstack string+LEXT.
$ READ ************************************ $
'a'next symbol:
   (=char=
   [/ /;newline], next char,:next symbol;
   [/$/],comment,:next symbol;
   [/0/],Tconst->inpt,0->inpt value,next char;
   [/1/:/9/],Tconst->inpt,read index+0+inpt value;
   [/F/],Tformal->inpt,next char,read index+0+inpt value;
   [/I/],Titem->inpt,next char,read index+0+inpt value,convert to item+inpt value;
   [/L/],Tlocal->inpt,next char,read index+0+inpt value;
   [/N/],Tnode->inpt,next char,read index+0+inpt value;
   [/X/],TTnum->inpt,next char,read target number+inpt value;
   [/T/],TTstring->inpt,next char,read target string+inpt value;
   [/'/],read bold+inpt;
   [/</],Ttype->inpt,read type+inpt value;
   [/"/],Tstring->inpt,read string+inpt value;
   [/&/],Dand->inpt,next char;
   [/]/],Dbus->inpt,next char;
   [/)/],Dclose->inpt,next char;
   [/:/],Dcolon->inpt,next char;
   [/,/],Dcomma->inpt,next char;
   [/~/],Dcompl->inpt,next char;
   [///],Ddiv->inpt,next char;
   [/-/],next char,read minus+inpt+inpt value;
   [/#/],Dnoarg->inpt,next char;
   [/(/],Dopen->inpt,next char;
   [/|/],Dor->inpt,next char;
   [/>/],Dout->inpt,next char,read destination+inpt value;
   [/+/],Dplus->inpt,next char;
   [/./],Dpoint->inpt,next char;
   [/;/],Dsemicolon->inpt,next char;
   [/*/],Dstar->inpt,next char;
   [/[/],Dsub->inpt,next char;
   [/^/],Dxor->inpt,next char;
   [/@/],Danchor->inpt,next char;
   [end char],Dend->inpt;
   corrupt ice file+_rule_).

$ OUTPUT ******************************* 
'variable'wsep=1. $ we have added a separator

'a'writenum+>n:
    n=min int,put char+RESULT+/-/,subtr+-1+n+n,wnum1+n+/1/;
    n<0, put char+RESULT+/-/,get abs+n+n,wnum1+n+/0/;
    wnum1+n+/0/.
'a'wnum1+>n+>c-q-r:
    divrem+n+10+q+r,(q=0; wnum1+q+/0/),
     add+r+c+r,put char+RESULT+r.
'a'wspace:
    is+wsep;
    put char+RESULT+/ /,1->wsep.
'a'W+>x:
    x=Dnewline,1->wsep,put char+RESULT+newline;
    (first BOLD<=x,x<=last BOLD),put char+RESULT+/'/,
                 put string+RESULT+BOLD+x,put char+RESULT+/'/,1->wsep;
    (first TYPE<=x,x<=last TYPE),put char+RESULT+/</,
                 put string+RESULT+BOLD+x,put char+RESULT+/>/,0->wsep;
    was+BOLD+x,put string+RESULT+BOLD+x,1->wsep;
    internal error+_rule_.
'a'WW+>type+>val:
    =type=
    [Tconst],  wspace,writenum+val,0->wsep;
    [Ttype],   W+val; $ <type>
    [Tstring], wspace,get tag image+val+val,
                 put as string+RESULT+LEXT+val,0->wsep;
    [Dout],    wspace,put char+RESULT+/>/,
                 (val<=0;put char+RESULT+/N/),writenum+val,0->wsep;
    [Tformal], wspace,put char+RESULT+/F/,writenum+val,0->wsep;
    [Tlocal],  wspace,put char+RESULT+/L/,writenum+val,0->wsep;
    [Tnode],   put char+RESULT+/N/,writenum+val,0->wsep;
    [TTnum],   wspace,get tag image+val+val,put string+RESULT+LEXT+val,
                  0->wsep;
    [TTstring],wspace,put char+RESULT+/T/,1->wsep,WW+Tstring+val;
    [Titem],   wspace,put char+RESULT+/I/,get item repr+val+val,
                 writenum+val,0->wsep;
    internal error+_rule_.

'pragmat'endif=compile.

'end'


