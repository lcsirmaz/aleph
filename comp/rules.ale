$ rules
'pragmat'module=rules,title="rules v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ******************************************************* $
$ 
'a'rule declaration+>rtype+>ext.
   $ rule declaration, external rule declaration,
   $ rule prototypes (import / export / proto )

$ BODY ********************************************************* $
'pragmat'if=compile.
'pragmat'require=("symbols","tags","types","lexical","disc",
    "identifier","selector","display","pragmats","rulebody").

$ ************************************************************** $
$ A rule has type Irule. The a/q/f/p/e type is stored in LADM
$   flags, can be retrieved as "get tag flag+ruletag+rtype"
$ Formal affixes are stored in consecutive elements of LLOC
$   Formal list affixes store calibre and ssel; calibre=-1
$   for no selector list, ssel=-1 for no standard selector. 
$   Formal tags become visible by changing the adm*TTAG pointer
$   to the corresponding LLOC entry.
$ Formal selectors are stored in a temporary stack searched linearly.
$
$ 'external''typer'XXX+affixes="string".
$  => Dexternal, LADM, <string>, Dpoint.
$ prototype:
$  => Dimport, LADM, Dpoint
$  => Dexport/Dproto, Drule, <ruletype>, <qtag>, <formals>, Dpoint.
$  <formals>:: link to LADM storing affixes
$ rule declarer:
$  => Drule LADM <formal ttag>* <rule body> Dpoint.
$    only the ttag for each formal affix is stored
$
$ The last out or inout affix in an external declaration
$      'x''a'rule+a>="@rule".
$ is parsed as >= (Smreq) if there is no space is between > and =
$
$ A 'function' cannot have 'formal stack' affixes. Instead of giving
$   a warning here, we simply let the parser give warnings / errors
$   ("formal stack affix %p can be a table")
$ A 'function' without out affixes can be optimized out; such a 
$   function is an error

$ ============================================================== $
'table'MESSAGE=(
"rule %p: formal selector %p redefined" :formal selector offset,
"rule %p: formal list with different calibre"
                                        :different calibre,
"rule %p: formal selector syntax"       :wrong formal selector,
"rule $p: formal selector tag expected" :formal selector tag expected,
"rule %p: formal affix syntax"          :formal tag expected,
"rule %p: symbol %p is expected here"   :expected,
"rule %p: error in rule head"           :in rule head,
"rule %p: rule as formal affix"         :rule in affix,
"rule %p: more than one @ affix"        :more anchor affix,
"rule %p: anchor @ is the last affix"   :last anchor affix,
"rule %p: exit rule with out affix %p"  :exit rule with out affix,
"external rule %p: missing string"      :no external string,
"function %p: has no effect"            :function without out affix,
$ missing rule tag after 'a','p',etc.
"rule tag expected"                     :rule tag expected
).

$ -------------------------------------------------------------- $
$ parsing the field lists of the formal affix at >>LLOC
$  initially calibre*LLOC=0, otherwise all field lists must
$  have the same calibre. If no selector list, then calibre=0,
$  otherwise it is >=1.
$  At most 2 error messages are emitted.
'a'field lists+>ruletag-cal:
   R+Sopen,field list+ruletag+calibre*LLOC,
     (nxt:R+Sopen,field list+ruletag+cal,
           (cal=calibre*LLOC;Error+different calibre+ruletag),:nxt;
      +);
   +.
'a'field list+>ruletag+calibre>-tag:
   1->calibre,(nxt:
       (R+Snoarg;
        is ttag+tag,(enter temp selector+tag+>>LLOC+calibre;
                     Error+formal selector offset+ruletag+tag)),
         (R+Scomma,incr+calibre,:nxt;
          R+Sequals,:nxt;
          R+Sclose;
          Error+wrong formal selector+ruletag);
       Error+formal selector tag expected+ruletag).
$ find the standard selector, if any. 
$   calibre=-1: no list, ssel=-1: no standard selector
'a'find local ssel-offs:
   calibre*LLOC=0, $ no selector list
      -1->calibre*LLOC,1->ssel*LLOC,(enter temp selector+ttag*LLOC+>>LLOC+1;+);
   find temp selector+ttag*LLOC+>>LLOC+offs, $ found
      offs->ssel*LLOC;
   -1->ssel*LLOC.  $ no standard selector

$ -------------------------------------------------------------- $
$ a formal affix tag must follow
'a'formal atag+>ruletag+ftag>:
    is ttag+ftag,(ftag!=ruletag;Error+rule in affix+ruletag);
    ruletag->ftag,Error+formal tag expected+ruletag.
$ [] must follow
'a'subbus+>ruletag:
    R+Ssub,(R+Sbus;Error+expected+Sbus);
    Error+expected+ruletag+Ssub.

$ next formal affix to top of LLOC; formal selectors to TMPSEL
$    take care the +>A>="s" and +A>="s" cases
'a'next formal affix+>ruletag-ftag:
   ahead+Ssub, $ []T[] or [](sel)T[] formal stack
       subbus+ruletag,create local affix+Iformal stack+0,
       field lists+ruletag,formal atag+ruletag+ttag*LLOC,
       subbus+ruletag,find local ssel;
   ahead+Sopen, $ (sel)T[]   formal table
       create local affix+Iformal table+0,
       field lists+ruletag,formal atag+ruletag+ttag*LLOC,
       subbus+ruletag,find local ssel;
   R+Squote image, $ ""F  formal file
       formal atag+ruletag+ftag,create local affix+Iformal file+ftag;
   R+Sanchor,$  @    formal anchor
       create local affix+Iformal anchor+Panchor;
   R+Sright, $  >T or  >T>  in or inout
       formal atag+ruletag+ftag,
       (R+Sright,create local affix+Iformal inout+ftag;
        ahead+Smreq,create local affix+Iformal inout+ftag;
        create local affix+Iformal in+ftag);
   formal atag+ruletag+ftag, $  T> or  T[]
       (R+Sright,create local affix+Iformal out+ftag;
        ahead+Smreq,create local affix+Iformal out+ftag;
        subbus+ruletag,create local affix+Iformal table+ftag,
             find local ssel).

$ read all formal affixes to LLOC, formal selectors to TMPSEL.
$    kind: 0: error, 1: prototype, 2: external, 3: declaration
'a'read formal affixes+>ruletag+kind>-err:
    scratch+LLOC,reset temp selector stack,clear local error+err,
    (nxt:was local error+err,0->kind,scratch+LLOC;
         R+Splus,suspend Errors+1,next formal affix+ruletag,
             suspend Errors+0,:nxt;
         ahead+Spoint,  1->kind;  $ prototype
         ahead+Scomma,  1->kind;  $ prototype
         ahead+Sequals, 2->kind;  $ external
         ahead+Smreq,   2->kind;  $ external
         ahead+Sminus,  3->kind;  $ rule declaration
         ahead+Scolon,  3->kind;  $ rule declaration
         error+in rule head+ruletag,0->kind,scratch+LLOC).

'variable'has vararg=0, has outvararg=0.
$ sanity check of formal affixes, set kind=0 if error
$   error if 'function' and no out affixes
$   error if 'exit' and has out affixes
$   error if has more than one @ affix, and it is the last one
$   warning if function and stack affix, converting to table
$ compute 'has vararg' and 'has outvararg' flags.
'a'check formal affixes+>ruletag+>ruletype+>kind>-ptr-vararg-flag:
    $ vararg=0: no @, =1: at @, =2: after @
    $ flag: has out / inout affix
    <<LLOC->ptr,0->vararg,0->has vararg->has outvararg,
    (nxt: ptr>>>LLOC;
          ftype*LLOC[ptr]=Iformal anchor,
                   (vararg=0,1->vararg,1->has vararg;
                    0->kind,error+more anchor affix+ruletag),
                    next+LLOC+ptr,:nxt;
          ftype*LLOC[ptr]=Iformal out,(vararg=0;
                    2->vararg,1->has outvararg),next+LLOC+ptr,:nxt;
          vararg=1,2->vararg,next+LLOC+ptr,:nxt;
          next+LLOC+ptr,:nxt),
    (vararg=1,0->kind,error+last anchor affix+ruletag;+),
    <<LLOC->ptr,0->flag,
    (nxt: ptr>>>LLOC;
           (=ftype*LLOC[ptr]=
  [Iformal out;Iformal inout],
             (ruletype!=rexit,1->flag,next+LLOC+ptr,:nxt;
              0->kind,error+exit rule with out affix+ruletag+ptr);
$ a function cannot have stack affix;
$   ignore this case here; it will be handled later
$ [Iformal stack],(ruletype!=rfunc;
$             Iformal table->ftype*LLOC[ptr],
$                   warning+8+function with stack+ruletag+ptr);
  next+LLOC+ptr,:nxt)),
$ a function must have an out affix; if not issue an error
    (kind=0;is+flag;ruletype!=rfunc;0->kind,
          error+function without out affix+ruletag).
$------------------------------------------------------------------$
'a'rule prototype+>qf+>rtag+>ruletype+>dl:
    $ rule+affixes,  rule+affixes, rule+affixes.
    simple rule prototype+qf+rtag+ruletype+dl,
    (R+Scomma,(-kind:is qtag+qf+rtag,get linenum+dl,
               read formal affixes+rtag+kind,
               check formal affixes+rtag+ruletype+kind,
               (kind=1,:rule prototype;
                kind=0,skip to point;
                error+in rule head+rtag,skip to point);
              error+rule tag expected,skip to point);
     R+Spoint;
     must+Spoint,skip to point).

'a'simple rule prototype+>qf+>rtag+>ruletype+>dl-proto-tag:
     $ handle a single prototype request
     get pragmat value+pgt proto+proto, $1: import, 2: export, 0: none
     (proto=1,create rule definition+qf+rtag+ruletype+dl+tag,
              set tag flag+tag+timported,
              check tag definition+tag, $ multiple definition changes tag
              D+Dimport,Dtag+tag,D+Dpoint;
      (proto=2,D+Dexport;D+Dproto),D+Drule, Dcons+ruletype,
              Dqtag+qf+rtag,enter formal affixes+tag,Dtag+tag,D+Dpoint).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'external rule+>qf+>rtag+>ruletype+>dl:
    $ rule+affixes="", rule+affixes="", rule+affixes="".
    simple external rule+qf+rtag+ruletype+dl,
    (R+Scomma,(-kind:is qtag+qf+rtag,get linenum+dl,
               read formal affixes+rtag+kind,
               check formal affixes+rtag+ruletype+kind,
               (kind=2,:external rule;
                kind=0,skip to point;
                error+in rule head+rtag,skip to point);
           error+rule tag expected,skip to point);
     R+Spoint;
     must+Spoint,skip to point).

'a'simple external rule+>qf+>rtag+>ruletype+>dl-tag-str:
    $ handle a single external rule
    create rule definition+qf+rtag+ruletype+dl+tag,
    set tag flag+tag+texternal,check tag definition+tag,
    (R+Smreq;must+Sequals),
    (is string+str;0->str,error+no external string+rtag),
    D+Dexternal,Dtag+tag,Dstring+str,D+Dpoint.

$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'create rule definition+>qf+>rtag+>ruletype+>dl+res>-formal:
    $ create a LADM entry for this rule. Local affixes are in LLOC
    create tag definition+qf+rtag+Irule+dl+res,
    set tag flag+res+tdefined,set tag flag+res+ruletype,
    (is+has vararg,set tag flag+res+rvararg;+),
    (is+has outvararg,set tag flag+res+routvararg;+),
    enter formal affixes+formal,put adm+res+formal.

$ rule declarer: 
$   <typer> ruletag+affixes-locals:<rule body>.
$  the main work is done in "rule body+ruletag"
'a'rule declarer+>qf+>rtag+>ruletype+>dl-tag-ptr:
   create rule definition+qf+rtag+ruletype+dl+tag,
   check tag definition+tag,
   $ write rule head to DISC and call 'rule body'
   D+Drule,Dtag+tag,<<LLOC->ptr,
   (nxt: ptr>>>LLOC,rule body+tag;
         Dttag+ttag*LLOC[ptr],next+LLOC+ptr,:nxt).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
$ after 'a','p','f','q','e' (external declaration included)
$
'a'rule declaration+>ruletype+>ext-qf-tag-kind-dl:
  is qtag+qf+tag,get linenum+dl,
    read formal affixes+tag+kind,check formal affixes+tag+ruletype+kind,
    (=kind= $ 1-prototype, 2-external,3-declarer,0-error
     [1], (is+ext,error+in rule head+tag,skip to point;
                  rule prototype+qf+tag+ruletype+dl);
     [2], (is+ext,external rule+qf+tag+ruletype+dl;
                  error+in rule head+tag,skip to point);
     [3], (is+ext,error+in rule head+tag,skip to point;
                  rule declarer+qf+tag+ruletype+dl);
     skip to point); $ error
  error+rule tag expected,skip to point.

'root'+.
'pragmat'endif=compile.
'end'


