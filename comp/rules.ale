$ rules
'pragmat'module="rules".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH)
$
$  (C) 2020, L.Csirmaz, Hungary
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU Generatl Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ******************************************************* $
$ 
'a'rule declaration+>rtype+>ext.

$ BODY ********************************************************* $
'pragmat'if=compile.
'pragmat'require=("symbols","tags","types","lexical","disc",
    "display","pragmats","rulebody").

$ ************************************************************** $
$ A rule has type Irule, its typer is stored in the flags, and can
$   be retrieved as "get tag flag+ruletag+rtype"
$ Formal affixes are stored in a linked list. the flag "raffixes"
$   set if after the formal affixes are processed (to distinguish
$    unprocessed rule and a rule with no affixes). Formal list affixes have
$   two more fields for fcalibre and fssel (calibre=-1 for no selector
$   list). Formal tags and selectors are visible for rule declaration
$   using "redefine tag+>formal+new". This should be canceled at the end
$   of the declaration. using "restore tags"
$
$ External and prototype declarations emit nothing
$ Rule declaration emits
$    => Drule <tag> <rule body> Dpoint
$ For <rule body> see the "rulebody" module.

$
$ the last out or inout affix in an external declaration:
$      'x''a'rule+a>="@rule".
$ is parsed as >= if no space is between > and =

$ ============================================================== $
'a'must tag+x>:
   is tag+x;internal error+_rule_+_line_.

$ -------------------------------------------------------------- $
$ formal lists $

'table'MESSAGE=(
 "formal selector syntax"        :wrong formal selector,
 "formal selector tag expected"  :formal selector tag expected,
 "formal list tag is missing"    :formal list tag missing
).

$ skip field list; goes over a field list first time.
$   returns the calibre and whether there was any error with error message
'a'skip field list+calibre>+>err>:
   R+Sopen,1->calibre,(nxt:is tag+#,(R+Scomma,incr+calibre,:nxt;
                          R+Sequals,:nxt;
                          R+Sclose;
                          error+wrong formal selector,1->err);
                error+formal selector tag expected,1->err);
   -1->calibre.
'a'get list tag+tag>+calibre>+>err>:
  init restore,skip field list+calibre+err,0->tag,
    (is tag+tag;
     is+err;
     error+formal list tag missing,1->err),
    (is+err,forget restore; make restore).
$=====================================================================$

'table'MESSAGE=(
   "rule %p: symbol %p is expected here" :expected,
   "rule %p: rule as formal affix"       :rule in affix,
   "rule %p: formal affix syntax"        :formal tag expected,
   "rule %p: error in rule head"         :in rule head,
   "rule tag expected"                   :rule tag expected,
   "rule %p: redefined differenty at %l" :rule type different,
   "rule %p: formal affix %p has wrong type (was %p at %l)"
                                         :formal type mismatch,
   "rule %p: formal list affix %p has different calibre (at %l)"
                                         :formal list calibre mismatch,
   "rule %p: formal list affix %p has different standard selector (at %l)"
                                         :formal list ssel mismatch,
   "rule %p: formal list affix %p selector %p doubly defined"
                                         :double formal selector,
   "rule %p: formal affix %p defined twice"  :formal affix redefined
).

$ SKIP OVER FORMAL AFFIXES $
$ check syntax, set 1->err and give an error message
$ expected symbol after the sequence: = , - : .
'a'subbus+>tag+>err>:
  is+err,Rskip+Ssub,Rskip+Sbus;
  R+Ssub,(R+Sbus;1->err,error+expected+tag+Sbus);
  1->err,error+expected+tag+Ssub.
'a'expect formal tag+>ruletag+>err>-tag:
  is+err,(is raw tag+#;+);
  is tag+tag,(tag=ruletag,1->err,error+rule in affix+tag;+);
  1->err,error+formal tag expected+ruletag.
'a'skip formal affix+>ruletag+>err>:
   ahead+Ssub,subbus+ruletag+err,
      skip field list+#+err,expect formal tag+ruletag+err,subbus+ruletag+err;
   ahead+Sopen,skip field list+#+err,expect formal tag+ruletag+err,subbus+ruletag+err;
   R+Squote image,expect formal tag+ruletag+err;
   R+Sright,expect formal tag+ruletag+err,R skip+Sright;
   R+Sasterisk;
   expect formal tag+ruletag+err,(R+Sright;ahead+Ssub,subbus+ruletag+err;
     ahead+Smreq;is+err;1->err,error+expected+ruletag+Sright).
$ err=1: syntax error; fast=1/0 for prototype/declaration
$ the rule head can end in >= encoded as Smreq (external declaration)
'a'peek after formal affixes+>ruletag+fast>+>err>:
  is+err,0->fast;
  init restore,0->fast,
   (nxt:R+Splus,skip formal affix+ruletag+err,:nxt;+),
   (is+err;
    ahead+Spoint,1->fast;  $ prototype
    ahead+Scomma,1->fast;  $ prototype
    ahead+Sequals,1->fast; $ external
    ahead+Smreq,1->fast;   $ external
    ahead+Sminus;ahead+Scolon;
    error+in rule head+ruletag,1->err),
   (is+err,forget restore;make restore).
$======================================================================$
$ FORMAL AFFIXES $

$ formal affixes are linked through the adm*LADM field.
$  when fast=1 check/create the linked list
$  when fast=0 then use "redefine tag" to make the raw tag to
$  point to the formal.

$ formal is either =0 or is a formal affix entry
$  if zero, create a new formal affix entry
'a'check as formal+>rtag+>formal>+>tag+>type+>err>-otype-l:
  is+err;
  is+formal,get type+formal+otype,(otype=type;
    get defline+rtag+l,
    error+formal type mismatch+rtag+tag+otype+l,1->err);
  new formal tag+type+tag+formal.
$ this variable stores the * affix of the rule (if any)
'variable'repeat formal affix=0.
$ formal is either =0 or is a formal affix entry
$  if zero, create a new formal affix entry. Make "tag"
$  refer to that formal affix. For tag=Xstar, store 
$  the formal affix globally
'a'define as formal+>rtag+>formal>+>tag+>type+>err>:
  is+err;
  has formal type+tag,1->err,error+formal affix redefined+rtag+tag;
  check as formal+rtag+formal+tag+type+err,
     (is+err;
      tag=Xstar,formal->repeat formal affix;
      redefine tag+tag+formal).
$ ---------------------------------------------------------- $
$ formal list affix
$ define all selectors for a formal list, including the standard one
$ on entry type*tag is "formal stack" or "formal table" store calibre
$ set err if the same selector is defined twice

$ looking at the selector list, determine ssel.
$  tag is the list's tag
'a'check selector list+>tag+>n+ssel>-sel:
   R+Sopen,-1->ssel,
     (nxt:must tag+sel,(tag=sel,n->ssel;+),
          (R+Scomma,decr+n,:nxt;
           R+Sequals,:nxt;
           must+Sclose));
   $ no selector list
   1->ssel.
$ create a formal selector entry; complain if doubly defined
'a'create formal selector+>rtag+>tag+>sel+>offset+>err>-fsel-formal:
   is+err;
   pack selector+sel+tag+fsel,
    (has formal type+fsel,error+double formal selector+rtag+tag+sel,1->err;
     new formal tag+Iformal selector+fsel+formal,
     put repr+formal+offset,redefine tag+fsel+formal).

$ looking at the formal selector list, define all selectors, give error
$  messages for doubly defined selectors. Return calibre and ssel
'a'define selector list+>rtag+>tag+>n+ssel>+>err>-sel:
   R+Sopen,-1->ssel,
     (nxt:must tag+sel,(tag=sel,n->ssel;+),
        create formal selector+rtag+tag+sel+n+err,
        (R+Scomma,decr+n,:nxt;
         R+Sequals,:nxt;
         must+Sclose)),
     (ssel>0; $ standard selector has been defined $
      create formal selector+rtag+tag+tag+-1+err);
   $ no selector list
   1->ssel,create formal selector+rtag+tag+tag+1+err.
$ checking an existing formal list
'a'check formal list data+>rtag+>formal+>tag+>ftype+>fcal+>fssel+>err>
   -ocal-ossel-otype-ol:
   get defline+rtag+ol,get type+formal+otype,
   get formal calibre+formal+ocal,
   get formal ssel+formal+ossel,
    (ftype!=otype,error+formal type mismatch+rtag+tag+otype+ol,1->err;
     fcal!=ocal,error+formal list calibre mismatch+rtag+tag+ol,1->err;
     fssel!=ossel,error+formal list ssel mismatch+rtag+tag+ol,1->err;
     +).
$ formal is either=0 or is a formal list entry, If not zero,
$  check if we get the same configuration.
$ looking at  (selector)tag[]   or  tag[]  -- syntax is OK
'a'check as formal list+>rtag+>formal>+>tag+>ftype+>fcal+>err>-fssel:
   check selector list+tag+fcal+fssel,Rskip+tag,subbus+rtag+err,
    (is+formal,check formal list data+rtag+formal+tag+ftype+fcal+fssel+err;
     new formal tag+ftype+tag+formal,put formal calibre+formal+fcal,
       put formal ssel+formal+fssel).
$ formal is either=0 or is a formal list entry. It not zero, check
$  against it. Redefine selectors and the formal affix
$ looking at (selector)tag[]  or  tag[]   --  syntax is OK
'a'define as formal list+>rtag+>formal>+>tag+>ftype+>fcal+>err>-fssel:
   has formal type+tag,1->err,error+formal affix redefined+rtag+tag;
   define selector list+rtag+tag+fcal+fssel+err,Rskip+tag,subbus+rtag+err,
   (is+err;
    is+formal,check formal list data+rtag+formal+tag+ftype+fcal+fssel+err;
    new formal tag+ftype+tag+formal,put formal calibre+formal+fcal,
      put formal ssel+formal+fssel),
   (is+err;redefine tag+tag+formal).
$ formal list affix:  (selector list) tag[]  or tag[]; syntax OK
$ if "fast" is set, then this is a prototype (no selectors, no tags)
$ if "formal" is not zero, stored type is checked,
$  otherwise "formal" is created. If fast=0 it is attached
'a'formal list affix+>rtag+>fast+>formal>+>ftype+>err>-tag-calibre:
   get list tag+tag+calibre+err, $ peek after selector list $
     (is+err;
      is+fast,check as formal list+rtag+formal+tag+ftype+calibre+err;
      define as formal list+rtag+formal+tag+ftype+calibre+err).
$ formal affix tag[] (no selector list, after [] )
'a'check as formal table affix+>rtag+>tag+>formal>+>err>:
   is+formal,check formal list data+rtag+formal+tag+Iformal table+-1+1+err;
   new formal tag+Iformal table+tag+formal,put formal calibre+formal+-1,
     put formal ssel+formal+1.
$ formal affix tag[] (no selector list, after [] )
$   create the standard selector
'a'define as formal table affix+>rtag+>tag+>formal>+>err>:
   is+err;
   has formal type+tag,1->err,error+formal affix redefined+rtag+tag;
   check as formal table affix+rtag+tag+formal+err,
     (is+err;
      create formal selector+rtag+tag+tag+1+err,redefine tag+tag+formal).
$ formal table affix: tag[] (no selectors, after [])
$ if "fast" is set, this is a prototype only. If "formal" is
$ not zero, check against the stored value; otherwise create
'a'formal table affix+>rtag+>fast+>formal>+>tag+>err>:
   is+fast,check as formal table affix+rtag+tag+formal+err;
   define as formal table affix+rtag+tag+formal+err.
$ ---------------------------------------------------------- $
$ other formal affix; either check it or define it
'a'formal flat affix+>rtag+>fast+>formal>+>tag+>ftype+>err>:
   is+fast,check as formal+rtag+formal+tag+ftype+err;
   define as formal+rtag+formal+tag+ftype+err.
$ formal affix
$   works only when err=0, looking at a valid formal affix.
$   when fast=1, check/set type; when fast=0 make formal available
$   globally. If formal=0 create new, if formal!=0: check against it.
'a'formal affix+>rtag+>fast+>formal>+>err>-tag-type:
   is+err;
   R+Ssub,Rskip+Sbus,  $ [](selector list) tag[] or []tag[] $
     formal list affix+rtag+fast+formal+Iformal stack+err;
   ahead+Sopen,        $ (selector list) tag[] $
     formal list affix+rtag+fast+formal+Iformal table+err;
   R+Squote image,must tag+tag, $ ""f $
     formal flat affix+rtag+fast+formal+tag+Iformal file+err;
   R+Sright,must tag+tag, $ >tag or >tag> $
     (R+Sright,Iformal inout->type;
      ahead+Smore,Iformal inout->type; Iformal in->type),
     formal flat affix+rtag+fast+formal+tag+type+err;
   R+Sasterisk,
     formal flat affix+rtag+fast+formal+Xstar+Iformal repeat+err;
   must tag+tag,       $ tag> or tag[]
     (R+Sright,formal flat affix+rtag+fast+formal+tag+Iformal out+err;
      ahead+Smreq,formal flat affix+rtag+fast+formal+tag+Iformal out+err;
      subbus+rtag+err,formal table affix+rtag+fast+formal+tag+err).

$============================================================$
'table'MESSAGE=(
"tag %p redefined (was %p at %l)"       :tag redefined,
"rule %p: extra formal affix (%l)"      :extra affix,
"rule %p: missing formal affixes (%l)"  :missing formal affix,
"rule %p: more than one repeat affix"   :more repeat affix,
"rule %p: repeat affix * is the last one":last repeat affix,
"rule %p: function without out affixes" :function without out affixes,
"rule %p: exit rule with out affixes"   :exit rule with out affixes,
"external rule %p: missing string"      :no external string
).

$ ruletype: r arction|r func | r que | r pred | r exit
$  if type was not defined, then set, otherwise must agree
$
'a'check rule type+>ruletype+>ruletag+>dl+err>-otype:
   0->err,get type+ruletag+otype,
   (otype=Iempty,put type+ruletag+Irule,
      set tag flag+ruletag+ruletype,add tag prototype+ruletag+dl;
    otype=Irule,get tag flag+ruletag+rtype+otype,
      (otype=ruletype;
       get defline+ruletag+dl,error+rule type different+ruletag+dl,1->err);
    get defline+ruletag+dl,error+tag redefined+ruletag+otype+dl,1->err).

$ The rule "rtag" has formal affixes; the present list should be checked
$   against it. When fast=1 this is just another prototype; otherwise
$   set formals (and selectors) globally. Save * affix in "repeat formal affix"
'a'check formal affixes+>fast+>rtag+err>-formal-line:
   0->err,0->repeat formal affix,get defline+rtag+line, $ old definition $
   get adm+rtag+formal, $ go over all defined formal affixes
    (nxt:is+err; $ error meanwhile $
         R+Splus,
           (formal=0,error+extra affix+rtag+line,1->err;
            formal affix+rtag+fast+formal+err,
                                  get adm+formal+formal,:nxt);
         +),
    (is+err,skip all;
     formal=0;
     error+missing formal affix+rtag+line,1->err).

$ check: a 'function' must have out affix; an 'exit' shouldn't $
'a'check out affixes+>rtag+>flag-kind:
    get tag flag+rtag+rtype+kind,
    ((kind=rfunc,flag=0),warning+5+function without out affixes+rtag;
     (kind=rexit,flag!=0),error+exit rule with out affixes+rtag;
     +).
$ This is the first time we see rule "rtag". fast=1 if this is
$   a prototype (formal affixes should not be set). If fast=0
$   set formal affixes (and selectors) globally.
$ When fast=0 and has * affix, save it in "repeat formal affix".
$ Rule flags: 
$     raffixes   affixes have been processed
$     rvararg    (it has a * affix)
$     routvararg (has out affix in the repeat block)
$ Warn if it is a 'function' and has no out affixes
$ Give error if 'exit' and has out affixes
$ 
'a'create formal affixes+>fast+>rtag+err>-link-formal-ftype-flag1-flag2:
   0->err->flag1->flag2,0->repeat formal affix,rtag->link,
    (nxt:is+err;
         R+Splus,0->formal,formal affix+rtag+fast+formal+err,
           (is+err;
            get type+formal+ftype,
             (=ftype=
 [Iformal repeat],(is+flag1,1->err,error+more repeat affix+rtag;
                   1->flag1,set tag flag+rtag+rvararg);
 [Iformal out],   1->flag2,
                       (is+flag1,set tag flag+rtag+routvararg;+);
 [Iformal inout], 1->flag2;
             +),
            put adm+link+formal,formal->link,:nxt);
         flag1=0; $ no repeat affix
         (-type:get type+link+type,type=Iformal repeat),
             1->err,error+last repeat affix+rtag;
     +),
    (is+err,put adm+rtag+0,skip all; $ redo all assignments $
     set tag flag+rtag+raffixes,check out affixes+rtag+flag2).
$------------------------------------------------------------------$
$ 'external''action'ruletag+affixes="string".
'a'rule external declarer+>tag+>dl-str-err:
   (R+Smreq;must+Sequals),0->err,
   (is string+str;0->str,1->err,error+no external string+tag),
   add tag external+tag+dl+err,
   (is+err;put repr+tag+str).
$ prototype: 'action'ruletag+affixes.
'a'rule prototype+>tag+>dl-proto-err:
   0->err,get pragmat value+pgt proto+proto, $ 1: import, 2: public, 0: none $
   (proto=1,add tag import+tag+dl+err;
    proto=2,add tag public+tag+dl+err;
    add tag prototype+tag+dl).
$ external or prototype, no rule body
'a'rule definition+>rtag+>ext+>dl-err:
   (is tag flag+rtag+raffixes, $ have formal affixes, check them
      check formal affixes+1+rtag+err;
    create formal affixes+1+rtag+err),
   (is+err,skip all;
    is+ext,rule external declarer+rtag+dl;
    rule prototype+rtag+dl).
$ external or prototype; after the comma; no rule body
'a'rule definition sequence+>ruletype+>ext-tag-err-dl:
   R+Scomma,(is tagdl+tag+dl,
       check rule type+ruletype+tag+dl+err,
       peek after formal affixes+tag+#+err,
       $ check formal affix syntax only
       (is+err,skip all;rule definition+tag+ext+dl),
       :rule definition sequence;
      error+rule tag expected,skip all,:rule definition sequence);
   R+Spoint;
   must+Spoint,skip to point.
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
$ rule declarer: 
$   <typer> ruletag+affixes-locals:<rule body>.
$  the main work is done in "rule body+ruletag"
'a'rule declarer+>rtag+>dl-err:
   (is tag flag+rtag+raffixes, $ we have formal affixes, check them
      check formal affixes+0+rtag+err;
    create formal affixes+0+rtag+err),
   add tag definition+rtag+dl+err, $ as it is defined here $
   (is+err,skip to point;
    rule body+rtag+repeat formal affix).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
$ after 'a','p','f','q','e' (external declaration included)
$
'a'rule declaration+>ruletype+>ext-tag-err-fast-dl:
  is tag+tag,get linenum+dl,check rule type+ruletype+tag+dl+err,
    peek after formal affixes+tag+fast+err,
    $ fast=0: declarer
    (is+err,skip to point; $ error in formal affixes
     (is+ext;is+fast),
       rule definition+tag+ext+dl,
       rule definition sequence+ruletype+ext;
     rule declarer+tag+dl,restore tags);
  error+rule tag expected,skip to point.

'root'+.
'pragmat'endif=compile.
'end'


