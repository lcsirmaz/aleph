$ constants and variables 
'pragmat'module=variables,title="variables v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
$
'a'constant declaration+>ext,variable declaration+>ext,
   static variable declaration.

$ BODY ******************************************************** $
'pragmat'if=compile.
'pragmat'require=("display","lexical","symbols","identifier","tags",
                  "pragmats","types","disc").
$
$ constant and variable declaration:
$  <typer> tag = <initializer>.
$   => Dexpression LADM <expression> Dpoint
$ external declaration:
$  'external' <typer> tag = "string".
$   => Dexternal LADM <string> Dpoint
$ prototype:
$   => Dimport LADM Dpoint
$   => Dproto / Dexport <typer> <qtag> Dpoint
$
$ initializer: symbolic read swallows the minus sign before integer and hex
$   denotations, thus 'a*b-4' becomes 'a' '*' 'b' '-4'
$ Accepted constructs:
$   <L >L <>L tag cons () * / + - ~ | & ^
$ LADM values:
$   type: Ivariable, Iconstant, Istatic var
$   flag: timported|tdefined  from a prototype
$         tdefined            declaration
$ ======================================================= $
'variable'ltype=0,lqf=0,ltag=0.

'table'MESSAGE=(
  "%p %p: missing tag in expression"   :tag expected,
  "%p %p: expression syntax"           :wrong expression,
  "%p: tag expected"                   :tag expected for,
  "external %p %p: missing string"     :no external string,
  "mixing %p declaration and prototype":mixing proto,
$ warning $
  "%p %p: only virtual bounds in expressions":virtual bounds only
).

$ ======================================================= $
$ read an expression
$
'p'is expression+>err>:
  (R+Sminus,D+Dminus;+),
  (nxt: exprbase+err,
        (is+err;
         R+Sboolor,    D+Dor,   :nxt;
         R+Sbooland,   D+Dand,  :nxt;
         R+Sboolxor,   D+Dxor,  :nxt;
         R+Splus,      D+Dplus, :nxt;
         R+Sminus,     D+Dminus,:nxt;
         $ as a*b-3 becomes 'a' '*' 'b' '-3' wee need this trick
         ahead number, D+Dplus, :nxt;
         R+Sasterisk,  D+Dstar, :nxt;
         R+Sslash,     D+Ddiv,  :nxt;
         +)).
'a'expect list tag+>err>-qf-x:
   is qtag+qf+x,Dqtag+qf+x;
   1->err,error+tag expected+ltype+ltag.
'p'exprbase+>err>-qf-x:
   is number+x+#,D+x;
   is qtag+qf+x,Dqtag+qf+x;
   R+Scomplement,D+Dcompl,
      (exprbase+err;is+err;1->err,error+wrong expression+ltype+ltag);
   R+Svlwb,D+Dlwb,expect list tag+err;
   R+Svupb,D+Dupb,expect list tag+err;
   R+Slwb,warning+1+virtual bounds only+ltype+ltag,D+Dlwb,expect list tag+err;
   R+Supb,warning+1+virtual bounds only+ltype+ltag,D+Dupb,expect list tag+err;
   R+Scalibre,D+Dcalibre,expect list tag+err;
   R+Sopen,D+Dopen,
      (is expression+err;is+err;1->err,error+wrong expression+ltype+ltag),
      D+Dclose,must+Sclose.

'a'expect expression-err:
   $ after '=' constant and variable declaration
   0->err,
   (is expression+err;1->err,error+wrong expression+ltype+ltag),
   (is+err,skip all;+).
$ ------------------------------------------------------ $
$ constant/variable declarer
$ after <TYPER><tag>=
'a'declarer+>dl-res:
   create tag definition+lqf+ltag+ltype+dl+res,
   set tag flag+res+tdefined,check tag definition+res,
   D+Dexpression,Dtag+res,expect expression,D+Dpoint.

$ after 'external'<TYPER><tag>=
'a'external declarer+>dl-res-str:
   create tag definition+lqf+ltag+ltype+dl+res,
   set tag flag+res+tdefined,set tag flag+res+texternal,
   check tag definition+res,
   (is string+str; 0->str,error+no external string+ltype+ltag),
   D+Dexternal,Dtag+res,Dstring+str,D+Dpoint.

$ after <TYPER><tag>.
'a'prototype+>dl-proto-res:
   get pragmat value+pgt proto+proto, $1: import, 2: public, 0: none $
   (proto=1,create tag definition+lqf+ltag+ltype+dl+res,
            set tag flag+res+tdefined,set tag flag+res+timported,
            check tag definition+res,
            D+Dimport,Dtag+res,D+Dpoint;
    (proto=2,D+Dexport;D+Dproto),D+ltype,Dqtag+lqf+ltag,D+Dpoint).

$ 'x''const'var="@var".  external declarer
$ 'const'var=EXPR.       declarer
$ 'const'var.            prototype
$ ext=1: external; ext=2/3 declarer/prototype
'a'declaration+>ext>-dl:
   is qtag+lqf+ltag,get linenum+dl,
     (R+Sequals, $ this is a declarer
       (ext=3,error+mixing proto+ltype,skip all;
        ext=1,external declarer+dl;
        2->ext,declarer+dl);
      ext=1,must+Sequals,external declarer+dl;
      ext=2,error+mixing proto+ltype,skip all;
      3->ext,prototype+dl);
   error+tag expected for+ltype,skip all.
        
$ after <EXTERNAL><TYPER>
$  ext changes to reflect declaration / prototype
$    ext=1     external
$    ext=0/2   declarer
$    ext=0/3   prototype
'a'declaration series+>ext:
   declaration+ext,
        (R+Scomma,:declaration series;
         R+Spoint;
         must+Spoint,skip to point).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
$ 'external''constant' or 'constant'
'a'constant declaration+>ext:
   Iconstant->ltype,declaration series+ext.
$ 'external''variable' or 'variable'
'a'variable declaration+>ext:
   Ivariable->ltype,declaration series+ext.
$ 'static''variable'
'a'static variable declaration:
   Istatic var->ltype,declaration series+0.

'root'+.

'pragmat'endif=compile.
'end'

