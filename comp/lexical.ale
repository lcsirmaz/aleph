$ lexical parser for ALEPH 
'pragmat'module=lexical, title="lexical v2.1".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2.2)
$
$  (C) 2020-2025, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** 
$ Create symbols from the raw character sequence read from SOURCE
$   or from a string in LEXT
$ A symbol is a pointer to 
$   TTAG      tag
$   NUMBER    contant
$   LEXT      string
$   SPECIAL   all others, they have special names
$ Handle source printing through "display char+char+show"

'constant' $ symbol names
  Saction,	Sanchor,	Sarrow,		Sasterisk,
  Sbooland,	Sboolor,	Sboolxor,	Sbox,
  Sbus,		Scalibre,	Scharfile,	Sclose,
  Scolon,	Squalifier,	Scomplement,	Scomma,
  Sconssymb,	Sdatafile,	Sdummy symb,	Sendsymb,
  Seol,		Sequals,	Sexit,		Sextsymb,
  Sfunction,	Sless,		Slseq,
  Slwb,		Sminus,		Smore,		Smreq,
  Snoarg,	Snot equal,	Sopen,		Splus,
  Spoint,	Spredicate,	Spragsymb,	Squestion,
  Sright,	Srootsymb,	Ssemicolon,	Sslash,
  Sstacksymb,	Sstatic,	Ssub,		Stablesymb,
  Supb,		Svarsymb,	Svlwb,		Svupb,
$ empty string in LEXT
  Squote image.

'stack'LEXT.
'p'open source+>type+>ptr.
   $ if type=0 then read from the third character of LEXT[ptr];
   $ otherwise open the source file LEXT[ptr] with search paths
   $ fails if type!=0 and cannot open the file
'a'close source.
   $ clean up; close the open file handler
'a'try to open+>str+res>.
   $ callback to open a fully qualified name in LEXT[str]
   $ res=0: opened OK, res=1: not found, res=-1: error opening
'a'read+x>.
   $ return the next symbol: one of the symbol names,
   $ or a pointer to LEXT (string), NUMBER (constant), 
   $ TTAG (tag)
'a'enter string tag+>str+x>.
   $ handle a string as an identifier; complain if not
'a'skip+x>.
   $ go ahead until point, eol or eof; return that symbol
'a'forget string+>x.
   $ throw away the last element of LEXT
'p'was lexical pointer+>ptr.
   $ gives the string representation in BUFFER

$ BODY ********************************************************
'pragmat'if=compile.

$ external stuff $
'pragmat'require=("display","tags","number","pragmats",
    "buffer","input","path","rulebody","config").

$ ************************************************************* 
'charfile' SOURCE=>"<<stdin>>".	$ input file

$ stacks for strings
'stack'[16] LEXT[] =(
  ""		:Squote image   $ empty string
).

$ ************************************************************* 

$ Symbol names $
'table'SPECIAL[] =
("<dummy>"      :Sdummy symb,     "'end'"        :Sendsymb,
 "'action'"     :Saction,         "'function'"   :Sfunction,	
 "'predicate'"  :Spredicate,      "'question'"   :Squestion,
 "'exit'"       :Sexit,           "'root'"       :Srootsymb,
 "'external'"   :Sextsymb,        "'static'"     :Sstatic,
 "'charfile'"   :Scharfile,       "'datafile'"   :Sdatafile,
 "'constant'"   :Sconssymb,       "'variable'"   :Svarsymb,
 "'table'"      :Stablesymb,      "'stack'"      :Sstacksymb,
 "'pragmat'"    :Spragsymb,
 
 "->"           :Sarrow,          "="            :Sequals:Sbox,
 "<"            :Sless:Svlwb,     ">"            :Smore:Sright:Svupb,
 "<<"           :Slwb,            ">>"           :Supb,
 "["            :Ssub,            "]"            :Sbus,
 "@"            :Sanchor,         "#"            :Snoarg,          
 "<>"           :Scalibre,        "*"            :Sasterisk,
 "("            :Sopen,           ")"            :Sclose,

 ":"            :Scolon,          "::"           :Squalifier,
 ","            :Scomma,          ";"            :Ssemicolon,
 "."            :Spoint,

 "-"            :Sminus,          "+"            :Splus,
 "!="           :Snot equal,      "/"            :Sslash,
 ">="           :Smreq,           "<="           :Slseq,
 "~"            :Scomplement,     "|"            :Sboolor,
 "&"            :Sbooland,        "^"            :Sboolxor,
# end of line
 "\n"           :Seol
).

$ put the string representing ptr into the top of BUFFER
'p'was lexical pointer+>ptr-optr-n:
  was+SPECIAL+ptr, copy string+SPECIAL+ptr+BUFFER;
  was+LEXT+ptr, copy string+LEXT+ptr+BUFFER;
  was+NUMBER+ptr, >>BUFFER->optr,get number repr+ptr,
     subtr+>>BUFFER+optr+n,
     pack string+BUFFER+n+LEXT,unstack to+BUFFER+optr,
     copy string+LEXT+>>LEXT+BUFFER,unstack string+LEXT.

$ ************************************************************* 

$ error messages $
'table'MESSAGE=(
"hex digit expected after 0x" :hex digit expected,
"wrong character denotation"  :wrong character denotation,
"maximal string length exceeded":max string length exceeded,
"unterminated string"         :unterminated string,
"unknown key word '%p'"       :unrecognized bold,
"unknown manifest keyword %p" :unrecognized builtin,
"missing ' after '%p'"        :missing bold delimiter,
"not an identifier after -D"  :string tag syntax,
"illegal character: %c"       :illegal character
).

$ ****************** BASIC INPUT-OUTPUT *********************** $

$ local variables and constants
'variable'
   tab width=8,	$ tabular width
   give text=0,	$ list source
   LEXTptr=-1, 	$ string pointer in LEXT
   LEXTcnt=0,	$ character counter
   LEXTlen=0,	$ total length
   char=/ /,	$ next character is stored here
   pchar=0,	$ character position within the line
   ppline=0,	$ postponed newline from string denoters
   was tab=0,	$ tabular read, emit that much spaces
   exhausted=-4.$ reaching eof

'constant'
   tabchar=9,	$ tabular character
   end char=0x1234567. $ large number representing eof

$ characters are read either from LEXT or from SOURCE
$ 
'p'open source+>type+>str:
  $ switch to the next source:
  $ type=0: read from the third character of LEXT[src]
  $ type>0: LEXT[ptr] is a supplied name,
  type=0,initialize source reading+str;
  open src file+type+str,initialize source reading+0.

'a'try to open+>str+res>-errno:
  $ callback routine; str is a fully qualified name in LEXT
  $ res=0: opened OK, res=1: file not found, res=-1: error opening
  open file+SOURCE+/r/+LEXT+str,0->res; 
  get file error+SOURCE+errno,(errno=2,1->res;-1->res).

'a'close source:
  $ clean up
  was+LEXT+LEXTptr, -1->LEXTptr;
  LEXTptr=0,close file+SOURCE,reset pr line,-1->LEXTptr;
  +.

$ ************************************************************* 

'a'initialize source reading+>str:
  $ initialize reading from either LEXT[str] or from SOURCE
  str->LEXTptr,(str=0;string length+LEXT+str+LEXTlen,2->LEXTcnt),
  0->pchar, -4->exhausted, 0->ppline, 0->was tab, 0->optor,
  reset pr line, $ reset printed source line numbers
  newline->char,next char,next visible char.

'pragmat'macro=read char.
'p'read char+char>:
  $ return the next character from either LEXT or SOURCE
  LEXTptr>0,
    (nxt: LEXTcnt=LEXTlen, /./->char,incr+LEXTcnt;
          LEXTcnt<LEXTlen,string elem+LEXT+LEXTptr+LEXTcnt+char,incr+LEXTcnt,
              (char=newline,:nxt;+));
  LEXTptr=0,get char+SOURCE+char.

'a'next char:
  $ get next character to "char", handle tab,
  $    newline chars. When reaching eof, add two
  $    newline chars, then emit "end char".
   ((char=newline,exhausted<-2),get pragmat value+pgt text+give text,
          get pragmat value+pgt tab width+tab width;+),
   ((is+give text,exhausted<-2),display char+char+1;display char+char+0),
   (nxt-x:
    was tab>0, decr+was tab, / /->char, incr+pchar;
    read char+char, incr+pchar,
      (=char=
       [newline], 0->pchar;
       [tabchar], / /->char, subtr+pchar+1+x,
                  divrem+x+tab width+#+was tab,
                  subtr+tab width+was tab+was tab, decr+was tab;
       [:31],     :nxt;
       +);
    exhausted < -2, incr+exhausted, newline->char;
    end char->char
  ).

$ ************************************************************* 
'p'bold letter+x>:
  $ return the next bold letter; no spaces are allowed
  =char=
  [/a/:/z/], char->x, next char;
  -.
'p'digit+x>:
  $ skip spaces, return the digit
  =char=
  [/ /], next char,:digit;
  [/0/:/9/], char->x,next char;
  -.
'p'hex digit+x>:
  $ skip spaces, return 0..9, A..F, a..f
  =char=
  [/ /], next char,:hex digit;
  [/0/:/9/;/a/:/f/;/A/:/F/],char->x,next char;
  -.
'q'is letgit char+>x:
  =x=
  [/A/:/Z/;/a/:/z/;/0/:/9/],+;
  [/@/],is pragmat value+pgt library;
  -.
'p'letgit+x>:
  $ skip spaces, allow @ in library mode only
  char=/ /, next char, :letgit;
  is letgit char+char,char->x,next char.
'a'next visible char:
  $ skip spaces and newlines
  =char=
  [/ /], next char, :next visible char;
  [newline], incr+ppline, next char, :next visible char;
  +.

$ COMPOSITE SYMBOLS ******************************************* 
'a'read greater+>optor+x>:
  $ look ahead after >; optor shows if after an operand 
  is+optor,(char=/=/,next char,Smreq->x; Smore->x);
  char=/>/, next char, Supb->x;
  Svupb->x.
'a'read less+>optor+x>:
  $ look ahead after <; optor shows if after an operand
  is+optor,(char=/=/, next char, Slseq->x; Sless->x);
  char=/</, next char, Slwb->x;
  char=/>/, next char, Scalibre->x;
  Svlwb->x.
'a'read minus+x>:
  $ look ahead after -, ->, -123
  =char=
  [/>/], next char, Sarrow->x;
  read minus with spaces+x.
'a'read minus with spaces+x>:
  $ look ahead after - skipping spaces
  =char=
  [/ /], next char, :read minus with spaces; $ skip spaces
  [/0/], next char, read zero+1+x;
  [/1/:/9/], read const+1+x;
  Sminus->x.
$ CONSTANTS *************************************************** 
'a'read zero+>sign+x>:
  $ we are after a zero
  =char=
  [/0/:/9/], read const+sign+x; $ a constant
  [/x/;/X/], next char, read hex+sign+x;
  get number zero+x.
'a'read const+>sign+x>-ptr:
  $ char is a digit, put the digits to BUFFER
  >>BUFFER->ptr,extend BUFFER+char,next char,
  (nxt-d:digit+d,extend BUFFER+d,:nxt;+),
  enter const string+sign+ptr+x,unstack to+BUFFER+ptr.
'a'read hex+>sign+x>-d-ptr:
  $ after 0x
  hex digit+d,>>BUFFER->ptr,extend BUFFER+d,
    (nxt: hex digit+d,extend BUFFER+d,:nxt;+),
    enter hex const string+sign+ptr+x,unstack to+BUFFER+ptr;
  error+hex digit expected, get number zero+x.

$ CHARACTERS AND STRINGS ************************************** 
'a'read char denotation+x>-v:
  $ we are after / reading a character denotation
  char->v,
    (char=newline, error+wrong character denotation;
     next char, (char=///, next char;
                 error+wrong character denotation)
    ), enter const value+v+x.
'a'skip char denotation:
  $ skip  /X/
  char=newline;
  next char, (char=///, next char; +).

'a'read string+x>-optr-n:
  $ strings are stored in LEXT, char=/"/
  >>BUFFER->optr,0->n,
  (nxt: next char, (=char=
    [/"/], next char, $ closing quote mark
      (char=/"/, extend BUFFER+char, incr+n, :nxt;
       next visible char, $ if /"/ then continuation
         (char=/"/,:nxt;
          n=0, Squote image->x;
          (n<max string length;error+max string length exceeded,
            max string length->n),
            pack string+BUFFER+n+LEXT,unstack to+BUFFER+optr,>>LEXT->x));
    [newline; end char], error+unterminated string,
          unstack to+BUFFER+optr,Squote image->x;
    extend BUFFER+char, incr+n, :nxt)).

'a'skip string:
   $ skip a string; initial quote mark passed
   =char=
   [/"/], next char;
   [newline; end char], +;
   next char, :skip string.

'a'forget string+>x:
   $ remove the topmost string in LEXT, it is not needed anymore
   x=Squote image;
   x=>>LEXT, unstack string+LEXT;
   +.

$ COMMENTS **************************************************** 
'a'long comment:
  $ comment starting with dollar goes to the next one
  =char=
  [newline], +;
  [/$/], next char;
  next char, :long comment.
'p'short comment:
  $ a # followed by alphanumeric characters
  =char=
  [/ /], next char, :short comment;
  [/A/:/Z/;/a/:/z/;/0/:/9/], next char,
     (nxt: =char=
      [/A/:/Z/;/a/:/z/;/0/:/9/;/ /], next char, :nxt; +);
  -. $ not a short comment

$ BOLD SYMBOLS ************************************************ 
$ allowed bold symbols are stored in a binary search table
'table'(left,right,adm)BOLD[] =
("a"           :B1        ,(   0,   0,Saction    ),
 "act"         :B2        ,(  B1,  B3,Saction    ),
 "action"      :B3        ,(   0,   0,Saction    ),
 "charfile"    :B4        ,(  B2,  B6,Scharfile  ),
 "cons"        :B5        ,(   0,   0,Sconssymb  ),
 "constant"    :B6        ,(  B5,  B7,Sconssymb  ),
 "cst"         :B7        ,(   0,   0,Sconssymb  ),
 "datafile"    :B8        ,(  B4, B12,Sdatafile  ),
 "e"           :B9        ,(   0,   0,Sexit      ),
 "end"         :B10       ,(  B9, B11,Sendsymb   ),
 "exit"        :B11       ,(   0,   0,Sexit      ),
 "external"    :B12       ,( B10, B14,Sextsymb   ),
 "f"           :B13       ,(   0,   0,Sfunction  ),
 "fct"         :B14       ,( B13, B15,Sfunction  ),
 "func"        :B15       ,(   0,   0,Sfunction  ),
 "function"    :first bold,(  B8, B24,Sfunction  ),
 "p"           :B17       ,(   0,   0,Spredicate ),
 "pragmat"     :B18       ,( B17, B19,Spragsymb  ),
 "pred"        :B19       ,(   0,   0,Spredicate ),
 "predicate"   :B20       ,( B18, B22,Spredicate ),
 "q"           :B21       ,(   0,   0,Squestion  ),
 "qu"          :B22       ,( B21, B23,Squestion  ),
 "que"         :B23       ,(   0,   0,Squestion  ),
 "question"    :B24       ,( B20, B28,Squestion  ),
 "root"        :B25       ,(   0,   0,Srootsymb  ),
 "stack"       :B26       ,( B25, B27,Sstacksymb ),
 "static"      :B27       ,(   0,   0,Sstatic    ),
 "table"       :B28       ,( B26, B30,Stablesymb ),
 "var"         :B29       ,(   0,   0,Svarsymb   ),
 "variable"    :B30       ,( B29, B31,Svarsymb   ),
 "x"           :B31       ,(   0,   0,Sextsymb   ),
$ built-in manifest constants
 "_file_"      :D1        ,(   0,   0,1          ),
 "_line_"      :D2        ,(  D1,  D3,2          ),
 "_module_"    :D3        ,(   0,   0,3          ),
 "_rule_"      :first bin ,(  D2,  D4,4          ),
 "_source_"    :D4        ,(   0,  D5,5          ),
 "_title_"     :D5        ,(   0,   0,6          )
).
'a'read bold+x>-optr-n:
  $ read a bold symbol 'abc'; give error message in case of error
    >>BUFFER->optr,0->n,
    ((nxt-t: bold letter+t,extend BUFFER+t,incr+n,:nxt;
             char=/'/,next char),
       pack string+BUFFER+n+LEXT,first bold->x,
       (nxt: x=0,error+unrecognized bold+>>LEXT,Sdummy symb->x;
            compare string+BOLD+x+LEXT+>>LEXT+n,next+BOLD+x,
              (n>0,left*BOLD[x]->x,:nxt;
               n<0,right*BOLD[x]->x,:nxt;
               adm*BOLD[x]->x
              )
       ),
       unstack string+LEXT,unstack to+BUFFER+optr;
    pack string+BUFFER+n+LEXT,error+missing bold delimiter+>>LEXT,
     Sdummy symb->x,unstack string+LEXT,unstack to+BUFFER+optr).

$ manifest constants:  _line_, _file_, _rule_, etc $
'a'string from tag+>tag+string>:
   was+TTAG+tag,previous+TTAG+tag,copy string+TTAG+tag+LEXT,>>LEXT->string;
   Squote image->string.
'a'read manifest+x>-optr-n:
  >>BUFFER->optr,extend BUFFER+/_/,1->n,
  ((nxt-t: bold letter+t,extend BUFFER+t,incr+n,:nxt;
           char=/_/,extend BUFFER+/_/,incr+n,next char),
      pack string+BUFFER+n+LEXT,first bin->x,
      (nxt:x=0,error+unrecognized builtin+>>LEXT;
          compare string+BOLD+x+LEXT+>>LEXT+n,next+BOLD+x,
           (n>0,left*BOLD[x]->x,:nxt;
            n<0,right*BOLD[x]->x,:nxt;
            adm*BOLD[x]->x)),
      unstack string+LEXT,unstack to+BUFFER+optr,(=x=
      [1;5],$ file   $ find linenum+0+#+x;
      [2],  $ line   $ find linenum+0+x+#,enter const value+x+x;
      [3],  $ module $ get module tag+x,string from tag+x+x;
      [4],  $ rule   $ get rule tag+x,string from tag+x+x;
      [6],  $ title  $ get pragmat value+pgt title+x,(is+x;Squote image->x);
      $ none of the above $ Sdummy symb->x);
  n=1,error+illegal character+/_/,unstack to+BUFFER+optr,Sdummy symb->x;
  pack string+BUFFER+n+LEXT,error+unrecognized builtin+>>LEXT,
    forget string+>>LEXT,unstack to+BUFFER+optr,Sdummy symb->x).

$ TAGS ******************************************************** 
$ identifiers are passed to the "tags" module for processing
'a'read tag+>at+x>-ptr-n:
  $ handle an identifier colleced in BUFFER
  >>BUFFER->ptr,1->n, extend BUFFER+char, next char,
  (nxt-t: letgit+t, extend BUFFER+t,0->at,incr+n,:nxt;+),
  (is+at, Sanchor->x; enter tag+n+x), unstack to+BUFFER+ptr.
'a'enter string tag+>str+x>-ptr-ptr2-n:
  $ handle a string as an identifier; complain if not
  >>BUFFER->ptr,unpack string+LEXT+str+BUFFER,subtr+>>BUFFER+ptr+n,
  ptr->ptr2,incr+ptr2,
  (nxt:n=0,1->n,extend BUFFER+/a/,error+string tag syntax;
       ptr2>>>BUFFER;
       is letgit char+BUFFER[ptr2],incr+ptr2,:nxt;
       error+string tag syntax),
  enter tag+n+x,unstack to+BUFFER+ptr.
$ ************************************************************* 

'variable'
  optor=0.	$ 1 after ),], tag, digits, char denotation

'a'read+x>-ooptor:
  $ return the next symbol.
  ppline>0, decr+ppline, Seol->x; $ stored newlines
  optor->ooptor, 0->optor, (nxt: =char=
    [/ /], next char, :nxt; $ skip spaces
    [/A/:/Z/;/a/:/z/], 1->optor, read tag+0+x;
    [/+/], next char, Splus->x;
    [/,/], next char, Scomma->x;
    [/;/], next char, Ssemicolon->x;
    [newline], next char, ooptor->optor, Seol->x;
    [/-/], next char, read minus+x;
    [/=/], next char, Sequals->x;
    [/(/], next char, Sopen->x;
    [/)/], next char, 1->optor, Sclose->x;
    [/0/], next char, 1->optor, read zero+0+x;
    [/1/:/9/], 1->optor, read const+0+x;
    [/'/], next char, read bold+x;
    [/</], next char, read less+ooptor+x;
    [/>/], next char, read greater+ooptor+x;
    [/*/], next char, Sasterisk->x;
    [/:/], next char, (char=/:/,next char,Squalifier->x;Scolon->x);
    [///], next char, (is+ooptor, Sslash->x;
            1->optor, read char denotation+x);
    [/./], next char, Spoint->x;
    [/@/], (is pragmat value+pgt library, 1->optor, read tag+1+x;
            next char,Sanchor->x);
    [/?/], next char, Snoarg->x;
    [/$/], next char, long comment, :nxt;
    [/[/], next char, Ssub->x;
    [/]/], next char, 1->optor, Sbus->x;
    [/#/], next char, (short comment, :nxt; Snoarg->x);
    [/"/], read string+x;
    [/!/], next char, (char=/=/, next char, Snot equal->x;
                       error+illegal character+/!/, :nxt);
    $ boolean operators $
    [/~/], next char, Scomplement->x;
    [/|/], next char, Sboolor->x;
    [/&/], next char, Sbooland->x;
    [/^/], next char, Sboolxor->x;
    $ manifest constants $
    [/_/], next char, read manifest+x;
    [end char], next char, Sendsymb->x;
    error+illegal character+char, next char, :nxt
  ).  

'a'skip+x>:
  $skip untip eol, point, or eof
  ppline>0, decr+ppline, Seol->x;
  (nxt: =char=
        [newline], next char, Seol->x;
        [///], next char, skip char denotation, :nxt;
        [/./], next char, Spoint->x;
        [/"/], next char, skip string, :nxt;
        [/#/], next char, (short comment;+),:nxt;
        [/$/], next char, long comment, :nxt;
        [end char], Sendsymb->x;
        next char, :nxt
  ).

'root'+.
'pragmat'endif=compile.

'end'


