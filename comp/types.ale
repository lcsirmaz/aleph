$ types
'pragmat'module=types, title="types v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
$
$ different types used
$

'constant' $ types
  Iempty,
  Iconstant,		Ivariable,		Istatic var,
  Itable,		Istack,			Istatic stack,
  Ipointer constant,	Ichar file,		Idata file,
  Irule,
  $ formal types
  Iformal stack,	Iformal table,		Iformal file,
  Iformal in,		Iformal out,		Iformal inout,
  Iformal anchor,	Iformal shift,		Imacro,
  Inoarg,		Ilocal,			Ilabel.
  
'p'was type pointer+>ptr.

'table'INDICATOR.

$ BODY ******************************************************** $
'pragmat'if=compile.

'pragmat'require="buffer".

'table'[]INDICATOR=(
  "undefined"		:Iempty,
  "constant"		:Iconstant,
  "variable"		:Ivariable,
  "static var"		:Istatic var,
  "table"		:Itable,
  "stack"		:Istack,
  "static stack"	:Istatic stack,
  "pointer constant"	:Ipointer constant,
  "charfile"		:Ichar file,
  "datafile"		:Idata file,
  "rule"		:Irule,
$formal types
  "formal stack"	:Iformal stack,
  "formal table"	:Iformal table,
  "formal file"         :Iformal file,
  "formal in"		:Iformal in,
  "formal out"		:Iformal out,
  "formal inout"	:Iformal inout,
  "formal anchor"	:Iformal anchor,
  "formal shift"        :Iformal shift,
  "macro parameter"	:Imacro,
  "no argument"		:Inoarg,
  "local"		:Ilocal,
  "label"		:Ilabel
).

'p'was type pointer+>ptr:
   was+INDICATOR+ptr,copy string+INDICATOR+ptr+BUFFER.

'root'+.
'pragmat'endif=compile.
'end'



