$ INPUT source files for ALEPH $
'pragmat'module=input,title="input, v2.1".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2.1)
$
$  (C) 2020-2024, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
'a'read command line arguments.
   $ intialize command line arguments, process args --help and --version
'a'read sources.
   $ process all sources: either as pragmat or call pass1
'a'read user libraries.
   $ read user libraries
'a'read standard library.
   $ read the standard library (single module) if not disabled
'a'check source modules.
   $ at the end of pass1 check if every required source has a module tag

$ pragmats and command line arguments
'a'add required source+>ptr.
   $ add LEXT[ptr] as required source for require=, -M,
'a'add included source+>ptr.
   $ add LEXT[ptr] as included source for include=
'a'add library source+>ptr.
   $ add LEXT[ptr] as a library (only if head=srchead)
'a'put module tag+>mtag.
   $ each source has a BASE, which is xxxhead or has type crequire.
   $ put TTAG ptr to module*[BASE] only if it is empty
'f'get module tag+mtag>.
   $ retrieve module tag (TTAG pointer) of this BASE, can be empty

$ source file and line number for messages
'f'find linenum+>n+line>+str>.
   $ find LEXT source name and local line number for messages

$ base hierarchy
'a'set source from lineno+>n.
   $ set current BASE from the given linenum.
'f'get source base+base>.
   $ return the current BASE (xxxhead or type crequire)
'f'get base name+>base+ttag>.
   $ ttag=0 if base has no name yet.
'f'get base from lineno+>n+base>.
   $ return the base which contains the given line number
'f'find rank above+>appl+>def+rank>.
   $ rank of def above appl (both are bases)

'f'get first source+ptr>.
   $ return the LEXT name for the first source for creating .ice filename
'q'next input entry+>ptr>+nmin>+nmax>+str>.
   $ returns the next source string and the next line number for .ice header

$ BODY ******************************************************** $

'pragmat'if=compile.

$ include="file" is processed as many times as encountered;
$ require="file" is processed only once for each "file"
$ max input files: maximal number of input entries processed
$   is to prevent infinite loops, when A includes B and B includes A
$
$ modules (required sources) form a directed graph: each source has a
$   BASE which is either the source to be compiled, or the "required"
$   module which contains or "includes" it. The current base determines
$   the implicit qualifier

'pragmat'require=("config","lexical","display","pragmats","pass1","symbols").

'table'MESSAGE=(
 "maximum number of sources (%d) exceeded":input size exceeded,
 "missing argument for a cmdline option"  :missing argument for pragmat,
 "no input is specified, use --help for a short help"  : no input file,
 "error opening file ""%p"""              :error opening source
).

$ sources 
'stack'[1](type,rank,parent,module=flag,nmin,nmax,string)INPUT[]=(
  (csource ->type,srchead->parent,0->module->rank,-1->nmin->nmax,0->string):srchead,
  (clibrary->type,libhead->parent,0->module->rank,-1->nmin->nmax,0->string):libhead,
  (cstdlib ->type,stdhead->parent,0->module->rank,-1->nmin->nmax,0->string):stdhead
).
'variable'input size=3. $ starting number of blocks in INPUT
$ type:      source type, see below
$ rank:      linked list of positive ranks from Abase (application) to Dbase (definition)
$ parent:    link to the base of the invoking source, can be a head
$ flag:      flags for include source
$ module:    TTAG pointer to module=<tag> for required (and library) modules
$ nmin,nmax: line numbers, -1 if not processed yet
$ string:    LEXT link of the file

'constant'                  $ source type
  csource      = 0x01,      $ head, cmd line source,
  clibrary     = 0x02,      $ head, -y "library"
  cstdlib      = 0x03,      $ head, standard lirary
  cpragmat     = 0x04,      $ cmd line pragmat, parent: srchead
  cprarg       = 0x05,      $ cmdline pragmat argument, parent: 0
  crequire     = 0x06,      $ added as "require", no flags, parent: parent base
  cinclude     = 0x07,      $ added as "include" plus flags, parent: current base
  caddlib      = 0x08,      $ added as "library"
  cmissing     = 0x09.      $ file is missing, or required+library
'constant'                  $ flag values for cinclude only
  cproto mask  = 0x03,      $ prototype   0/1/2
  ccomp mask   = 0x04,      $ in compile  0/1
  cpath mask   = 0x08,      $ don't use path 0/1
  ccmd flag    = ccomp mask|cpath mask. $ command line argument flag

'stack'[1](next,base,rank)RANK[].
$ The directed graph among all bases is defined as follows:
$  B -> D if there is a require="D" pragmat in base B. 
$  The rank is the length of the shortest directed path from B to D
$  (zero if B=D). For each D the positive ranks to D  are held in a linked
$  list with head in rank*INPUT[D]; if non-empty then type*INPUT[D]=crequire

$ ------------------------------------------------------------- $
'a'add input entry+>type+>parent+>string:
   input size>max input files;
   input size=max input files,incr+input size,Xerror+0+input size exceeded+max input files;
   incr+input size,(* type->type,parent->parent,string->string,
       0->rank->module,-1->nmin->nmax *)INPUT.

'q'is input type+>src+>type:
    type*INPUT[src]=type.

'f'find source from lineno+>n+src>:
    $ return the source which includes the given line number
    n<0,srchead->src; $ e.g., Xstring table pointer
    <<INPUT->src,(nxt:src>>>INPUT,internal error+_rule_;
    (nmin*INPUT[src]<=n,n<=nmax*INPUT[src]);
    next+INPUT+src,:nxt).

'f'find linenum+>from+n>+string>-src:
   $ for messages and dictionary items find source and line number
   (from>0;get linenum+from),find source from lineno+from+src,
    (src>>>INPUT,0->n,Squote image->string;
     subtr+from+nmin*INPUT[src]+n,incr+n,string*INPUT[src]->string).

$ ------------------------------------------------------------- $
$ data used in .ice files
'f'get first source+str>-ptr:
   $ return the first source string for creating .ice file name
   <<INPUT->ptr,(nxt:ptr>>>INPUT,Squote image->str;
      is input type+ptr+cinclude,string*INPUT[ptr]->str;
      next+INPUT+ptr,:nxt).
'f'first line offset+n>-ptr:
   $ return the first src offset to adjust line numbers
   <<INPUT->ptr,(nxt:ptr>>>INPUT,1->n;
      is input type+ptr+cinclude,nmin*INPUT[ptr]->n;
      next+INPUT+ptr,:nxt).
'q'next input entry+>ptr>+nmin>+nmax>+str>:
   $ go over INPUT sources in increasing line number order
   (is+ptr;<<INPUT->ptr),(nxt:ptr>>>INPUT,-;
    nmin*INPUT[ptr]<0,next+INPUT+ptr,:nxt; $ head and duplicate
    is input type+ptr+cpragmat,next+INPUT+ptr,:nxt;
    is input type+ptr+cprarg,next+INPUT+ptr,:nxt;
    nmin*INPUT[ptr]->nmin,nmax*INPUT[ptr]->nmax,
        string*INPUT[ptr]->str,next+INPUT+ptr).

$ ------------------------------------------------------------- $
'variable'
   this source=0, $ the source in INPUT under execution
   this base=0,   $ base of this source: a head or a crequire
   this head=0.   $ head, one of src,lib,std

'q'is input flag+>flag:
    is input type+this source+cinclude,
    bool and+flag+flag*INPUT[this source]+flag,is+flag.
'f'get input base+>src+base>: $ get the base of this source
    is input type+src+cinclude,parent*INPUT[src]->base;
    is input type+src+cpragmat,parent*INPUT[src]->base;
    src->base. $ crequire, caddlib, head, pragmat arg
'f'get input head+>base+head>:
    $ the head of a base
    is input type+base+crequire,parent*INPUT[base]->base,:get input head;
    base->head.
'a'prepare this source:
    get input base+this source+this base,
    get input head+this base+this head.
'a'set source from lineno+>n:
    find source from lineno+n+this source,prepare this source.
'f'get base from lineno+>n+base>:
    find source from lineno+n+base,get input base+base+base.
'f'get base name+>base+mtag>:
    was+INPUT+base,module*INPUT[base]->mtag;
    internal error+_rule_.
$ ------------------------------------------------------------- $
'f'get source base+base>:
    $ return the base of this source; add to definition
    this base->base.
'f'get module tag+mtag>:
    $ get the module tag for this source; empty or TTAG
    module*INPUT[this base]->mtag.
'a'put module tag+>mtag:
    $ put the TTAG of this module if it was empty before
    module*INPUT[this base]=0,mtag->module*INPUT[this base];
    +.
$ ------------------------------------------------------------- $
'constant'lib rank=max input files+1.
$ given D (definition) base, find out the rank to B (appl) base
$   libraries are above non-libraries, stdlib is over everything
$ In the digraph there are no edges between the heads, this is
$   compensated in "find rank above". As heads have indegree zero,
$   only "crequire" entries are pointed into.

'a'add edge+>B+>D-D1-r1:
   $ B is a head or crequire, D is a crequire; B is below D.
   $ B contains a require="D" pragmat; adding the B-->D extra
   $   edge to the directed graph. Computing the new ranks.
   $ Go over all D1 above D, find the D--D1 rank; add one, and then
   $   go over all B1 below B. The new B1--D1 rank is
   $        rank(B1--B)+1+rank(D--D1)
   $   if this is smaller than the previous one, then replace it.
   B=D;
   <<INPUT->D1,(nxt:
      D1>>>INPUT;
      is input type+D1+crequire, $ if above D, then it is crequire
        find local rank+D+D1+r1,
        (r1<0;incr+r1,correct ranks from+B+D1+r1),next+INPUT+D1,:nxt;
      next+INPUT+D1,:nxt).
'f'find local rank+>B+>D+rank>-link:
   $ base B is below base D; rank(B--D)>0 is stored in rank*INPUT[D]
   D=B,0->rank;
   rank*INPUT[D]->link,(nxt:link=0,-1->rank;
      base*RANK[link]=B,rank*RANK[link]->rank;
      next*RANK[link]->link,:nxt).
'a'correct ranks from+>B+>D1+>r-ptr-r2:
   $ B is below D1 with rank r, those below B are in the RANK list
   $    starting at rank*INPUT[B}. 
   $ go over all B1 below B and correct the rank if necessary.
   correct rank+B+D1+r,rank*INPUT[B]->ptr,(nxt:ptr=0;
      add+r+rank*RANK[ptr]+r2,correct rank+base*RANK[ptr]+D1+r2,
      next*RANK[ptr]->ptr,:nxt).
'a'correct rank+>B1+>D1+>new-old: $ B1 is below D1
   find local rank+B1+D1+old,
      (old<0,add new rank+B1+D1+new;
       new<old,add new rank+B1+D1+new;+).
'a'add new rank+>B1+>D+>rank-ptr:
   $ B1 is below D with rank "rank"
   rank*INPUT[D]=0,(* 0->next,B1->base,rank->rank *)RANK, >>RANK->rank*INPUT[D];
   rank*INPUT[D]->ptr,(nxt:
      base*RANK[ptr]=B1,rank->rank*RANK[ptr]; $ found
      next*RANK[ptr]=0, $not there, add a new record
        (* 0->next,B1->base,rank->rank *)RANK,>>RANK->next*RANK[ptr];
      next*RANK[ptr]->ptr,:nxt).

'f'find rank above+>B+>D+rank>-headB-diff:
   $ find the rank from B to D. Edges between heads are not stored,
   $   if D is above a head which is above the head of B, then D is
   $   above B with an additional "lib rank"
   (find local rank+B+D+rank,rank>=0); $ simple case, above
   lib rank->diff,get input head+B+headB,next+INPUT+headB,
     (nxt: (find local rank+headB+D+rank,rank>=0),add+rank+diff+rank;
           headB>=stdhead; $ not above, return -1
           add+lib rank+diff+diff,next+INPUT+headB,:nxt).
$ ------------------------------------------------------------- $
$ adding a require="file", -M file
$   this base: either xxxhead or "crequire"
'a'add required source+>string-ptr:
    $ check if this is a duplicate; add an edge from "this base"
    <<INPUT->ptr,
    (nxt:ptr>>>INPUT, $ not found
              add input entry+crequire+this base+string,
              add edge+this base+>>INPUT;
       (-eq:is input type+ptr+crequire,
           compare string+LEXT+string+LEXT+string*INPUT[ptr]+eq,eq=0),
              forget string+string, $ found
              add edge+this base+ptr;
        next+INPUT+ptr,:nxt).
$ add include="file". this source can be cpragmat,cinclude,crequire
'a'add included source+>string-flag:  $ exported
    $ this base is the base of this source, which is crequire or xxxhead
    add input entry+cinclude+this base+string,
    get pragmat value+pgt proto+flag, $ 0 / 1 / 2
    (is pragmat value+pgt compile,add+flag+ccomp mask+flag;+),
    flag->flag*INPUT.
$ adding a library="file", -y file
'a'add library source+>string-ptr:
    $ check if this is a duplicate
    <<INPUT->ptr,
    (nxt:ptr>>>INPUT, $not found
               add input entry+caddlib+libhead+string;
         (-eq:is input type+ptr+caddlib,
            compare string+LEXT+string+LEXT+string*INPUT[ptr]+eq,eq=0),
               forget string+string; $ found
         next+INPUT+ptr,:nxt).
$ caddlib entries => crequire; check if not added before. Add edges
'a'prepare user libraries-ptr:
    libhead->this source, prepare this source, $=this head=this base
    <<INPUT->ptr,(nxt:
    ptr>>>INPUT;
    (is input type+ptr+caddlib,move library source+ptr;+),
      next+INPUT+ptr,:nxt).
$ check if it has been required before; change the type; add the edge
'a'move library source+>ptr-req-string:
     string*INPUT[ptr]->string,<<INPUT->req,(nxt:
     req>>>INPUT, $ not found
             crequire->type*INPUT[ptr],add edge+this base+ptr;
     (-eq:is input type+req+crequire,
        compare string+LEXT+string+LEXT+string*INPUT[req]+eq,eq=0),
             cmissing->type*INPUT[ptr],add edge+this base+req;
     next+INPUT+req,:nxt).
'a'prepare standard library+>string:
   $ standard library source; use stdhead as parent
   stdhead->this source, prepare this source, $=this head=this base
   add required source+string.
$ --------------------------------------------------------------- 
'a'set src pragmats+>type-flag-x:
   $ pragmats for source; set just before reading the first symbol from source
   type=crequire,
       set pragmat value+pgt compile+0,set pragmat value+pgt proto+1;
   $ type=cinclude: set compile and proto as stored
   flag*INPUT[this source]->flag,
        bool and+flag+cproto mask+x,set pragmat value+pgt proto+x,
        bool and+flag+ccomp mask+x,set pragmat value+pgt compile+x.

$ **********************************************************************
$ Command line arguments
'q'is cmdline pragmat+>string+twoarg>+pid>+value>-eq:
  $ check if LEXT[ptr] is a pragmat
  $ twoarg: it has a second argument
  $ pid:    -1 if starting with --; otherwise pgt XXXX
  $ value:  value of pragmat to set pgt XXXX
  (compare string+LEXT+string+"-d"+eq,eq=0), $ dictionary=on
     pgt dict->pid,0->twoarg,1->value;
  (compare string+LEXT+string+"-l"+eq,eq=0), $ list=on
     pgt text->pid,0->twoarg,1->value;
  (compare string+LEXT+string+"-W"+eq,eq=0), $ warning level=3
     pgt warning level->pid,0->twoarg,soft warning level->value;
  (compare string+LEXT+string+"-Wall"+eq,eq=0), $warning level=0
     pgt warning level->pid,0->twoarg,0->value;
  (compare string+LEXT+string+"-D"+eq,eq=0), $ define=
     pgt define->pid,1->twoarg,0->value;
  (compare string+LEXT+string+"-m"+eq,eq=0), $ require=
     pgt require->pid,1->twoarg,0->value;
  (compare string+LEXT+string+"-y"+eq,eq=0), $ library=
     pgt addlib->pid,1->twoarg,0->value;
  (compare string+LEXT+string+"-o"+eq,eq=0), $ ice=
     pgt ice->pid,1->twoarg,0->value;
  (compare string+LEXT+string+"-I"+eq,eq=0), $ path=
     pgt path->pid,1->twoarg,0->value;
  (compare string+LEXT+string+"-L"+eq,eq=0), $ library path=
     pgt libpath->pid,1->twoarg,0->value;
  (string elem+LEXT+string+0+eq,eq=/-/,string elem+LEXT+string+1+eq,eq=/-/), $ --
     -1->pid,0->twoarg,0->value.

'a'add command line arg+>string+>twoarg>:
   $ fill the INPUT stack with command line parameters
   is+twoarg,0->twoarg,add input entry+cprarg+0+string;
   is cmdline pragmat+string+twoarg+#+#,
        add input entry+cpragmat+srchead+string;
   add input entry+cinclude+this base+string,ccmd flag->flag*INPUT.

'a'init program args-ptr-twoarg:
   $ copy strings from STDARG to the INPUT list
   >>STDARG->ptr,0->twoarg,
     (nxt:ptr<<<STDARG,(twoarg=0; Xerror+0+missing argument for pragmat);
          copy string+STDARG+ptr+LEXT,add command line arg+>>LEXT+twoarg,
            previous string+STDARG+ptr,:nxt).

'p'is help argument+>ptr-eq:    $ --help
   compare string+LEXT+string*INPUT[ptr]+"--help"+eq,eq=0,
      Xmessage+help message+path separator+path separator+soft warning level.

'p'is version argument+>ptr-eq: $ --version
   compare string+LEXT+string*INPUT[ptr]+"--version"+eq,eq=0,
      Xmessage+version message+version major+version minor.

'a'read command line arguments:
   $ check command line arguments
   $ if --help or --version is given, errno is set; no more processing
   $ otherwise store them in INPUT and check for at least one source
   srchead->this source,prepare this source,
   init program args, $ copy command line arguments to INPUT
   (-cnt-ptr:was error;        $ missing pragmat argument
    0->cnt,<<INPUT->ptr,(nxt:
       ptr> >>INPUT;
       is input type+ptr+cinclude,incr+cnt,next+INPUT+ptr,:nxt;
       is input type+ptr+cpragmat,
          (is help argument+ptr,incr+cnt; $ done
           is version argument+ptr,incr+cnt; $done
           next+INPUT+ptr,:nxt);
       next+INPUT+ptr,:nxt),
    (cnt>0;Xerror+0+no input file)).

$ --------------------------------------------------------------- 
$ handle INPUT entries
$  cpragmat  cmdline pragmat, might have argument
$       leave out -L <file> arguments first
$  crequire  require="...", can be added from command line
$  cinclude  include="...", save/set prototype,library and namesapce
$  caddlib   library="...", skip at the first two rounds
$ field nmin indicates if an entry has been processed.

'a'startline:
   $ set the first and last line number of the source, indicating that processed
   get linenum+nmin*INPUT[this source],max int->nmax*INPUT[this source].
'a'endline:
   get linenum+nmax*INPUT[this source].

'p'do pragmat-twoarg-pid-value:
   is input type+this source+cpragmat, $ this is a pragmat
   nmin*INPUT[this source]<0,          $ has not been processed before
   is cmdline pragmat+string*INPUT[this source]+twoarg+pid+value,
   advance linenum,startline,prepare this source,
   (pid<0, $ execute pragmat at the argument starting with --, first round
       (open source+0+string*INPUT[this source],next symbol,
              cmdline pragmat,close source;+),endline;
    is+twoarg, $ pragmat has a second argument
       endline,next+INPUT+this source,startline,
       set pragmat value+pid+string*INPUT[this source],endline;
    set pragmat value+pid+value,endline).

'p'do source+>type+>round-use path:
   $ create token stream to DISC
   is input type+this source+type,     $ this is as required
   nmin*INPUT[this source]<0,          $ not processed yet
   advance linenum,startline,prepare this source, set src pragmats+type,
   $ set use path: 1: none, 2: -I, 3: standard library
   (round=3,3->use path;is input flag+cpath mask,1->use path;2->use path),
   (open source+use path+string*INPUT[this source],switch source,
        next symbol,pass 1,close source;
    Xerror+0+error opening source+string*INPUT[this source],
        cmissing->type*INPUT[this source]),
   endline,reset pragmats.

'a'process sources+>round:
   <<INPUT->this source,reset pragmats,
   (nxt: this source> >>INPUT; $ done
         do source+crequire+round,next+INPUT+this source,:nxt;
         do source+cinclude+round,next+INPUT+this source,:nxt;
         do pragmat,next+INPUT+this source,:nxt;
         next+INPUT+this source,:nxt).

'variable'source warning=0, $ warning level after reading all sources
          std lib offset=0. $ offset of the standard library
'a'read sources:
   $ set standard warning level
   set pragmat value+pgt warning level+default warning level,
   process sources+1, get pragmat value+pgt warning level+source warning.

'a'read user libraries:
   $ set library warning level
   set pragmat value+pgt warning level+lib default warning level,
   prepare user libraries,       $ process libraries added by the user
   process sources+2.

'a' read standard library:
   >>INPUT->std lib offset,
   (is pragmat value+pgt stdlib, $ add standard library and process it
       set pragmat value+pgt warning level+lib default warning level,
       prepare standard library+stdlib file,process sources+3;
    +),
    set pragmat value+pgt warning level+source warning.

$ **********************************************************************
$ check if all required sources have a module=<TAG> pragmat somewhere
$   warn if two required files define the same module tag
$ 
'table'MESSAGE=(
 "file %p: missing module pragmat"            :missing module pragmat,
 "files %p and %p define the same module '%p'":same module,
 "module '%p' is also defined in file %p"     :module redefined
).

'a'module warning+>ptr+>mtag-n:
    this source=<<INPUT, $ module redefined, figure out line number
       first line offset+n,
       Xwarning+2+n+module redefined+mtag+string*INPUT[ptr];
    this source>=std lib offset; $ no warning for conflict in standard library
    Xwarning+2+0+same module+string*INPUT[this source]+string*INPUT[ptr]+mtag.

'a'check same module tag+>old-ptr:
    this source->ptr,next+INPUT+ptr,
    (nxt:ptr> >>INPUT;
         is input type+ptr+crequire,
           (old=module*INPUT[ptr],module warning+ptr+old;+),
               next+INPUT+ptr,:nxt;
         next+INPUT+ptr,:nxt).

'a'check source modules-mtag:
   $ set program title if none was given
   (is pragmat value+pgt title;
    set pragmat value+pgt title+def program title),
   <<INPUT->this source,
   $ if this is a module, does some other have the same name?
   (is pragmat value+pgt module,
           check same module tag+module*INPUT[srchead];
    +),
   (nxt:this source> >>INPUT;
        is input type+this source+crequire,
           prepare this source,get module tag+mtag,
           (is+mtag,check same module tag+mtag;
            Xerror+0+missing module pragmat+string*INPUT[this source]),
           next+INPUT+this source,:nxt;
        next+INPUT+this source,:nxt).

'root'+.

'pragmat'endif=compile.

'end'




