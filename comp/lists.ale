$ table and stack
'pragmat'module=lists,title="lists, v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
$ stack and table declaration
'a'static stack declaration,stack declaration+>ext,
   table declaration+>ext.

$ BODY ******************************************************** $
'pragmat'if=compile.
'pragmat'require=("display","lexical","tags","symbols","types","disc",
         "identifier","selector","pragmats","config").
$
$ Table and stack declaration
$  first pass: selectors go to DISC, handled in separate run
$
$ external and prototype:
$  => Dexternal, LADM, <string>, Dpoint.
$  => Dimport, LADM, <selectors>, Dpoint.
$  => Dproto/Dexport, <typer>, <qtag>, <selectors>, Dpoint,
$ table, stack and static stack declaration:
$  => Dlist, LADM, <etype>, <esize>,<selectors> Dpoint.
$ fill:
$  => Dfill,<typer>,<qtag>,<selectors>,Dcolon,<filler>*, Dpoint.
$
$ <selectors>::  <calibre>,<ssel>,(<ttag>,<offset>)+ .
$      standard selector is included, thus list length >= 1
$ <etype>:: 0 {none} | 1 {cons} | 2 {=cons=} | 3 {tag} | 4 {=tag=}.
$ <esize>:: <cons> | <qtag> .
$
$ <filler>::  <item>, <repeater>?, <initializer>* .
$ <item>::
$    <NUMBER> | <qtag> | <string> | Dopen,<block>*,Dclose | 
$          Dextension, <block2>*, Dextension
$ <repeater>::  Dstar, (<qtag> |  <const>).
$ <initializer>:: Dcolon, LADM.
$ <block>::  <NUMBER> | <qtag> .
$ <block2>::  (<NUMBER> | <qtag>) (Dto {Dstar|TTAG))*

$ Pointer constants: no list in the first pass, should be set later.
$    if the pointer constant has flag tused, it should go to the list
$ list fill not added to LADM; a fill in a list declaration
$   generates a separate Dfill section.
$ ======================================================== $
'variable'ltype=0,lqf=0,ltag=0,lcalibre=0,lssel=0.
   $ the list qualifier,tag,calibre and standard selector

'table'MESSAGE=(
"%p: selector lists calibre mismatch"  :different calibre,
"%p: selector list syntax error"       :wrong selector,
"%p: selector tag expected"            :selector tag expected,
"%p: list tag is missing"              :list tag missing,
"%p: syntax error in size estimator"   :wrong size estimator,

"%p %p: only one * in a filling block" :only one repeater,
"%p %p: in filling selector expected"  :filling selector expected,
"%p %p: filling block syntax"          :filling list expected,
"%p %p: syntax error in filling"       :error in filling,
"%p %p: repeat constant %d out of range (1..%d)":repeat constant out of range,
"%p %p: no repeat for a string"        :no string repeat,
"%p %p: repeat constant expected"      :repeat constant expected,
"%p %p: missing tag after :"           :missing tag initializer,

"external %p %p: missing string"       :no external string,
"mixing %p declaration and prototype"  :mixing proto,
$ warning $
"%p: size estimator %d is out of allowed range" :size estimator range

).

$ -------------------------------------------------------- $
$ read field list
'a'read field lists+calibre>+err>-cal:
    R+Sopen,0->err,read field list+calibre+err,
      (nxt:R+Sopen,read field list+cal+err,
          (is+err;cal=calibre;1->err,error+different calibre+ltype),:nxt;
       +);
    -1->calibre,0->err.
'a'read field list+calibre>+>err>-tag:
    1->calibre,(nxt:
      (is ttag+tag,enter temp selector+tag+0+calibre;R+Snoarg),
        (R+Scomma,incr+calibre,:nxt;
         R+Sequals,:nxt;
         R+Sclose;
         error+wrong selector+ltype,1->err);
      error+selector tag expected+ltype,1->err).
'a'find ssel:
    lcalibre<0,1->lssel,(enter temp selector+ltag+0+1;+); $ no field list
    find temp selector+ltag+0+lssel; $ selector found
    -1->lssel.                  $ no standard selector
'a'get list tag+err>:
    $ read selectors; set calibre, ssel, and (qf:tag) for the list
    reset temp selector stack,
    read field lists+lcalibre+err,
    (is+err;
     is qtag+lqf+ltag,find ssel;
     error+list tag missing+ltype,1->err).
$ -------------------------------------------------------- $
$ size estimator: [XXX] or [=XXX=]
'p'size estimator+etype>+eqf>+esize>:
   $ estimate:   []    [number] [=number=] [qtag] [=qtag=]
   $ etype:       0     1        2          3      4
   R+Ssub,(ltype=Itable,0->etype->eqf->esize,must+Sbus;
     (R+Sbox,1->etype;0->etype),
       (is number+#+esize,0->eqf,incr+etype,
          (=esize=
           [:0],warning+9+size estimator range+ltype+esize,1->esize;
           [max stack size:],warning+6+size estimator range+ltype+esize,
                 (etype=1,100->esize;max stack size->esize);
           [101:],(etype=1,warning+6+size estimator range+ltype+esize,100->esize;+);
           +);
        is qtag+eqf+esize,add+etype+3+etype;
        ahead+Sbus,0->esize->eqf->etype;
        error+wrong size estimator+ltype,0->etype->eqf->esize),
     Rskip+Sbox,must+Sbus).

$ -------------------------------------------------------- $
$ FILLING LIST PACK $
$ <pack>     ::= Sopen, <filler> (Scomma, <filler>)*, Sclose.
$ <filler>   ::= <item>, <repeater>?, <initializer>*.
$ <repeater> ::= Sasterisk,(<qtag>;<NUMBER>).
$ <initizer> ::= Scolon,<qtag>.
$ <item>     ::= <NUMBER>;<qtag>;<string>; <block>
$ <block>    ::= Sopen,(<block1>*;<block2>*),Sclose.
$ <block1>   ::= <NUMBER>; <qtag>; Sasterisk;
$ <block2>   ::= (<NUMBER;<qtag>) (Dto TTAG|Sasterisk)*
$ if an element in block1 is '*' then that element
$    is repeated until the block size is = calibre.

'p'is extended block:
   $ check if the filling block has extended syntax
   $   <value> ->
   init restore,(
    ((is number+#+#;is qtag+#+#),ahead+Sarrow),make restore;
    make restore,-).

'a'to selectors+>t>-sel:
   R+Sarrow,(nxt:D+Dto,
     (R+Sasterisk,(t=0,1->t,D+Dstar;error+only one repeater+ltype+ltag);
      is ttag+sel,Dttag+sel; $ the selector
      error+filling selector expected+ltype+ltag,skip all),
     (R+Sarrow,:nxt;+));
   error+filling selector expected+ltype+ltag,skip all.

'a'extended block-cnt-x-y-t:
   0->cnt->t,D+Dextension,(nxt:
    R+Scomma,:nxt;
    is number+x+#,D+x,to selectors+t,incr+cnt,:nxt;
    is qtag+x+y,Dqtag+x+y,to selectors+t,incr+cnt,:nxt;
    cnt=0,error+filling list expected+ltype+ltag,skip all;
    must+Sclose,D+Dextension).

'a'list fill block-x-y-t-cnt:
   $ no string inside a block
   is extended block,extended block;
   0->cnt->t,D+Dopen,(nxt:
    R+Scomma,:nxt;
    is number+x+#,D+x,incr+cnt,:nxt;
    is qtag+x+y,Dqtag+x+y,incr+cnt,:nxt;
    cnt=0,error+filling list expected+ltype+ltag,skip all;
    R+Sasterisk,(t=0,1->t,D+Dstar;error+only one repeater+ltype+ltag),:nxt;
    must+Sclose,D+Dclose).

'a'filler item+str>-x-y:
      is number+x+#,D+x,0->str;
      is qtag+x+y,Dqtag+x+y,0->str;
      is string+x,Dstring+x,1->str;
      R+Sopen,list fill block,0->str;
      error+error in filling+ltype+ltag,skip all,0->str.

'a'repeat count+>str-n-qf-tag:
   $ repeat count; should be between 1 and max repeat size
   $ if it is a tag, indicate that it should be defined
   $   (type is checked at the next pass)
   R+Sasterisk,(str=0;error+no string repeat+ltype+ltag),
     (is number+#+n,
         (=n=[1:max repeat size],+;
          error+repeat constant out of range+ltype+ltag+n+max repeat size,1->n),
         (n=1; D+Dstar,Dcons+n);
      is qtag+qf+tag,D+Dstar,Dqtag+qf+tag;
      error+repeat constant expected+ltype+ltag);
   +.

'a'initializer-qf-tag-dl-res:
   $ process pointer definitions; type=Ipointer constant
   R+Scolon,
     (is qtag+qf+tag,get linenum+dl,
        create tag definition+qf+tag+Ipointer constant+dl+res,
        set tag flag+res+tdefined,check tag definition+res,
        D+Dcolon,Dtag+res,:initializer;
      error+missing tag initializer+ltype+ltag);
   +.       

'a'create list filler-err-str:
   $ stack or table filling list pack
   $ calibre*tag can be zero which means don't know
   $ accept an empty filling to indicate that this is not a
   $      public prototype.
   R+Sopen,(R+Sclose;
     (nxt:clear local error+err,filler item+str,repeat count+str,initializer,
        (R+Scomma,:nxt;
         R+Sclose;
         was local error+err,skip all;
         error+error in filling+ltype+ltag,skip all)));
   error+error in filling+ltype+ltag,skip all.

$ ================================================================ $

'a'list fill:
    D+Dfill,D+ltype,Dqtag+lqf+ltag,dump temp selectors+lcalibre+lssel,
    D+Dcolon,create list filler,D+Dpoint.

$ after 'external'<TYPER>  <fields> tag = "string"
'a'external declarer+>dl-err-res-str:
  get list tag+err, $ read selectors, 
  (is+err,skip all;
   must+Sequals,create tag definition+lqf+ltag+ltype+dl+res,
   create list extension+res+lcalibre+lssel,
   set tag flag+res+tdefined,set tag flag+res+texternal,
   check tag definition+res,
   (is string+str;0->str,error+no external string+ltype+ltag),
   D+Dexternal,Dtag+res,Dstring+str,D+Dpoint).

'a'list prototype+>dl-proto-res:
   get pragmat value+pgt proto+proto, $1: import, 2: public, 0_ none
   (proto=1,create tag definition+lqf+ltag+ltype+dl+res,
      create list extension+res+lcalibre+lssel,
      set tag flag+res+tdefined,set tag flag+res+timported,
      check tag definition+res,
      D+Dimport,Dtag+res,dump temp selectors+lcalibre+lssel,D+Dpoint;
    (proto=2,D+Dexport;D+Dproto),D+ltype,Dqtag+lqf+ltag,
                  dump temp selectors+lcalibre+lssel,D+Dpoint).

$ <TYPER><fields>tag=      fill
$ <TYPER><fields>tag       prototype
$     ext: 0/3 prototype, 0/4 fill
'a'prototype or fill+>dl+>ext>-err:
   get list tag+err,
   (is+err,skip all;
    R+Sequals,(ext=3,error+mixing proto+ltype,skip all;
               4->ext,list fill);
    ext=4,must+Sequals,list fill;
    3->ext,list prototype+dl).

$ 'stack'[](fields) tag with size estimato
$ 'table'[](fields) tag
'a'declarer+>dl+>etype+>eqf+>esize-err-res:
   get list tag+err, $ read selectors
   (is+err,skip all; $ error
    create tag definition+lqf+ltag+ltype+dl+res,
       create list extension+res+lcalibre+lssel,
       set tag flag+res+tdefined,check tag definition+res,
       D+Dlist,Dtag+res,Dcons+etype,
       (=etype= [0],+;[1;2],Dcons+esize;Dqtag+eqf+esize),
       dump temp selectors+lcalibre+lssel,
       D+Dpoint,
       (R+Sequals,list fill;+)).
    
$ 'x''stack'<fields>tag=    external declaration
$ 'stack'[]<fields>tag      declaration
$ 'stack'[]<fileds>tag=     declaration+fill
$ 'stack'<fields>tag        prototype
$ 'stack'<fileds>tag=       fill
$  ext=1: external;
$  0/2: declarer with size estimator
$  0/3: prototype  (no size estimator)
$  0/4: fill       (no size estimator)
'a'declaration+>ext>-l-etype-eqf-esize:
   get linenum+l,
     (ext=1,external declarer+l;
      size estimator+etype+eqf+esize,
        (ext>=3,error+mixing proto+ltype,skip all;
         2->ext,declarer+l+etype+eqf+esize);
      $ no size estimator
      ext=2,error+mixing proto+ltype,skip all;
      prototype or fill+l+ext).

$ ext changes reflecting thw type
'a'declaration series+>ext+>typer:
   typer->ltype,declaration+ext,
      (nxt:R+Scomma,declaration+ext,:nxt;
           R+Spoint;
           must+Spoint,skip to point).

$ 'external''table' or 'table'
'a'table declaration+>ext:
   declaration series+ext+Itable.
$ 'external''stack' or 'stack'
'a'stack declaration+>ext:
   declaration series+ext+Istack.
$ 'static''stack'
'a'static stack declaration:
   declaration series+0+Istatic stack.

'root'+.
'pragmat'endif=compile.

'end'




