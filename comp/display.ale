$ display routines for ALEPH $
'pragmat'module=display,title="display v2.1".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2.1)
$
$  (C) 2020-2024, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ******************************************************
$
$ Print source, errors, warnings and messages
$ They use variable length rules; the first affix is the format
$   string in table MESSAGE; the following affixes are arguments
$   %%  print %
$   %n  newline
$   %c  character
$   %d  integer
$   %p  pointer (ask other modules): MESSAGE, tag, symbol, constant, type, etc.
$   %q  qualifier, either 0 or TTAG ::
$   %l  source line number as  0034/file
$   %*  skip argument
$   %m  format string in MESSAGE
$ for error, warning, print source file and actual line number
$

'table'MESSAGE.
   $ error, warning, message
'q'was error.
'f'clear local error+old>.
'q'was local error+>old.
   $ check if there were errors between calls to clear local error and 
   $    was local error. Can be called nested
'a'suspend Errors+>n.
   $ give at most n Error messages; reset by n=0.
'a'error+@+>mess:Xerror+-1+@.
'a'Error+@+>mess.
'a'Xerror+>line+@+>mess.
   $ error with current/given line number
'a'warning+>level+@+>mess:Xwarning+level+-1+@.
'a'Xwarning+>level+>line+@+>mess.
   $ warning with current/given line number
'a'message+@+>mess.
'a'Xmessage+@+>mess.
   $ a message
'pragmat'macro=(error,warning).
'e'internal error+t[]+>rule.
   $ exit routine for internal error
'a'display char+>char+>show.
'a'reset pr line.
   $ print the next character of the source
'a'DICT header+>tag,DICT item+>line,DICT tail.
   $ dictionary printing
'f'find file base+>str+start>+end>.
   $ the base of a source string

$ BODY ********************************************************
'pragmat'if=compile.
'pragmat'require=("buffer","lexical","pragmats","types","tags","input").

$ ************************************************************* 
$ basic output $
'variable'
   prpos=0.		$ print position in the line, starting at 1

'charfile' PRINTFILE="<<stdout>>">.

'a'print char+>ch: 
   $ print a character to PRINTFILE
   incr+prpos, put char+PRINTFILE+ch.
'a'nlcr:
   $ start new line if not at the begining
   prpos<=1,1->prpos;
   0->prpos,print char+newline.
'a'tab line+>pos:
   $ go ahead until position "pos"
   prpos = pos;
   prpos > pos, nlcr, :tab line;
   print char+/ /, :tab line.

'a'print int+>n:
   $ print n in decimal; min int does not end with 9
   n=min int, print char+/-/,subtr+-1+n+n,print int1+n+/1/;
   n<0, print char+/-/,get abs+n+n,print int1+n+/0/;
   print int1+n+/0/.
'a'print int1+>n+>c-q-r:
   divrem+n+10+q+r,(q=0; print int1+q+/0/),
        add+r+c+r, print char+r.
'a'print form+>n: print form1+n+4.
   $ print n with four digits
'a'print form1+>n+>m -q-r:
   m=0;
   decr+m,divrem+n+10+q+r,print form1+q+m,add+r+/0/+r,print char+r.
'a'print+T[]+>p-n:
   $ print a string
   was+T+p,put string+PRINTFILE+T+p, 
     string length+T+p+n, add+prpos+n+prpos;
   +.
$ ************************************************************* 
$ source printing $
'constant'
   count col=1,		$ line number column
   prog col=9.		$ program listing starts here
'variable'
   old prpos=1,		$ saved print position
   prpos ok=1,		$ no need to start new line
   pr line=0.		$ program line number

'a'reset pr line:
   $ called when input source changes; restart line numbers
   0->pr line, nlcr.
'a'save prpos:
   $ save old print position when messages and source are intermixed
   is+prpos ok,0->prpos ok,prpos->old prpos;
   +.
'a'print line head+>show:
   $ start each line with a line number
   is+show, nlcr, tab line+count col, print form+pr line,
     tab line+prog col;
  +.
'a'display char+>char+>show:
   $ next character in source; print only when "show" is true
   char=newline,incr+pr line, 1->prpos ok, print line head+show;
   is+show, $ should be printed
    (is+prpos ok; 1->prpos ok,tab line+old prpos),print char+char;
   +.
$ ************************************************************* 
$ formated printing $

'q'has ale extension+>str+>n>-c:
   $ does the string ends with .ale
   decr+n,string elem+LEXT+str+n+c,c=/e/,
   decr+n,string elem+LEXT+str+n+c,c=/l/,
   decr+n,string elem+LEXT+str+n+c,c=/a/,
   decr+n,string elem+LEXT+str+n+c,c=/./.
'f'find file base+>str+start>+end>-c:
   $ go back unitl / \ :
   string length+LEXT+str+end,end->start,decr+start,
     (nxt:string elem+LEXT+str+start+c,(c=///;c=/\/;c=/:/;decr+start,:nxt);+),
     incr+start,(has ale extension+str+end;+).
'a'print base+>str-start-end-c:
   str=0;
   find file base+str+start+end,(nxt:start>=end;
     string elem+LEXT+str+start+c,incr+start,print char+c,:nxt;+).
'a'print source line+>n-str:
   $ print source file and line number
   n=-2,print char+/-/; $ permanent ID
   n=0,print char+/-/; $ for n=0 just print -
   $ n<0 means the most recent line number 
   find linenum+n+n+str,
      (n<=0,print char+/-/;
       print form+n,print char+///,print base+str).
'a'print pointer+>ptr:
   $ print out some pointer
   ptr=0, print+"[NULL]";
   was+MESSAGE+ptr,print+MESSAGE+ptr;
   was+BUFFER+ptr,print+BUFFER+ptr;
   (was lexical pointer+ptr;
    was tag pointer+ptr;
    was type pointer+ptr),
      print+BUFFER+>>BUFFER,unstack string+BUFFER;
   print +"[?", print int+ptr, print+"]".
'a'pop BUFFER+x>: BUFFER->x,unstack+BUFFER.
'a'format print+@+>fmt-optr-ptr-level:
   $ formatted print; first argument is the format in MESSAGE[]
   0->level,(again:
   >>BUFFER->optr, unpack string+MESSAGE+fmt+BUFFER, optr->ptr, incr+ptr,
   (nxt: >>BUFFER < ptr,
          (level=0;
           decr+level,unstack to+BUFFER+optr,
             pop BUFFER+optr,pop BUFFER+ptr,:nxt);
        BUFFER[ptr]!=/%/, print char+BUFFER[ptr], incr+ptr, :nxt;
        incr+ptr, (>>BUFFER<ptr, print char+/%/;
                   (=BUFFER[ptr]=
                    [/d/], (shift affix block+@,print int+fmt; print +"[d?]"),incr+ptr,:nxt;
                    [/c/], (shift affix block+@,
                               (fmt=newline,print+"<newline>";print char+fmt);
                            print+"[c?]"),incr+ptr,:nxt;
                    [/l/], (shift affix block+@,print source line+fmt; print+"[l?]"),incr+ptr,:nxt;
                    [/p/], (shift affix block+@,print pointer+fmt; print+"[p?]"),incr+ptr,:nxt;
                    [/q/], (shift affix block+@,(fmt=0;print pointer+fmt,print+"::");print+"[q?]"),incr+ptr,:nxt;
                    [/m/], (shift affix block+@,incr+ptr,extend BUFFER+ptr,
                                extend BUFFER+optr,incr+level,:again;
                            print+"[m?]",incr+ptr,:nxt);
                    [/n/], print char+newline,incr+ptr,:nxt;
                    [/*/], (shift affix block+@; +),incr+ptr,:nxt;
                    print char+BUFFER[ptr],incr+ptr,:nxt)))),
   (shift affix block+@,print+"[...]";+),
   unstack to+BUFFER+optr.

$ ************************************************************* 
$ dictionary printing $
$ <TAG> BASE:1234*
$          BASE:  1111  1111  1111  1111
$                 ^--- dict list col
$          ^---- dict mod col
$        ^---- dict def col
'variable'last dict src=0,right hand margin=120.
'cons'dict mod col=10,dict list col=19,dict def col=10.

'a'DICT tab-r:
  prpos>right hand margin,tab line+dict list col;
  print char+/ /,divrem+prpos+6+#+r,(r=1;:DICT tab).

'a'DICT deflines+>tag-ptr-n-src:
  adm*TTAG[tag]->ptr,(nxt:ptr=0;
     (is tag flag+ptr+tdefined,get defline+ptr+n,find linenum+n+n+src,
         print base+src,print char+/:/,print form+n,print char+/*/,
         print char+/ /;
      +),
     get next tag+ptr+ptr,:nxt).

'a'DICT header+>tag:
  nlcr,0->last dict src,get pragmat value+pgt margin+right hand margin,
  (right hand margin>39;40->right hand margin),
  print pointer+tag,print char+/ /, (prpos>=dict def col;tab line+dict def col),
  DICT deflines+tag,(prpos>dict def col,tab line+dict def col;+).

'a'DICT item+>line-src-l:
  find linenum+line+l+src,
    (src=last dict src,DICT tab;
     src->last dict src,tab line+dict mod col,print base+last dict src,
      print char+/:/,print char+/ /,(prpos>=dict list col;tab line+dict list col)),
    print form+l.
'a'DICT tail:
  nlcr.

$ ************************************************************* 
$ messages, errors, warnings $
'table'[]MESSAGE=(
  "too many errors, further messages are suppressed": too many errors,
  "internal error in rule %p%n"
  "   ***** Please report the offending program and the error. *****%n"
                            :internal error msg
).

'variable'
   error no=0,		$ number of error messages
   suspend no=0.	$ suspend error after that many messages
'constant'maximal errors=51.

'q'was error: error no>0.
   $ yes if there was an error
'f'clear local error+old>:
   error no->old.
   $ count errors local to this compound block
'q'was local error+>old:
   error no > old.
   $ discount error numbers; the same error might occur several times
'a'suspend Errors+>n:
   n->suspend no,(suspend no=0;incr+suspend no).

$ message layout:
$ W4  1234    message text
$             ^-- mess col
$     ^---- line col
$ ^-- type: I - message, W4 - warning at level 4, E - error
$ line: source line number; 
$       -1: the actual line,
$        0: no line number
$       >0: line number to be given

'constant'
   line col=4,		$ line numbers starts here
   mess col=22.		$ message starts here

'a'message header+>line+>level:
   $ line: -1 - most recent; 0 - none
   save prpos, nlcr,        $ start in new line
   (level<0,print char+/I/; $ message
    level<10,print char+/W/,$ warning
        add+level+/0/+level,print char+level;
    print char+/E/),        $ error
   (line=0;                 $ no line information
    tab line+line col,print source line+line,print char+/ /),
   tab line+mess col.

$'a'error+@+>mess:
$   Xerror+-1+@.
'a'Xerror+>line+@+>mess:
   incr+error no, $ incr+local error no,
   (error no>maximal errors;
    error no=maximal errors,
       message header+line+10,format print+too many errors,nlcr;
    message header+line+10,format print+@,nlcr).
'a'Error+@+>mess:
$ error message which can be suspended
    suspend no=1,incr+error no,
       (error no=maximal errors,
           message header+-1+10,format print+too many errors,nlcr;+);
    (suspend no=0;decr+suspend no),Xerror+-1+@.
   
$'a'warning+>level+@+>mess:
$   Xwarning+level+-1+@.
'a'Xwarning+>level+>line+@+>mess:
   error no>maximal errors;
   (-n:get pragmat value+pgt warning level+n,level<n);
   message header+line+level,format print+@,nlcr.
'a'message+@+>mess:
   error no>maximal errors;
   message header+-1+-1,format print+@,nlcr.
'a'Xmessage+@+>mess:
   incr+error no, nlcr,format print+@,nlcr.
'e'internal error+t[]+>rule:
   message header+0+10,copy string+t+rule+BUFFER,
     format print+internal error msg+>>BUFFER,exit+15.

'root'+.
'pragmat'endif=compile.
'end'
