$ program
'pragmat'module="passii".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH)
$
$  (C) 2020, L.Csirmaz, Hungary
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU Generatl Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ******************************************************* $
$ read from DISC and generate all definitions.
$   give error for tags used but not defined
$
'a'pass II,pass III.

$ BODY ********************************************************* $
'pragmat'if=compile.
'pragmat'require=("display","disc","drules","tags","ice",
          "types","pragmats","node").

'table'MESSAGE=(
  "%p: not defined":tag not defined,
  "%p %p: cannot be public (%l)"  : cannot be public,
  "%p %p: cannot be a macro (%l)" : cannot be a macro,
  "external rule ":extrule,
  "imported rule ":imprule,
  "pragmat macro=%p: ignored":macro ignored
).

'a'pass II-rtag:
   Q+Drule,must Qtag+rtag,d store macro+rtag,d check rule+rtag,:pass II;
   Q+Droot,must Qtag+rtag,d check rule+rtag,:pass II; $ rtag=Xroot $
   Q+Dpragmat,d read pragmat,:pass II;
   Q+Dexpression,d expression,:pass II;
   Q+Dfile,d file data,:pass II;
   Q+Dfill,d list filling,:pass II;
   Q+Dlist,d list size,:pass II;
   Q+Dend;  $ last symbol
   internal error+_rule_+_line_.

'a'pass III-rtag:
   Q+Drule,must Qtag+rtag,generate rule+rtag,:passIII;
   Q+Droot,must Qtag+rtag,generate rule+rtag,:passIII;
   Q+Dpragmat,mustQcons+#,(Qcons+#;mustQtag+#),:passIII;
   Q+Dexpression,Qskip+Dpoint,:passIII;
   Q+Dfile,Qskip+Dpoint,:passIII;
   Q+Dfill,Qskip+Dpoint,:passIII;
   Q+Dlist,Qskip+Dpoint,:passIII;
   Q+Dend;
   internal error+_rule_+_line_.

$ ===================================================== $
$ macro rule
'a'd store macro+>tag-dpos-dnum:
  was error;
  is tag flag+tag+rmacro,save disc position+dpos+dnum,
    link macro rule+tag+dpos+dnum;
  +.
$ ===================================================== $
$ pragmat
$  pgt macro <tag> | pgt public <tag> | 
$  pgt warning level <cons>
'a'check tag for public+>tag-type-dl:
   is tag flag+tag+tdefined,get defline+tag+dl,get type+tag+type,
     (is tag flag+tag+texternal,error+cannot be public+type+tag+dl;
      is tag flag+tag+timported,error+cannot be public+type+tag+dl;
      +);
   is tag flag+tag+tpublic,error+tag not defined+tag;
   +. $ if it had a prototype, we gave an error message

'a'check tag for macro+>tag-type-dl:
   is tag flag+tag+tdefined,get defline+tag+dl,get type+tag+type,
     (type!=Irule,clear tag flag+tag+rmacro,
            warning+3+cannot be a macro+type+tag+dl;
      is tag flag+tag+texternal,clear tag flag+tag+rmacro,
            warning+3+cannot be a macro+extrule+tag+dl;
      is tag flag+tag+timported,clear tag flag+tag+rmacro,
            warning+3+cannot be a macro+imprule+tag+dl;
      +);
    warning+3+macro ignored+tag.

'a'd read pragmat-pgt-x:
   must Qcons+pgt,
     (pgt=pgt warning level,must Qcons+x,set pragmat value+pgt+x;
      pgt=pgt macro,must Qtag+x,check tag for macro+x;
      pgt=pgt public,must Qtag+x,check tag for public+x;
      internal error+_rule_+_line_).

'root'+.
'pragmat'endif=compile.

'end'
