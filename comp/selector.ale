$ list selectors
'pragmat'module=selector,title="selector v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ******************************************************* $
$ Selectors are stored temporarily in the TMPSEL stack
$ Permanent selectors are moved to special blocks in LADM

'q'find temp selector+>sel+>list+offs>.
   $ sel: TTAG, list: LLOC, return the offset
   $   standard selector is stored, no need to handle it separately
'p'enter temp selector+>sel+>list+>offs.
   $ fail if the same selector is there with different offset
'a'reset temp selector stack.
   $ clean up temp selector storage
'a'dump temp selectors+>calibre+>ssel.
   $ write the selector list to DISC

$ get / set list data for a LADM tag
'f'get calibre+>tag+calibre>,get ssel+>tag+ssel>.
$'a'put calibre+>tag+>calibre,put ssel+>tag+>ssel.

'q'find list selector+>tag+>sel+offs>.
   $ get the selector offset for a LADM list, fail if not found
'a'create list extension+>tag+>calibre+>ssel.
   $ create the head of the list extension for a LADM list
'a'add list selector+>tag+>sel+>offs+>dl.
   $ add a new selector, error message if offset is different

$ BODY ********************************************************* $
'pragmat'if=compile.
'pragmat'require=("display","tags","disc").

$ temporary selectors. Used for formal affixes and in first pass
'stack'[1](list,sel,offset) TMPSEL [].

'a'reset temp selector stack:
   scratch+TMPSEL.

'q'find temp selector+>sel+>list+offs>-ptr:
   >>TMPSEL->ptr,(nxt:
      ptr<<<TMPSEL,-; $ not found
      sel*TMPSEL[ptr]!=sel,previous+TMPSEL+ptr,:nxt;
      list*TMPSEL[ptr]!=list,previous+TMPSEL+ptr,:nxt;
      offset*TMPSEL[ptr]->offs).
'p'enter temp selector+>sel+>list+>offs-old:
   find temp selector+sel+list+old,old=offs; $ it is there, fail if old!=offs
   (* list->list,sel->sel,offs->offset *)TMPSEL.

'a'dump temp selectors+>calibre+>ssel-ptr:
   $ write selector list to DISC
   Dcons+calibre,Dcons+ssel,<<TMPSEL->ptr,
   (nxt:ptr>>>TMPSEL;
        Dttag+sel*TMPSEL[ptr],Dcons+offset*TMPSEL[ptr],
          next+TMPSEL+ptr,:nxt).
$ -------------------------------------------------------------- $
$ permanent selectors. Store selectors for global lists in LADM
$ list extension, first entry:
$ (#,#,#,#,calibre,ssel,ttag,link)
$    calibre:  list calibre, -1 if no field list
$    ssel:     standard selector
$    ttag:     0
$    link:     link to selectors
$ selector description:
$ (#,#,#,#,defln,offset,ttag,link)
$    defln:    definition line (if doubly defined)
$    offset:   offset, starting from 1, left to right
$    ttag:     TTAG pointer to the selector
$    link:     next selector

'stack'(#,#,#,#,calibre,ssel,ttag,link)
       (#,#,#,#,defln,offset,ttag,link) LADM=().

'f'get selector next+>s+ptr>:  link*LADM[s]->ptr.
'f'get selector offs+>s+offs>: offset*LADM[s]->offs.
$ list extension for LADM list tags
'f'get calibre+>tag+x>: calibre*LADM[adm*LADM[tag]]->x.
'f'get ssel+>tag+x>:    ssel*LADM[adm*LADM[tag]]->x.
$'a'put calibre+>tag+>x: x->calibre*LADM[adm*LADM[tag]].
$'a'put ssel+>tag+>x:    x->ssel*LADM[adm*LADM[tag]].

'a'create selector block+>ttag+>offs+>dl+ptr>:
    (* dl->defln,0->link,ttag->ttag,offs->offset *) LADM,
    >>LADM->ptr.
'q'find perm selector+>sel+>ptr+res>:
   $ find a selector in the permanent storage
   ptr=0,-; $ not there
   ttag*LADM[ptr]=sel,ptr->res; $ found
   get selector next+ptr+ptr,:find perm selector.

'a'create list extension+>tag+>calibre+>ssel-ptr:
   $ create the list extension head for a list LADM entry
    create selector block+0+ssel+calibre+ptr,put adm+tag+ptr.

'q'find list selector+>tag+>sel+offs>-ptr: $ fail if not found
    get adm+tag+ptr,find perm selector+sel+ptr+ptr, $found
            get selector offs+ptr+offs.

'table'MESSAGE=(
"%p %p: selector %p redefined differently (%l)":selector redefined
).

'a'add list selector+>tag+>sel+>offs+>dl-ptr-res-type:
    get adm+tag+ptr,
      (find perm selector+sel+ptr+res, $ it is there
         (offset*LADM[res]=offs; $ same, do nothing
          get type+tag+type,
          error+selector redefined+type+tag+sel+defln*LADM[res]);
       create selector block+sel+offs+dl+res,
          link*LADM[ptr]->link*LADM[res],res->link*LADM[ptr]).
'root'+.

'pragmat'endif=compile.
'end'

