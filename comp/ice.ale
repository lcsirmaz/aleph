$ create the ice file
'pragmat'module=ice,title="ice, v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
$
$ creating the .ice character file
$ ************************************************************* $
'stack'NODE.

$ opening and closing
'a'open ice file,close ice file,delete ice file.
$ writing to ICE
'a'W+>x,Wcons+>x,Wtag+>x,Wtype+>x,Wstring+>x,Wfstr+>x.
'a'Wspace,Wline.
$   W+>symb      an entry to DSYMB, a NODE, or a NUMBER
$   Wcons+>n     constant
$   Wtag+>tag    repr*LADM[tag] 
$   Wtype+>type  INDICATOR
$   Wstring+str  string or a TTAG, written as a string
$   Wfstr+str    fill string
$   Wspace       a space
$   Wline        new line

$ BODY ******************************************************** $
'pragmat'if=compile.
'pragmat'require=("config","number","display","lexical","pragmats","disc",
    "input","tags","types","buffer","path","selector","symbols").

$ messages ---------------------------------------------------- $
'table'MESSAGE=(
  "cannot open ice file %p, error code: %d, aborting":opening ICE,
  "$ ICE file, produced by ALEPH compiler v":welcome ICE
).
$ stacks ------------------------------------------------------ $
$ no actual memory is needed, only the virtual space is used
'stack'[10]NODE.

$ ice file ==================================================== $
'charfile' ICE="aleph.ice">.
'a'open ice file-err:
   create ice name, $ creates file name on >>LEXT $
   (open file+ICE+/w/+LEXT+>>LEXT,forget string+>>LEXT,
        put string+ICE+MESSAGE+welcome ICE,
        print int+version major,put char+ICE+/./,
        print int+version minor,Wline;
    get file error+ICE+err,error+opening ICE+>>LEXT+err).
'a'close ice file:
   close file+ICE.
'a'delete ice file:
   close ice file,create ice name,
     unlink file+LEXT+>>LEXT,forget string+>>LEXT.

$ ------------------------------------------------------------- $
$ writing to the ICE file
'a'Wspace: put char+ICE+/ /.
'a'Wline: put char+ICE+newline.
'a'print int+>n:
  n=min int,put char+ICE+/-/,subtr+-1+n+n,print int1+n+/1/;
  n<0,put char+ICE+/-/,get abs+n+n,print int1+n+/0/;
  print int1+n+/0/.
'a'print int1+>n+>c-q-r:
  divrem+n+10+q+r,(q=0;print int1+q+/0/),
    add+r+c+r,put char+ICE+r.

'a'W+>x: =x=
   [DSYMB],put string+ICE+DSYMB+x,(x=Dpoint,put char+ICE+newline;+);
   [NODE], put char+ICE+/N/,subtr+x+<NODE+x,incr+x,print int+x,Wspace;
   [NUMBER],put char+ICE+/X/,Wnumber+x;
   internal error+_rule_.
'a'Wcons+>x:print int+x,Wspace.
'a'Wtag+>tag-repr:
   was+LADM+tag,get repr+tag+repr, $ can be zero but only if error $
     (is+repr,put char+ICE+/I/,print int+repr,Wspace;
      was error; internal error+_rule_);
   was+LLOC+tag,
     (ftype*LLOC[tag]=Ilocal,put char+ICE+/L/,print int+repr*LLOC[tag],Wspace;
      put char+ICE+/F/,subtr+tag+<<LLOC+repr,div+repr+<>LLOC+repr,
                              incr+repr,print int+repr,Wspace);
   internal error+_rule_. $ this should not happen $
'a'Wstring+>str: $ str is either LEXT string or TTAG block
   =str=
    [LEXT], put as string+ICE+LEXT+str;
    [TTAG], previous+TTAG+str,put as string+ICE+TTAG+str;
    internal error+_rule_.
'a'Wfstr+>str: $ str is LEXT, converted to a target string
    was+LEXT+str,put char+ICE+/T/,put as string+ICE+LEXT+str;
    internal error+_rule_.

'a'Wnumber+>x-optr-ptr:
    >>BUFFER->optr->ptr,get number repr+x,(nxt:
       ptr<>>BUFFER,incr+ptr,put char+ICE+BUFFER[ptr],:nxt;
       unstack to+BUFFER+optr,Wspace).

'a'Wtype+>type: $ type is a pointer in INDICATOR
   put char+ICE+/</,put string+ICE+INDICATOR+type,put char+ICE+/>/,Wspace.

'root'+.
'pragmat'endif=compile.

'end'


