$ create the ice file
'pragmat'module="ice".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH)
$
$  (C) 2020, L.Csirmaz, Hungary
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU Generatl Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER *********************************************** $
$
$ creating the .ice file which is a character file
$   W+>symb:     an entry to DSYMB or INDICATOR (type)
$   Wtag+>tag:   repr*LADM[tag] is a pointer to ITEM (can be zero)
$   Wcons+>n:    write the constant
$
$ The ICE file starts with <ICE header>, <ITEM list>,
$   followed by (LIST declaration|File declaration|Expression|Fill)*
$   in any order (Fill might come earlier than LIST declaration,
$      the same list can have several Fill)
$   followed by (RULE definition)*

$ ICE header:
$     Dtitle/Dmodule <title string> <lineno block> Dpoint
$   lineno block: ( <end lineno const> <source string> )*
$ for each source file the last number for messages

$ ITEM list:
$  ( <typer> <item> <flags> <defline> <type-specific> <raw> )*  Dpoint
$   <typer>   -- Iconstant, Ivariable, Istack, etc;
$   <item>    -- next entry in ITEM (growing by one)
$   <flags>   -- tag flags filtered by "iceflags"
$   <defline> -- define line (for messages)
$   <type-specific> -- for lists and rules, see below
$   <raw>     -- string, the raw tag or the specified 'x' string
$  Type-specific information: 
$   for a list (Itable, Istack, Istatic stack):
$      <calibre> <ssel>
$   for a rule (Irule) the number of affixes <n>
$     <n> (<formal type> (<calibre> <ssel>)? )*n
$   where calibre and ssel is for formal lists only.

$ LIST declaration:
$  Dlist <item> <etype> <esize> Dpoint
$    <etype> is 1,2,3,4; <esize> is either constant or an ITEM

$ FILE declaration
$  Dfile <item> (<file area>)? <direction> <Xstd> <str> Dpoint
$    <item>      -- ITEM pointer
$    <direction> -- 0 .. 3 ( >" ..." > )
$    <Xstd>      -- ITEM for Xstring table
$    <str>       -- ITEM for the ptr constant for the given string
$  file are is optional, for datafiles only:
$  Dsub (<item> <hash const>)* Dbus
$    <item>      -- list item
$    <hash>      -- constant, the hash of the string value

$ Expression (constant and variable declaration)
$   Dexpression <item> <expression> Dpoint
$ <expression>: list of operators, constant values, <item>s

$ Filling:
$   Dfill <item> <filling> Dpoint

$ ************************************************************* $
'stack'(flag,type,tag,lineno,adm,repr)ITEM.
'stack'(type,tag,adm,tnext,fnext)NODE.

$ opening and closing
'a'open ice file,close ice file,delete ice file.
$ writing to ICE: NODE, ITEM, FORMAL/LOCAL
'a'W+>x,Wcons+>x,Wtag+>x.
$ line numbers should be adjusted, this is done here
'f'adjust linenum+>x>.
$ create header and item list
'a'create ice header.
$ callback routines to create ice header
  'a'define ice tag+>tag.
  'a'Xstring table filling head+>tag,Xstring table item+>tag+>str.

$ other ICE data: list filling, size estimator, file declarer,
$    expression
'a'd list filling,d list size,d file data,d expression.

$ BODY ******************************************************** $
'pragmat'if=compile.
'pragmat'require=("display","lexical","pragmats","disc","input",
    "tags","types","lists","buffer","symbols").

$ messages ---------------------------------------------------- $
'table'MESSAGE=(
  "%p: not defined":tag not defined,
  "%p %p: not defined":type tag not defined,
  "%p %p: should be %p":tag type error,
  "%p %p: should be list":tag list type error,
  "%p %p: not used"                   :type tag not used,
  "%p %p: not used, cannot have filling":cannot have filling,
  "%p %p: cannot be external (%l)": cannot be external,
  "filling %p: undefined selector %p" :undefined selector,
  "filling %p: field %p duplicated":double selector,
  "filling %p: not consecutive block":wrong filling block,
$ warning 
  "filling %p: block size %d is bigger than calibre (%d)" :large block size,
  "filling %p: block size %d is smaller than calibre (%d)":small block size,
  "cannot open ice file %p, error code: %d, aborting":opening ICE
).
$ stacks ------------------------------------------------------ $

$ each tag has an ITEM entry assigned consecutively
'stack'[20](flag,type,tag,lineno,adm,repr)ITEM.
'stack'[10](type,tag,adm,tnext,fnext)NODE.

$ ice file ==================================================== $
'charfile' ICE="aleph.ice">.
'a'open ice file-err:
   create ice name, $ creates the name on >>LEXT $
   (open file+ICE+/w/+LEXT+>>LEXT,forget string+>>LEXT;
    get file error+ICE+err,error+opening ICE+>>LEXT+err).
'a'close ice file:
   close file+ICE.
'a'delete ice file:
   close ice file,create ice name,
     unlink file+LEXT+>>LEXT,forget string+>>LEXT.

$ ------------------------------------------------------------- $
$ writing to the ICE file
'a'separator: put char+ICE+/ /.
'a'nlcr: put char+ICE+newline.
'a'print int+>n:
  n=min int,put char+ICE+/-/,subtr+-1+n+n,print int1+n+/1/;
  n<0,put char+ICE+/-/,get abs+n+n,print int1+n+/0/;
  print int1+n+/0/.
'a'print int1+>n+>c-q-r:
  divrem+n+10+q+r,(q=0;print int1+q+/0/),
    add+r+c+r,put char+ICE+r.

'a'W+>x: =x=
   [DSYMB],put string+ICE+DSYMB+x,(x=Dpoint,put char+ICE+newline;+);
   [ITEM], put char+ICE+/I/,subtr+x+<ITEM+x,div+x+<>ITEM+x,incr+x,print int+x,separator;
   [NODE], put char+ICE+/N/,subtr+x+<NODE+x,div+x+<>NODE+x,incr+x,print int+x,separator;
   internal error+_rule_+_line_.
'a'Wcons+>x:print int+x,separator.
'a'Wline+>x:adjust linenum+x,print int+x,separator.
'a'Wtag+>tag-repr:
   was+LADM+tag,get repr+tag+repr, $ can be zero but only if error $
     (repr=0;W+repr);
   was+LLOC+tag,
     (type*LLOC[tag]=Ilocal,put char+ICE+/L/,print int+repr*LLOC[tag],separator;
      put char+ICE+/F/,subtr+tag+<<LLOC+repr,div+repr+<>LLOC+repr,
                              incr+repr,print int+repr,separator);
   internal error+_rule_+_line_. $ this should not happen $
$ these are local to ICE header
'a'Wstring+>str: $ str is either LEXT string or TTAG block
   (=str=
    [LEXT], put as string+ICE+LEXT+str,nlcr;
    [TTAG], previous+TTAG+str,put as string+ICE+TTAG+str,nlcr;
    internal error+_rule_+_line_).
'a'Wtype+>type: $ type is a pointer in INDICATOR
   put char+ICE+/</,put string+ICE+INDICATOR+type,put char+ICE+/>/,separator.

$ ICE header ================================================== $
'variable'baseline=0.
'f'adjust linenum+>x>:
  x<=0;subtr+x+baseline+x.
'a'create ice header-title-ptr-n-str:
  $ header
  (is pragmat value+pgt module,W+Dmodule;W+Dtitle),
  get pragmat value+pgt title+title,Wstring+title,
  first line offset+baseline,decr+baseline,
  0->ptr,(nxt:next input entry+ptr+n+str,Wline+n,Wstring+str,:nxt;W+Dpoint),
  $ item list, including pointers in Xstring table
  assign items,W+Dpoint,
  $ Xstring table elements, if any
  (Xstring table filling,W+Dpoint;+).

$ call back routines for assign items ------------------------- $
$ a tag gets an ITEM entry if it is defined and
$   either used or has a fill (warning/error will be given later)
'variable'next item=0.
'a'get new item+item>:
  next item=0,<<ITEM->next item->item;
  next+ITEM+next item,next item->item.

'q'is item tag+>tag+>type:
$ tdefined implies type is set and not Iempty
$ for type=Iselector tused is never set
$ for type=Itable allow filling without using the table,
$   but not for stacks (imported stacks are exceptions)
  type=Itable,(is tag flag+tag+tfill;is tag flag+tag+tused);
  is tag flag+tag+tdefined,is tag flag+tag+tused,
    (type=Irule,(is tag flag+tag+tpublic;
                 is tag flag+tag+rmacro,-;+);
     +).

'a'list data+>tag-x:
  get calibre+tag+x,Wcons+x,get ssel+tag+x,Wcons+x.

'a'formal affixes+>tag-n-formal-type:
  get adm+tag+formal,0->n,
  (nxt:formal=0;incr+n,get adm+formal+formal,:nxt),
  get adm+tag+formal,Wcons+n, $number of formals
  (nxt:formal=0;
       get type+formal+type,Wtype+type,
       ((type=Iformal stack;type=Iformal table),
         get formal calibre+formal+n,Wcons+n,
         get formal ssel+formal+n,Wcons+n;+),
       get adm+formal+formal,:nxt).
    
$ define ice tag is called for each tag. It sets "repr" to the
$  next free ITEM. External tags have LEXT string in "repr".
'a'define ice tag+>tag-type-item-flag-raw-dl:
  $ item: next pointer to ITEM
  $ raw tag: LEXT string for externals; TTAG entry for others
  tag=0;
  fix list usage+tag, $ add tused to lists with filling $
  get defline+tag+dl,get type+tag+type,
   (is item tag+tag+type,
     (is tag flag+tag+texternal,get repr+tag+raw;
      get tag+tag+raw),
     get tag flag+tag+iceflags+flag,
     get new item+item,put repr+tag+item,
     Wtype+type,W+item,Wcons+flag,Wline+dl,
     (=type=
      [Iconstant;Ivariable;Istatic var;Ipointer constant;
               Icharfile;Idatafile],+;
      [Itable;Istack;Istatic stack],list data+tag;
      [Irule],                      formal affixes+tag;
      internal error+_rule_+_line_),
     Wstring+raw;
    $ error if public and not defined;
    $ if has no definition, clear the type to get error messages when used.
    $    If not used, ignore silently.
    is tag flag+tag+tdefined;
    is tag flag+tag+tpublic,
          Xerror+dl+type tag not defined+type+tag,clear tag flag+tag+tpublic;
    put type+tag+Iempty).

$ call back routines for Xstring table filling ---------------- $
'a'Xstring table filling head+>tag:
   W+Dfill,Wtag+tag,Wcons+0.
'a'Xstring table item+>tag+>str-x:
   string width+LEXT+str+x,subtr+str+x+x,
   (nxt:x<str,incr+x,Wcons+LEXT[x],:nxt;+),
   W+Dcolon,Wtag+tag.
$ general error messages ====================================== $

'a'wrong type+>tag+>expected-type:
   (get type+tag+type,type=Iempty),error+tag not defined+tag;
   expected=0,error+type+tag list type error+tag;
   error+tag type error+type+tag+expected.
'a'no external+>tag-dl-type:
   (get type+tag+type,is tag flag+tag+texternal),
     get defline+tag+dl,error+cannot be external+type+tag+dl;
   type=Iempty,error+tag not defined+tag;
   +.

$ list declaration ============================================ $
$   Dlist <tag> <etype> <esize>
'a'd list size-tag-etype-esize-type:
   (must Qtag+tag,is tag flag+tag+tused),
     must Qcons+etype,W+Dlist,Wtag+tag,Wcons+etype,
     (etype<=2,must Qcons+esize,Wcons+esize;
      $ [tag] or [=tag=]
      $ tag must be defined and have correct type
      must Qtag+esize,get type+esize+type,
        (type=Iconstant,no external+esize,Wtag+esize;
         wrong type+esize+Iconstant)),
     W+Dpoint,must Q+Dpoint;
   is tag flag+tag+tfill,Qskip+Dpoint;
     $ error/warning will be given at filling $
   get type+tag+type,warning+3+type tag not used+type+tag,Qskip+Dpoint.

$ list filling ================================================ $
$ Dfill <tag> <lineno> (<item><repeater?><initializer*>)* Dpoint
$ <repeater>     Dstar <tag> | Dstar <cons>
$ <item>         <tag> | <cons> | <string> | Dopen <block> Dclose
$                 | Dextension <block2> Dextension
$ <block>        (<tag> | <cons> | Dstar )*
$ <block2>       (<tag> | cons>) ( Dto (<selector>|Dstar) )*
$ <initializer>  Dcolon <tag>
$ <string> is replaced by a <block>, and a <block> has no Dstar

'a'repeater-x-type:
  Q+Dstar,W+Dstar,
    (Qcons+x,Wcons+x;
     must Qtag+x,get type+x+type,
       (type=Iconstant,no external+x,Wtag+x;
        wrong type+x+Iconstant));
  +.
'a'initializer-tag:
  Q+Dcolon,mustQtag+tag, $ this tag can not be used
   (is tag flag+tag+tused,W+Dcolon,Wtag+tag;
    warning+3+type tag not used+Ipointer constant+tag),:initializer;
  +.
'a'check list item type+>tag-type:
   get type+tag+type,
     (type=Iconstant,no external+tag;
      type=Ipointer constant,no external+tag;
      wrong type+tag+Iconstant).
$ got a block; after the (. Check if there is a *
'a'count block items+cnt>+rep>-pos-lnum:
   0->cnt->rep,save disc position+pos+lnum,
     (nxt:Q+Dclose,restore disc position+pos+lnum;
          Q+Dstar,1->rep,:nxt;
          Qtag+#,incr+cnt,:nxt;
          must Qcons+#,incr+cnt,:nxt).
'a'block+>tag-calibre-cnt-rep-x-y:
   get calibre+tag+calibre,count block items+cnt+rep,
   (cnt=calibre;
    cnt>calibre,warning+6+large block size+tag+cnt+calibre;
    rep!=0,subtr+calibre+cnt+rep; $ cnt<calibre
    warning+4+small block size+tag+cnt+calibre),
   0->x->y,
   (nxt:Q+Dclose;
        Qtag+x,Wtag+x,check list item type+x,1->y,:nxt;
        Q+Dstar,(nxt:rep<=0;
                 decr+rep,(y=1,Wtag+x;Wcons+x),:nxt),:nxt;
        must Qcons+x,Wcons+x,0->y,:nxt).

$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'check block2 extension+>tag+>calibre-ptr-cnt1-cnt:
  0->cnt,>>BUFFER->ptr,decr+ptr,
    (BUFFER[ptr]=0,error+wrong filling block+tag; $ last item not filled $
     (nxt:calibre<=cnt;
          BUFFER[ptr]=0;
          incr+cnt,subtr+ptr+2+ptr,:nxt),
     cnt->cnt1,
     (nxt:calibre<=cnt;BUFFER[ptr]=0,subtr+ptr+2+ptr,incr+cnt,:nxt;+),
     (cnt<calibre,error+wrong filling block+tag; $ a hole in the filling $
      cnt1<cnt,warning+3+small block size+tag+cnt1+calibre;
      +)).

'a'block2 selector+>tag+x>-sel-ptr:
  Q+Dstar,-1->x;
  must Qtag+sel,get repr+sel+x,
    (x>0,decr+x,addmult+x+-2+>>BUFFER+ptr,decr+ptr,
           (BUFFER[ptr]=0;
            error+double selector+tag+sel);
     error+undefined selector+tag+sel,-1->x).

'a'block2+>tag-optr-calibre-x-y-rx-ry-ptr-sel:
  $ allocate entries in BUFFER: (flag,data) * calibre
  $   flag=0: empty, =1: constant, =2: tag
  >>BUFFER->optr,get calibre+tag+calibre,calibre->x,
  (nxt:extend BUFFER+0,extend BUFFER+0,decr+x,(x=0;:nxt)),
  0->rx->ry, $ no repeat data yet $
  (nxt: (Qtag+x,check list item type+x,2->y;must Qcons+x,1->y),
        (dest: Q+Dto,block2 selector+tag+sel,
                   (sel<0,x->rx,y->ry;
                    addmult+sel+-2+>>BUFFER+ptr,
                        x->BUFFER[ptr],decr+ptr,y->BUFFER[ptr]),
                   :dest;
               Q+Dextension;
               :nxt)),
  $ BUFFER has been filled, check if there are empty slots
  optr->ptr,
  (nxt: ry=0;
   ptr>=>>BUFFER;
   incr+ptr,(BUFFER[ptr]=0,ry->BUFFER[ptr],incr+ptr,rx->BUFFER[ptr];
             incr+ptr),:nxt),
  check block2 extension+tag+calibre,
  optr->ptr,
  (nxt:ptr>=>>BUFFER;
       incr+ptr,BUFFER[ptr]->y,incr+ptr,BUFFER[ptr]->x,
       (y=1,Wcons+x;y=2,Wtag+x;+),:nxt),
  unstack to+BUFFER+optr.
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
$ str is a string in LEXT; print as a sequence of integers
'a'write string+>str-x:
  W+Dopen,string width+LEXT+str+x,subtr+str+x+x,
  (nxt:x<str,incr+x,Wcons+LEXT[x],:nxt;W+Dclose).
$ a list item: tag, const, string, block
'a'list item+>tag-x:
   Qtag+x,Wtag+x,check list item type+x;
   Qcons+x,Wcons+x;
   Qstring+x,write string+x;
   Q+Dopen,W+Dopen,block+tag,W+Dclose;
   mustQ+Dextension,W+Dopen,block2+tag,W+Dclose.

$ only if the list tag is table or used
'p'is fill tag used+>tag-type:
  is tag flag+tag+tused;
  (get type+tag+type,type=Itable),
    warning+3+type tag not used+type+tag;
  error+cannot have filling+type+tag,-.
    
'a'd list filling-tag-l:
   (must Qtag+tag,is fill tag used+tag),
      W+Dfill,Wtag+tag,get linenum+l,adjust linenum+l,Wcons+l,
      (nxt:Q+Dpoint,W+Dpoint;
           list item+tag,repeater,initializer,:nxt);
   Qskip+Dpoint.

$ file declaration ============================================ $
'a'file area-x-type:
   Q+Dbus,W+Dbus;
   must Qtag+x,get type+x+type,
    ((type=Itable;type=Istack;type=Istatic stack),
        no external+x;
     wrong type+x+0),
    Wtag+x,mustQcons+x,Wcons+x, $ tag and the hash $
    :file area.

'a'd file data-tag-x:
   must Qtag+tag,(is tag flag+tag+tused,
     W+Dfile,Wtag+tag,(Q+Dsub,W+Dsub,file area;+),
     mustQcons+x,Wcons+x,  $ direction 0..3
     mustQtag+x,Wtag+x,    $ Xstdstring
     mustQtag+x,Wtag+x,    $ init string
     mustQ+Dpoint,W+Dpoint;
   get type+tag+x,warning+3+type tag not used+x+tag,
   Qskip+Dpoint).
   
$ expression ================================================== $
'a'check constant tag+>tag-type:
   get type+tag+type,(type=Iconstant,no external+tag;
                      type=Ipointer constant,no external+tag;
                      wrong type+tag+Iconstant).
'a'check list tag+>tag-type:
   get type+tag+type,(type=Itable,no external+tag;
                      type=Istack,no external+tag;
                      type=Istatic stack,no external+tag;
                      wrong type+tag+0).
'a'expression:
  (Q+Dminus,W+Dminus;+),
  (nxt:exprbase,(Q+Dor,W+Dor,:nxt;
                 Q+Dand,W+Dand,:nxt;
                 Q+Dxor,W+Dxor,:nxt;
                 Q+Dplus,W+Dplus,:nxt;
                 Q+Dminus,W+Dminus,:nxt;
                 Q+Dstar,W+Dstar,:nxt;
                 Q+Ddiv,W+Ddiv,:nxt;
                 +)).
'a'exprbase-x:
  Qcons+x,Wcons+x;
  Qtag+x,Wtag+x,check constant tag+x;
  Q+Dcompl,W+Dcompl,:exprbase;
  Q+Dlwb,W+Dlwb,mustQtag+x,Wtag+x,check list tag+x;
  Q+Dupb,W+Dupb,mustQtag+x,Wtag+x,check list tag+x;
  Q+Dcalibre,W+Dcalibre,mustQtag+x,Wtag+x,check list tag+x;
  mustQ+Dopen,W+Dopen,expression,mustQ+Dclose,W+Dclose.

'a'd expression-tag-x:
   (mustQtag+tag,is tag flag+tag+tused),
     W+Dexpression,Wtag+tag,expression,mustQ+Dpoint,W+Dpoint;
   get type+tag+x,
     (x=Iconstant,warning+1+type tag not used+x+tag;
                  warning+3+type tag not used+x+tag),
     Qskip+Dpoint.

$ ============================================================ $

'root'+.
'pragmat'endif=compile.

'end'

