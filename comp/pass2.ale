$ program
'pragmat'module=pass2,title="pass2, v2.1".

$ **************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2.1)
$
$  (C) 2020-2024, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ **************************************************************

$ HEADER *******************************************************
$ read all tokens from DISC and replace all qf::id by their 
$   definitions. Collect selectors.
$
'a'second pass.

$ BODY *********************************************************
'pragmat'if=compile.
'pragmat'require=("display","disc","identifier","tags","types","pragmats",
                  "symbols","selector","input").

$ ==============================================================
$ error messages and error handling

'table'MESSAGE=(
"%p %p: cannot be external (%l)"         :cannot be external,
"%p %p: must be stack or table (%l)"     :must be of list type,
"%p %p: different calibre (%l)"          :different calibre,
"%p %p: different standard selector (%l)":different ssel,
"%p %p: must be of type %p (%l)"         :type error,
"rule %p: used as affix (%l)"            :cannot be affix,
"rule %p: different rule type (%l)"      :rule type error,
"rule %p: different formal affixes (%l)" :formal affix error,
"%p %p: exported tag must be qualified"  :only module can export,
"%p %p: imported tag must be qualified"  :main import,
"%p %p: not defined in this module (%l)" :cannot export,
"%p %p: cannot be macro (%l)"            :cannot be a macro,
"'pragmat'macro=%p: ignored"             :macro ignored
).

'a'no external+>tag-type:
   is tag flag+tag+texternal,get type+tag+type,
       error+cannot be external+type+tag+defline*LADM[tag];
   +.
'a'check constant type+>tag-type:
    $ tag should be constant or pointer constant and not external
    $  expression, fill
    get type+tag+type,
      (type=Iconstant,no external+tag;
       type=Ipointer constant; $ it is not external
       error+type error+type+tag+Iconstant+defline*LADM[tag]).
'a'check strict constant type+>tag-type:
    $ tag is a constant (no pointer constant) and not external
    $  size estimator, multiplier in fill
    get type+tag+type,
      (type=Iconstant,no external+tag;
       error+type error+type+tag+Iconstant+defline*LADM[tag]).
'a'check list type+>list-type:
    $ table or stack, can be external
    $  import prototype (as definition, no external),
    $  expression limit
    get type+list+type,(=type=
       [Itable;Istack;Istatic stack],no external+list;
        error+must be of list type+type+list+defline*LADM[list]).
'q'is list type+>tag:
    =type*LADM[tag]= [Itable;Istack;Istatic stack],+;-.
$ **************************************************************
$ pass 2: identify all (qualified) tags, and collect list selectors. 
$   Read from disc1, write to disc2.

'a'second pass:
   Q+Drule,rule declarer+Drule,  :second pass;
   Q+Droot,rule declarer+Droot,  :second pass;
   Q+Dfile,file declarer,        :second pass;
   Q+Dlist,list declarer,        :second pass;
   Q+Dfill,list fill,            :second pass;
   Q+Dexpression,expression,     :second pass;
   Q+Dexternal,external declarer,:second pass;
   Q+Dimport,import prototype,   :second pass;
   Q+Dexport,export prototype,   :second pass;
   Q+Dproto,prototype,           :second pass;
   Q+Dsource,set source,         :second pass;
   Q+Dpragmat,pragmat,           :second pass;
   Q+Dend;
   internal error+_rule_.

$ ==============================================================
$ rule declarer; replace all (qf:ttag) by the corresponding LADM entry
$  compound member: 
$    (Dlabel <ttag>)?, (Dlocal, <ttag>+, Dcolon)?,
$              (classification; alternative series).
$  alternative series:
$    alternative,(Dsemicolon, alternative series).
$  alternative:
$    terminator; member,(Dcomma,alternative;+).
$  terminator:
$    Dplus; Dminus; Djump,<lloc>.
$  member:
$    Dopen,compound member,Dclose;
$    Dextension,extension,Dextension;
$    <qftag>, affixes.
$  affixes:
$    Dplus,source,affixes;+.
$  classification:
$    Dbox,source,Dbox,class chain.
$  class chain:
$    Darea,area,Darea,Dcomma,alternative,
$       (Dsemiclon,class chain;+).
$  area:
$   (<qftag|number>?,Dcolon,<qftag|number>?),(Dsemicolon,area;+).
$  extension:
$   Dextension,<qftag|loc>,(source,(Dto,<ttag|const)* )*, Dextension.

$  set the rcallexit flag when a rule calls an exit 

'variable'rule scanned=0. $ the actual rule
'a'rule declarer+>dtype-x:
    $ <tag>, (formal ttag)*, compouund member, Dpoint
    must Qtag+rule scanned,
      D+dtype,Dtag+rule scanned,    $ the rule,
      (nxt:Qttag+x,Dttag+x,:nxt;+), $ formal affixes, if any
      compound member,Qskip+Dpoint,D+Dpoint.
'a'compound member-x:
    $ label, local affixes, (classification; alternative series).
    (Q+Dlabel,D+Dlabel,must Qttag+x,Dttag+x;+),
    (Q+Dlocal,D+Dlocal,(nxt:Q+Dcolon,D+Dcolon;must Qttag+x,Dttag+x,:nxt);+),
     $ classification
    (Q+Dbox,D+Dbox,source,must Q+Dbox,D+Dbox,
          (nxt:class,(Q+Dsemicolon,D+Dsemicolon,:nxt;+));
     $ alternative series
     (nxt:alternative,(Q+Dsemicolon,D+Dsemicolon,:nxt;+))).
'a'class:
    $ Darea, area, Darea, Dcomma, alternative.
    must Q+Darea,D+Darea,(nxt:zone,(Q+Dsemicolon,D+Dsemicolon,:nxt;+)),
    must Q+Darea,D+Darea,must Q+Dcomma,D+Dcomma,alternative.
'a'zone-qf-ttag-x:
    $ either a list tag, a constant, or a number
    (Qnumber+x,D+x;
     Qqtag+qf+ttag,find ttag definition+qf+ttag+x,
        (x=0;Dtag+x,use tag+x,(is list type+x;check constant type+x));
     +),
    (Q+Dcolon,D+Dcolon,:zone;+).
'a'alternative-x:
    Q+Dplus,D+Dplus;     $ terminator
    Q+Dminus,D+Dminus;   $ terminator
    Q+Djump,D+Djump,must Qtag+x,Dtag+x; $ local Ilabel
    Q+Dextension,extension,(Q+Dcomma,D+Dcomma,:alternative;+);
    Q+Dopen,D+Dopen,compound member,must Q+Dclose,D+Dclose,
                           (Q+Dcomma,D+Dcomma,:alternative;+);
    affix form,(Q+Dcomma,D+Dcomma,:alternative;+).
'a'extension:
    D+Dextension,read qtloc,
      (nxt:source,(to:Q+Dto,D+Dto,to selector,:to;+),
                  (Q+Dcomma,D+Dcomma,:nxt;+)),
    must Q+Dextension,D+Dextension.
'a'to selector-x:
    $ a selector is a number (formal list) or a ttag (global list)
    Qcons+x,Dcons+x;
    must Qttag+x,Dttag+x.
'a'check rule type+>x>-type:
    x=0; $ not defined
    (get type+x+type,type=Irule);
    error+type error+type+x+Irule+defline*LADM[x],0->x.
'a'affix form-qf-ttag-x:
    $ rule+affix+affix
    (Qtag+x;must Qqtag+qf+ttag,find ttag definition+qf+ttag+x),
      check rule type+x,
      (x=0;Dtag+x,use tag+x, $ if calls an exit rule, mark it
            (is tag flag+x+r exit,set tag flag+rule scanned+rcallexit;+)),
      (nxt:Q+Dplus,D+Dplus,source,:nxt;+).
'a'source-x:
    Qnumber+x,D+x;
    Q+Dlwb,D+Dlwb,read qtloc;
    Q+Dupb,D+Dupb,read qtloc;
    Q+Dvlwb,D+Dvlwb,read qtloc;
    Q+Dvupb,D+Dvupb,read qtloc;
    Q+Dcalibre,D+Dcalibre,read qtloc;
    Q+Dnoarg,D+Dnoarg;
    Q+Dsub,D+Dsub,read qtloc, $ list
       source,must Q+Dbus,D+Dbus, $ index
       (Qcons+x,Dcons+x;must Qttag+x,Dttag+x); $ selector
    read qtloc.
'a'read qtloc-qf-ttag-x-type:
    $ hande LLOC, LADM, or qualified tag
    Qltag+x,Dtag+x; $ LLOC
    Qtag+x,Dtag+x,get type+x+type, $LADM
         (type=Irule,error+cannot be affix+x+defline*LADM[x];use tag+x);
    must Qqtag+qf+ttag,find ttag definition+qf+ttag+x,
      (x=0;Dtag+x,get type+x+type,
         (type=Irule,error+cannot be affix+x+defline*LADM[x];use tag+x)).

$ ==============================================================
$ file declarers, see files.ale
'a'file declarer-x-tag:
   $ Dfile,<tag>,<file area option>,<direction>,
   $   <string1>, <string2>, Dpoint
   $ <file area>:: Dsub, <qftag>*, Dbus
   D+Dfile,must Qtype+#,must Qtag+tag,Dtag+tag,
     (Q+Dsub,D+Dsub,file area;+),
     must Qcons+x,Dcons+x, $ direction
     must Qtag+x,Dtag+x,must Qtag+x,Dtag+x, $ the string
     must Q+Dpoint,D+Dpoint.
'a'file area-qf-ttag-list:
   Q+Dbus,D+Dbus;
   must Qqtag+qf+ttag,find ttag definition+qf+ttag+list,
      (list=0;Dtag+list,check list type+list,use tag+list),
      :file area.

$ ==============================================================
$ list declarer, see lists.ale
'a'list declarer-x-qf-ttag-list-tag:
   $ Dlist,<tag>,<etype>, <cons> | <qf ttag> ,<selectors>,Dpoint
   D+Dlist,must Qtag+list,Dtag+list, $table, stack and static stack declarer
     must Qcons+x,Dcons+x,
     $ esize 0: none, 1,2: constant, 3,4: constant tag
     (=x= [0],Dcons+0;
          [1;2],must Qcons+x,Dcons+x;
          must Qqtag+qf+ttag,find ttag definition+qf+ttag+tag,
          (tag=0; $ not found
           Dtag+tag,check strict constant type+tag,use tag+tag)),
     read list selectors+0+list,Qskip+Dpoint,D+Dpoint.

'a'read list selectors+>export+>list-dl-x-y-sel-offs-skip:
    $ calibre,ssel, (ttag,offs)*
    $ calibre,ssel must agree; except when calibre=-1
    $  add selectors only when calibres agree
    get linenum+dl,get calibre+list+y,must Qcons+x, $ calibre
    (x=y,0->skip;1->skip),
    (x=-1,must Qcons+#, $ no selector list (fill,prototype,declaration)
                        $ error if export
       (x=y;export=0;selector error+list+different calibre);
     (x=y;selector error+list+different calibre),
       must Qcons+x,get ssel+list+y,
       (x=y;is+skip;selector error+list+different ssel,1->skip)),
    (nxt:Qttag+sel,must Qcons+offs,
            (is+skip;add list selector+list+sel+offs+dl),:nxt;
         +).
'a'selector error+>list+>msg-type:
    get type+list+type,error+msg+type+list+defline*LADM[list].

$ ---------------------------------------------------------------
$ list fill, see lists.ale     
'a'list fill-rtype-type-qf-ttag-list:
    $ Dfill, <typer>, <qtag>, selectors,, Dcolon, filler*, Dpoint.
    $ filler: item, repeater?, initializer*.
    D+Dfill,must Qtype+rtype, $ Istack,Itable,Istatic stack
    must Qqtag+qf+ttag,find ttag definition+qf+ttag+list,
    (list=0,Qskip+Dpoint; $ no definition found
     Dtag+list,no external+list,set tag flag+list+tfill,
     (is tag flag+list+timported,set tag flag+list+tused;+),
     get type+list+type,
      (type!=rtype,error+type error+rtype+list+type+defline*LADM[list],
              Qskip+Dpoint;
       read list selectors+0+list, must Q+Dcolon,
              filler+list,D+Dpoint)).
'a'filler+>list:
    $ <item> <repeater>? <initializer>
    Q+Dpoint;
    filler item, filler repeater, filler initializer+list,:filler.
'a'filler item-x-qf-ttag:
    Qstring+x,Dstring+x;
    Qnumber+x,D+x;
    Q+Dopen,D+Dopen,filler block1,D+Dclose;
    Q+Dextension,D+Dextension,filler block2,D+Dextension;
    must Qqtag+qf+ttag,find ttag definition+qf+ttag+x,
      (x=0;Dtag+x,use tag+x,check constant type+x).
'a'filler block1-x-qf-ttag:
    Q+Dclose;
    Q+Dstar,D+Dstar,:filler block1;
    Qnumber+x,D+x,:filler block1;
    must Qqtag+qf+ttag,find ttag definition+qf+ttag+x,
      (x=0;Dtag+x,use tag+x,check constant type+x),:filler block1.
'a'to selectors-x:
    Q+Dto,D+Dto,
      (Q+Dstar,D+Dstar;must Qttag+x,Dttag+x),:to selectors;
    +.
'a'filler block2-x-qf-ttag:
    Q+Dextension;
    Qnumber+x,D+x,to selectors,:filler block2;
    must Qqtag+qf+ttag,find ttag definition+qf+ttag+x,
      (x=0;Dtag+x,use tag+x,check constant type+x),to selectors,:filler block2.
'a'filler repeater-x-qf-ttag:
    Q+Dstar,D+Dstar,
       (Qcons+x,Dcons+x;
        must Qqtag+qf+ttag,find ttag definition+qf+ttag+x,
          (x=0;Dtag+x,use tag+x,check strict constant type+x)),:filler repeater;
    +.
'a'filler initializer+>list-tag:
    $ if the initializer used, the list is used.
    Q+Dcolon,D+Dcolon,must Qtag+tag,Dtag+tag,
      put adm+tag+list,(is tag flag+tag+tused,use tag+list;+),
      :filler initializer;
   +.

$ ===============================================================
$ expression from constant and variable declaration, see vars.ale
'a'expression-tag:
   D+Dexpression,must Qtag+tag,Dtag+tag,is expression,must Q+Dpoint,D+Dpoint.
'a'is expression:
   (Q+Dminus,D+Dminus;+),
   (nxt: exprbase,(Q+Dor,D+Dor,:nxt;
                   Q+Dand,D+Dand,:nxt;
                   Q+Dxor,D+Dxor,:nxt;
                   Q+Dplus,D+Dplus,:nxt;
                   Q+Dminus,D+Dminus,:nxt;
                   Q+Dstar,D+Dstar,:nxt;
                   Q+Ddiv,D+Ddiv,:nxt;
                   +)).
'a'limit list-qf-t-tag:
    must Qqtag+qf+t,find ttag definition+qf+t+tag,
    (tag=0;Dtag+tag,check list type+tag,use tag+tag).
'a'exprbase-qf-t-tag:
   Q+Dcompl,D+Dcompl,:exprbase;
   Qnumber+t,D+t;
   Q+Dlwb,D+Dlwb,limit list;
   Q+Dupb,D+Dupb,limit list;
   Q+Dcalibre,D+Dcalibre,limit list;
   Q+Dopen,D+Dopen,is expression,must Q+Dclose,D+Dclose;
   must Qqtag+qf+t,find ttag definition+qf+t+tag,
     (tag=0;Dtag+tag,check constant type+tag,use tag+tag).
   
$ ==============================================================
$ external declarers have the accomapnying string
'a'external declarer-x:
    $ Dextenal, <tag>, <string>, Dpoint
    D+Dexternal,must Qtag+x,Dtag+x,(Qstring+x,Dstring+x;+),
    must Q+Dpoint,D+Dpoint.

$ ==============================================================
$ export prototype. There must be a matching definition which is
$   not imported and not permanent. Handle list selectors as well.
'a'export prototype-tag:
    $ Drule, <ruletype>, <qtag>, <formals, Dpoint
    $ <file type>, <qtag>, Dpoint
    $ <list type>, <qtag>, selectors, Dpoint
    $ <const/var type>, <qtag>, Dpoint
    check prototype+1+tag,
    (tag=0;
     is tag flag+tag+tpermanent; $ignore silently
     is tag flag+tag+timported,error+cannot export+type*LADM[tag]+tag+defline*LADM[tag];
     (is pragmat value+pgt module;was+TTAG+scope*LADM[tag]),
          use tag+tag,set tag flag+tag+tpublic;
     error+only module can export+type*LADM[tag]+tag).
$ ==============================================================
$ a prototype, there must be a matching definition.
$   Handle list selectors
'a'prototype:
    check prototype+0+#.

'q'type mismatch+>rtype+>tag-type:
    $ type match: either equal, or Iconstant vs Ipointer constant
    get type+tag+type,type!=rtype,(rtype!=Iconstant;type!=Ipointer constant).

'a'check prototype+>export+tag>-type-qf-ttag:
    $ check the prototype, return the tag if no error
    Q+Drule,rule prototype+tag;
    $ <typer>, <qtag>, selectors, Dpoint
    must Qtype+type,must Qqtag+qf+ttag,find ttag definition+qf+ttag+tag,
    (tag=0,Qskip+Dpoint;
     type mismatch+type+tag,error+type error+type*LADM[tag]+tag+type+defline*LADM[tag],
           0->tag,Qskip+Dpoint;
     is list type+tag,read list selectors+export+tag,Qskip+Dpoint;
     Qskip+Dpoint).
'a'rule prototype+tag>-r-qf-ttag-formals-x:
    $ <ruletype>, <qtag>, <formals> Dpoint
    must Qcons+r,must Qqtag+qf+ttag,must Qtag+formals,Qskip+Dpoint,
    find ttag definition+qf+ttag+tag,
    (tag=0;
     (get type+tag+x,x!=Irule),
           error+type error+x+tag+Irule+defline*LADM[tag],0->tag;
     (get tag flag+tag+rtype+x,x!=r),
           error+rule type error+tag+defline*LADM[tag],0->tag;
     (get adm+tag+x,x!=formals),
           error+formal affix error+tag+defline*LADM[tag],0->tag;
     +).

$ ==============================================================
$ import prototype: handle list selectors
'a'import prototype-list:
    $ Dimport,<tag>, Dpoint
    $ Dimport,<tag>,<selectors>,Dpoint.
    must Qtag+list, $ an imported tag must have a qualifier
    (-x: is pragmat value+pgt module;
         was+TTAG+scope*LADM[list];
         (get base name+scope*LADM[list]+x,is+x);
         error+main import+type*LADM[list]+list),
    (Q+Dpoint;
     is list type+list,read list selectors+0+list,Qskip+Dpoint;
     check list type+list,Qskip+Dpoint).

$ ==============================================================
$ changing source, see symbols.ale
'a'set source-x:
    $ opening new source, set source base
    D+Dsource,must Qcons+x,Dcons+x,set source from lineno+x.

$ ==============================================================
$ pragmats: warning level and macro rule
'a'pragmat-x-tag:
    $ pragmat: warning level or macro=TTAG (no qualifier)
    must Qcons+x,
     (x=pgt warning level,D+Dpragmat,Dcons+pgt warning level,
          must Qcons+x,Dcons+x,set pragmat value+pgt wlevel+x;
      must Qttag+x, $ maxro=x
          find ttag definition+0+x+tag,(tag=0; $ error
          check tag for macro+tag)).
'a'check tag for macro+>tag-type-dl:
    $ check macro=TTAG for correctness, add rmacro flag
    is tag flag+tag+tdefined,get defline+tag+dl,get type+tag+type,
      (type!=Irule, warning+3+cannot be a macro+type+tag+dl;
       is tag flag+tag+tnomacro,
                   warning+3+cannot be a macro+type+tag+dl;
       set tag flag+tag+rmacro);
     warning+3+macro ignored+tag.

$ ==============================================================

'root'+.
'pragmat'endif=compile.
'end'

