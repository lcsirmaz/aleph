$ character and data files $
'pragmat'module=files,title="files v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
$
'a'charfile declaration+>ext.
'a'datafile declaration+>ext.
$ BODY ******************************************************** $
'pragmat'if=compile.
'pragmat'require=("lexical","display","symbols","tags","types",
     "identifier","pragmats","disc").
$
$ charfile and datafile declaration:
$ 'charfile' tag = > "path" >.
$   => Dfile Icharfile LADM <0..3> Xstdstring <ptr> Dpoint
$   where in = cst&1; out = cst&2; <ptr> is an stdstr pointer (tag)
$ 'datafile' tag [ list1; list2; list3] = >"path".
$   => Dfile Idatafile LADM Dsub <qtag1> ...<qtagn> Dbus 
$           <0..3> Xstdstring <ptr> Dpoint
$   here Dsub ... Dbus is missing if there is no area
$ external declaration:
$ 'external''datafile' tag="@rep".
$   => Dexternal LADM <string> Dpoint.
$ prototype:
$   => Dimport LADM Dpoint
$   => Dexport/Dproto <typer> <qtag> Dpoint.
$
$ The "path" is stored as a standard string.
$ Lists in the file area cannot be external ones.

$ ======================================================== $
'variable'ltype=0,lqf=0,ltag=0.

'table'MESSAGE=(
 "external %p %p: missing string"      :no external string,
 "mixing %p declaration and prototype" :mixing proto,
 "%p %p: missing file string"          :no file path,
 "%p %p: tag is expected in file area" :tag expected,
 "%p %p: large datafile area (max %d)" :large datafile area,
 "%p declaration: tag expected"        :tag expected for
).

$ ---------------------------------------------------------- $

$ declarations:
$  'charfile' tag = >"path">.
$  'datafile' tag [<file area>] = >"path">.
$  'datafile' tag = >"path">.
$  'x'charfile' tag = "@tag"
$  'x'datafile' tag = "@tag"
$ prototypes:
$  'charfile' tag1,tag2.
$  'datafile' tag1,tag2.
$ other files can be opened, but without opening the first
$  file operation automatically opens with the given path and
$  direction.

'a'expect path+>dl+path>+dir>:
   0->dir,(R+Sright,incr+dir;+),
   (is string+path;Squote image->path,error+no file path+ltype+ltag),
   new stdstring+path+dl+path, 
   (R+Sright,add+dir+2+dir;+).

'constant'max datafile area=32. $ maximal number of lists in a datafile
'a'file area-qf-tag-cnt:
  0->cnt,(nxt:
    (is qtag+qf+tag,incr+cnt,Dqtag+qf+tag;
     error+tag expected+ltype+ltag),
    (cnt=max datafile area,error+large datafile area+ltype+ltag+max datafile area;+),
    (R+Ssemicolon,:nxt;must+Sbus)).

$ after 'datafile' TAG [
'a'file area declarer+>dl-res-path-dir:
   create tag definition+lqf+ltag+Idatafile+dl+res,
   set tag flag+res+tdefined,check tag definition+res,
   D+Dfile,D+Idatafile,Dtag+res,D+Dsub,file area,D+Dbus,
   must+Sequals,expect path+dl+path+dir,Dcons+dir,
   Dtag+Xstring table,Dtag+path,D+Dpoint.

$ charfile / datafile declaration
$ after <TYPER><tag>=
'a'declarer+>dl-res-path-dir:
   create tag definition+lqf+ltag+ltype+dl+res,
   set tag flag+res+tdefined,check tag definition+res,
   expect path+dl+path+dir, $ path is LADM pointer constant
   D+Dfile,D+ltype,Dtag+res,Dcons+dir,Dtag+Xstring table,Dtag+path,D+Dpoint.

$ after 'external'<TYPE><tag>=
'a'external declarer+>dl-str-res:
   create tag definition+lqf+ltag+ltype+dl+res,
   set tag flag+res+texternal,set tag flag+res+tdefined,
   check tag definition+res,
   (is string+str;0->str,error+no external string+ltype+ltag),
   D+Dexternal,Dtag+res,Dstring+str,D+Dpoint.

$ after <TYPER><tag>
'a'prototype+>dl-proto-res:
   get pragmat value+pgt proto+proto, $ 1: import, 2: public, 0: none $
   (proto=1,create tag definition+lqf+ltag+ltype+dl+res,
            set tag flag+res+tdefined,set tag flag+res+timported,
            check tag definition+res,
            D+Dimport,Dtag+res,D+Dpoint;
    (proto=2,D+Dexport;D+Dproto),D+ltype,Dqtag+lqf+ltag,D+Dpoint).

$ 'x''charfile'tag="@@@"    external declaration
$ 'charfile'tag= >"path">   declaration
$ 'datafile' tag            prototype
$ ext=1: external, ext=2/3  definition/prototype
'a'declaration+>ext>-dl:
  is qtag+lqf+ltag,get linenum+dl,
    (R+Sequals, $this is a declarer
       (ext=3,error+mixing proto+ltype,skip all;
        ext=1,external declarer+dl;
        2->ext,declarer+dl);
     ext=1,must+Sequals,external declarer+dl;
     (ltype=Idatafile,R+Ssub),
       (ext=3,error+mixing proto+ltype,skip all;
        2->ext,file area declarer+dl);
     ext=2,error+mixing proto+ltype,skip all;
     3->ext,prototype+dl);
  error+tag expected for+ltype,skip all.

'a'declaration series+>ext:
   declaration+ext,
       (R+Scomma,:declaration series;
        R+Spoint;
        must+Spoint,skip to point).

$ 'external''datafile' or 'datafile'
'a'datafile declaration+>ext:
   Idatafile->ltype,declaration series+ext.
$ 'external''charfile' or 'charfile'
'a'charfile declaration+>ext:
   Icharfile->ltype,declaration series+ext.
       
'root'+.

'pragmat'endif=compile.
'end'

