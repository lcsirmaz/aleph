$ program
'pragmat'module=pass1,title="pass1, v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ******************************************************* $
$ first pass
$ read all sources and create the token stream written to DISC.
$ make some checks: one definition at each base; all modules
$ have valid ID. Print dictionary if requested.
  
'a'first pass.
   $ reads all sources, creates the token stream, some checks
'a'pass 1.
   $  called recursively to handle conditional pragmats

$ BODY ********************************************************* $
'pragmat'if=compile.
'pragmat'require=("display","lexical","symbols","input","identifier",
     "tags","dictionary","pragmats","files","lists","vars","rules",
     "rulebody").

$ error messages
'table'MESSAGE=(
   "misplaced symbol %p"   :wrong symbol,
   "'external' can be used in library mode only"
                           :external in library mode,
   "more than one 'root'"  :more than one root,
   "no 'root'"             :no root
).

'a'first pass:
   $ call pass1 for each source; handles conditional pragmats
   read sources,(is+root scanned;Xerror+0+no root),
   (was error; read libraries, check all ttags, check source modules),
   print dictionary.


'variable'root scanned=0.
   $ non-zero if 'root' was scanned

'a'pass 1-err:
   $ called for each source
   ahead+Send symb;      $ we reached the end
   $ pragmats and conditional pragmats
   R+Sprag symb,program pragmat+err,
      (err=2;            $ end of conditional pragmat
       err=1,skip to point,               :pass 1;
                                          :pass 1);
   is pragmat value+pgt skip,
      skip silently,Rskip+Spoint,         :pass 1;
   $ other
   declaration+0,                         :pass 1;
   R+Sstatic,static declaration,          :pass 1;
   R+Sroot symb,root,                     :pass 1;
   R+Sext symb,external declaration,      :pass 1;
   R+Sdummy symb,skip to point,           :pass 1;
   error+wrong symbol+inpt,skip to point, :pass 1.

'p'declaration+>ext:
   R+Stable symb,  table declaration+ext;
   R+Sstack symb,  stack declaration+ext;
   R+Svar symb,    variable declaration+ext;
   R+Scons symb,   constant declaration+ext;
   R+Scharfile,    charfile declaration+ext;
   R+Sdatafile,    datafile declaration+ext;
   R+Saction,      rule declaration+r action+ext;
   R+Sfunction,    rule declaration+r func+ext;
   R+Squestion,    rule declaration+r que+ext;
   R+Spredicate,   rule declaration+r pred+ext;
   R+Sexit,        rule declaration+r exit+ext.

'a'external declaration:
   is pragmat value+pgt library,
    (declaration+1;
     R+Sdummy symb,  skip to point;
     error+wrong symbol+inpt,skip to point);
   error+external in library mode,skip to point.

'a'static declaration:
   R+Svar symb,    static variable declaration;
   R+Sstack symb,  static stack declaration;
   R+Sdummy symb,  skip to point;
   error+wrong symbol+inpt,skip to point.

'a'root:
   is+root scanned,error+more than one root,skip to point;
   1->root scanned,root body.

'root'+.
'pragmat'endif=compile.
'end'


