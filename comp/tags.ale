$ tag manipulating routines $
'pragmat'module=tags,title="tags v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
$ stacks for tags
$  TTAG - tags, character format
$  LADM - type and other information
$  LLOC - local tags (such as formal, local, label)

'stack'(left,right,adm,lastline,text) TTAG,
       (next,scope,defline,flag,type,repr,adm,tag) LADM,
       (calibre,ssel,flag,ftype,repr,ttag) LLOC.

$ message handling
'p'was tag pointer+>ptr, was qtag pointer+>ptr.
   $ for error and warning messages. If ptr is TTAG LADM or LLOC,
   $  add the coresponding string to the top of BUFFER.

$ first pass routines:
'a'enter tag+>n+ttag>.
   $ tag is the last n characters in BUFFER, return the corresponding entry in TTAG
'a'use tag+>tag.
   $ mark LADM tag as used
'f'get ttag head+x>.
   $ return the head of the TTAG tree for dictionary pronting
'f'get stdstring head+x>.
   $ return the head of pointer constants for @StringTable
'a'new stdstring+>str+>dl+tag>. $ <=files,rulebody
   $ create a new Iptr constant entry for a LEXT string
'a'add pragmat matter+>type+>str.
   $ front / back matter in a linked list
'q'get next matter+>ptr>+type>+str>.
   $ return the next matter, type=1: front, type=2:back
$ --------------------------------------------- $
'constant'Panchor,Pexit,Parrow.
   $ TTAG identifiers, @, @exit, @make

'constant'Xroot,Xshift affix,Xstring table.
   $ Xroot, etc: LADM predefined tags

$ rules to get tag fields from LADM
'f'get ttag+>tag+x>,get repr+>tag+x>,get adm+>tag+x>,get type+>tag+x>,
   get defline+>tag+x>,get next tag+>tag+x>.
'a'put repr+>tag+>x,put adm+>tag+>x,put defline+>tag+>x.
$ tag flags
'q'is tag flag+>tag+>flag.
'f'get tag flag+>tag+>mask+val>.
'a'set tag flag+>tag+>flag,clear tag flag+>tag+>flag.
'q'is special rule+>symb+ttag>.
   $ ->, =, !=, etc to @make, @eq, @noteq, etc
$ formal affixes
'a'create local affix+>ftype+>ftag.
   $ create a new LLOC entry
'a'enter formal affixes+affs>.
   $ return a pointer holding a description of affixes from LLOC.
'f'get formal affixno+>tag+n>,
   get formal type+>tag+>cnt+type>,
   get formal list ext+>tag+>cnt+cal>+ssel>.

$ --------------------------- $
$ tag flags in flag*LADM $
'constant'
   tused       = 0x0001,       $ tag used, must be defined sometimes
   tdefined    = 0x0002,       $ has a definition
   tpublic     = 0x0004,       $ public
   timported   = 0x0008,       $ imported => defined
   texternal   = 0x0010,       $ external
   tpermanent  = 0x0020,       $ permanent, cannot be redefined
   tpragdef    = 0x0040,       $ defined by 'pragmat'define=tag
   rmacro      = 0x0080,       $ macro rule, set by pragmat
   tnomacro    = timported|texternal|tpermanent,
   tfill       = 0x1000,       $ stack or table with fill
$ rule flags
   rside effect= 0x0100,       $ has side effect ('a','p')
   rcan fail   = 0x0200,       $ can fail ('q','p')
   rno return  = 0x0400,       $ cannot return ('e')
   rcallexit   = 0x2000,       $ calls an exit rule
   rempty      = 0x4000,       $ @root is empty (no executable rule)
   rvararg     = 0x8000,       $ rule has formal varargs
   routvararg  =0x10000,       $ has out formal vararg
   rshiftrule  =0x20000,       $ standard vararg handling routine
   rmchecking  =0x40000,       $ macro rule checking right now
   rmchecked   =0x80000,       $ macro rule checked
   rtrace    =0x1000000,       $ trace=on, show when entering the rule
   rcount    =0x2000000,       $ count=on, profiling
   rbounds   =0x4000000,       $ array indexing with bound checking
$ rule types 0x0? 0,1,2,3,4
   r func      =0,
   r action    =rside effect,
   r que       =rcan fail,
   r pred      =rside effect|rcan fail,
   r exit      =rno return,
   rtype       =rside effect|rcan fail|rno return,
$ flags go to the ice file
   ruleflags   = rtype|rvararg|routvararg|rempty|rtrace|rcount|rbounds,
   iceflags    = tpublic|timported|texternal|ruleflags.
$ macro handling 
'a'link macro rule+>tag+>dpos+>dnum.
'f'search macro rule+>tag+dpos>+dnum>.
'q'next macro rule+>tag>.
  
$ BODY ******************************************************** $
'pragmat'if=compile.
'pragmat'require=("display","pragmats","types","selector","identifier",
       "lexical","ice","buffer","input").

$ flags for predefined tags
'constant'
   rstringfl = tdefined | timported | tused | tfill |tpermanent,
   rshiftarg = rque | rshiftrule | tdefined | rvararg |timported| tpermanent,
   rgetarg   = rfunc | rshiftrule | tdefined | rvararg |timported| tpermanent,
   rrootfl   = r action | tused | tdefined | tpermanent.
   

$ ----------------------------------------------------------------- $
$ error / warning messages $
'table'MESSAGE=(
  "%p: doubly defined in "
     "the preamble (fatal)"     :preamble doubly defined
).

$ ============================================================ $
$ TTAG selectors
$
$    left,rigth   pointers for the binary search tree
$    adm          zero, or pointer to LADM or LLOC
$    lastline     the last source line, or -1 (directory)
$    text         zero or pointer to DICT (directory)

'stack'[40](left, right, adm, lastline, text ) TTAG[] = (
 "" :first tag      ,(0*),         $ top of the search tree
$ variable affixes
 "shiftaffixblock"  ,(0*):Pshift affx,
 "getaffixblockno"  ,(0*):Pget affx,
$ root, exit, string table
 "@root"            ,(0*):Proot,
 "@exit"            ,(0*):Pexit,
 "@StringTable"     ,(0*):Pstdstr,
$ special rules to be defined in stdlib
 "@make"            ,(0*):Parrow,
 "@mreq"            ,(0*):Pmreq,
 "@equal"           ,(0*):Pequal,
 "@noteq"           ,(0*):Pnot equal,
 "@more"            ,(0*):Pmore,
 "@less"            ,(0*):Pless,
 "@lseq"            ,(0*):Plseq,
$ anchor, also pointers in @StringTable
 "@":anchor tag     ,(0*):Panchor   $ not a valid tag
).

'a'enter tag+>n+tag>-y:
   $ BUFFER[] contains the characters which should be added to the TTAG structure
   pack string+BUFFER+n+TTAG, first tag->y,
   (nxt: add+y+<>TTAG+tag, compare string+TTAG+y+TTAG+>>TTAG+n,
     (n=0, unstack string+TTAG;
      n>0, left*TTAG[tag]->y,
        (y>0, :nxt;
         >>TTAG->left*TTAG[tag],
           (* -1->lastline,0->left->right->adm->text *)TTAG,>>TTAG->tag);
      right*TTAG[tag]->y,
        (y>0, :nxt;
         >>TTAG->right*TTAG[tag],
           (* -1->lastline,0->left->right->adm->text *)TTAG,>>TTAG->tag)
     )
   ).

'f'get ttag head+x>: first tag->x.
$ ============================================================ $
$ LADM selectors
$
$ tag definition (declaration, import prototype, list with filling):
$ (next,scope,defline,flag,type,repr,adm,tag)  <= tag
$    next:    pointer to the next definition of the same tag
$    scope:   TTAG: qualifier of the tag, INPUT: base
$    defline: line number of the definition (defines the BASE)
$    flag:    flag bits, depends on type
$    type:    an element of INDICATOR (from types.ale)
$    repr:    final representation of this item
$    adm:     link depending on type
$    tag:     link back to the TTAG entry
$
$    type:
$      Iconstant/Ivariable/Istatic variable:
$             adm=0,
$      Ipointer constant:
$             adm: LADM[list]; for @StringTable entry the LEXT string
$      Itable/Istack/Istatic stack: (prototype,fill,definition)
$             adm: link to list extension defined in selector.ale
$      Idatafile/Icharfile:
$             adm=0
$      Irule: adm: link to the formal affixes
$
$ macro rule entry:
$ (#,#,#,#,dpos,dnum,adm,tag)
$    dpos:     DISC position
$    dnum:     DISC line number
$    adm:      LADM link to the macro definition
$    link:     link to the next macro rule entry
$
$ affix list header:
$ (#,#,#,#,#,alen,awidth,link),type1,type2,...
$    alen:     number of affixes
$    awidth:   width of affix block (plus 2 for every formal list)
$    link:     link to the next affix list header
$
$ list extension, first entry (in selector.ale):
$ (#,#,#,#,calibre,ssel,ttag,link)
$    calibre:  list calibre, -1 if no field list
$    ssel:     standard selector
$    ttag:     0
$    link:     link to selectors
$ selector description (in selector.ale):
$ (#,#,#,#,defln,offset,ttag,link)
$    defln:    definition line (if doubly defined)
$    offset:   offset, starting from 1, left to right
$    ttag:     TTAG pointer to the selector
$    link:     next selector

'stack'[39](next,scope,defline,flag,type,repr,adm,tag)  $ tag $
           (#,#,#,#,                dpos,dnum,adm,tag)  $ macro rule entry
           (#,#,#,#,#,               alen,awidth,link)  $ affix list header
           LADM[] = (
$         flag       type       tag
  (0,0,-2,tpermanent,Itable,0,0,Pstdstr)    :Xstring table,
  (0,0,-2,tpermanent,Irule, 0,0,Proot)      :Xroot,
  (0,0,-2,tpermanent,Irule, 0,0,Pshift affx):Xshift affix,
  (0,0,-2,tpermanent,Irule, 0,0,Pget affx)  :Xget affix
).

$ ************************************************************** $
$ LLOC selectors
$ formal, local variables and labels are stored in LLOC
$   calibre: calibre of formal list, -1: no field list
$   ssel:    standard selector of formal list, -1: none
$   flag:    used in later rounds
$   ftype:   formal type, Ilocal, Ilabel
$   repr:    first pass: content of old adm*TTAG
$   ttag:    pointer to TTAG (for error messages)
'stack'[2]( calibre,ssel,flag,ftype,repr,ttag)LLOC[].

'a'create local affix+>type+>tag:
  (* type->ftype,tag->ttag,0->calibre->ssel->flag->repr *)LLOC.

$ ************************************************************** $
'p'was tag pointer+>ptr:
   $ string representation of a pointer (for messages)
   was+TTAG+ptr,previous+TTAG+ptr,copy string+TTAG+ptr+BUFFER;
   was+LADM+ptr, tag*LADM[ptr]->ptr,:was tag pointer;
   was+LLOC+ptr,ttag*LLOC[ptr]->ptr,:was tag pointer.
'p'was qtag pointer+>ptr-q-t:
  $ if qualified, put first the tag and then the qualifier
  was+LADM+ptr,scope*LADM[ptr]->q,tag*LADM[ptr]->t,
    was+TTAG+q,was+TTAG+t,previous+TTAG+q,previous+TTAG+t,
    copy string+TTAG+t+BUFFER,copy string+TTAG+q+BUFFER.

$ ************************************************************** $
$ get/set fields of LADM $
'f'get ttag+>tag+x>:   tag*LADM[tag]->x.
'f'get repr+>tag+x>:   repr*LADM[tag]->x.
'f'get adm+>tag+x>:    adm*LADM[tag]->x.
'f'get next tag+>tag+x>: next*LADM[tag]->x.
'f'get type+>tag+x>:   (=tag= [LADM],type*LADM[tag]->x;
                                     ftype*LLOC[tag]->x).
'f'get defline+>tag+x>:defline*LADM[tag]->x.

$ 'a'put ttag+>tag+>x:   x->tag*LADM[tag].
'a'put repr+>tag+>x:   x->repr*LADM[tag].
'a'put adm+>tag+>x:    x->adm*LADM[tag].
'a'put defline+>tag+>x:x->defline*LADM[tag].

$ flags $
'a'set tag flag+>tag+>flag: 
   bool or+flag*LADM[tag]+flag+flag*LADM[tag].
'q'is tag flag+>tag+>flag-x:
   bool and+flag*LADM[tag]+flag+x,x!=0.
'f'get tag flag+>tag+>mask+x>: bool and+flag*LADM[tag]+mask+x.
'a'clear tag flag+>tag+>flag-mask:
   bool invert+flag+mask,bool and+flag*LADM[tag]+mask+flag*LADM[tag].
'a'use tag+>tag:
   $ tag is used; if Ipointer then mark the associated table
   $  @StringTable pointers have the LEXT string in the adm field
   bool or+flag*LADM[tag]+tused+flag*LADM[tag],
   ((type*LADM[tag]=Ipointer constant,adm*LADM[tag]->tag,was+LADM+tag),
         bool or+flag*LADM[tag]+tused+flag*LADM[tag];
    +).

$ ************************************************************** $
$ formal affixes are stored in LADM as
$ (alen,awidth,link,  type1,...,typen,calibre1,ssel1, ...)
$              ^---- affix list pointer
$    alen:   number of formal affixes
$    awidth: total length
$    link:   link to the next affix block

'stack'LADM=(
$ alen,awidth,link
  (0,0,Ashiftblock) :Anone,         $ no affix
  (1,1,Agetblockno) :Ashiftblock,   $ shift affix block+@
      Iformal shift,
  (2,2,0)           :Agetblockno,   $ get affix blockno+n>+@
      Iformal out,Iformal shift
).      

'a'push AFFS+>x: (* x->tag *)LADM.
'q'compare AFFS+>p1+>p2-w:
   $ compare lists at p1 and p2
   alen*LADM[p1]=alen*LADM[p2],
   awidth*LADM[p1]=awidth*LADM[p2],awidth*LADM[p1]->w,(nxt:w<=0;
      incr+p1,incr+p2,tag*LADM[p1]=tag*LADM[p2],decr+w,:nxt).
'a'insert to AFFS+>old>+>top-ptr:
   $ a new affix list is at the top of LADM starting at >old
   $   check if the same block is already stored, if yes, shrink
   $   LADM to >top, and change >old>
   Anone->ptr, $ first block
   (nxt: compare AFFS+ptr+old, $ found, shring LADM
             ptr->old,unstack to+LADM+top;
         link*LADM[ptr]=0, $ end of chain, add the new list
             old->link*LADM[ptr];
         link*LADM[ptr]->ptr,:nxt).
'a'enter formal affixes+affs>-top-loc:
   $ store the affix list in LLOC, return the LADM pointer
   >>LADM->top,(* 0->awidth->alen->link *)LADM, >>LADM->affs, <<LLOC->loc,
   $ first the types followed by calibre and ssel for lists
   (nxt: loc>>>LLOC; $ affixes are there
         (=ftype*LLOC[loc]=
          [Ilabel;Ilocal],+;
          push AFFS+ftype*LLOC[loc],incr+alen*LADM[affs]),
         next+LLOC+loc,:nxt),
   $ calibre and ssel, if any
   <<LLOC->loc,
   (nxt:loc>>>LLOC;
        (=ftype*LLOC[loc]=
         [Iformal table;Iformal stack],
           push AFFS+calibre*LLOC[loc],push AFFS+ssel*LLOC[loc];
         +),
        next+LLOC+loc,:nxt),
   subtr+>>LADM+affs+awidth*LADM[affs],insert to AFFS+affs+top.
'f'get formal affixno+>tag+n>-ptr:
    $ get the number of formal affixes
    get adm+tag+ptr,alen*LADM[ptr]->n.
'f'get formal type+>tag+>n+type>-ptr:
    $ the the type of the n-th formal affix (starting at n=1)
    get adm+tag+ptr,add+ptr+n+ptr,tag*LADM[ptr]->type.
'f'get formal list ext+>tag+>n+cal>+ssel>-ptr-ptr2:
    $ the n-th formal affix is a list, get calibre and ssel
    get adm+tag+ptr,add+ptr+alen*LADM[ptr]+ptr2,incr+ptr,
    (nxt:(tag*LADM[ptr]=Iformal table;tag*LADM[ptr]=Iformal stack),
           decr+n,(n>0,incr+ptr2,incr+ptr2,incr+ptr,:nxt;+);
         decr+n,incr+ptr,:nxt),
    incr+ptr2,tag*LADM[ptr2]->cal,incr+ptr2,tag*LADM[ptr2]->ssel.

$ ************************************************************** $
$ initialize TTAG and LADM
'a'enter predefined tag+>tag-n-x-y:
  $ tag points to a string in TTAG; abort if identical entries found.
  tag=first tag;     $ search starts here; do not add
  tag=anchor tag;    $ special entry, do not add
  first tag->y,
   (nxt: add+y+<>TTAG+x,compare string+TTAG+y+TTAG+tag+n,
     (n=0,next+TTAG+tag,Xerror+0+preamble doubly defined+tag,
         internal error+_rule_;
      n>0,left*TTAG[x]->y,(y>0,:nxt;tag->left*TTAG[x]);
      right*TTAG[x]->y,(y>0,:nxt;tag->right*TTAG[x]))
   ).
'a'init tags-tag-y:
  $ add all predefined tags; create LADM structure for
  $  @StringTable, @root, shift affix block, get affix blockno.
  >>TTAG->tag,(nxt:tag<=<<TTAG;
      previous+TTAG+tag,enter predefined tag+tag,
           string width+TTAG+tag+y,subtr+tag+y+tag,:nxt),
  $ permanent tags -- cannot be redefined
  Xstring table->adm*TTAG[Pstdstr],    $ 'table'@StringTable.
   set tag flag+Xstring table+tpermanent,
   create list extension+Xstring table+-1+1, $ calibre and ssel
  Xroot->adm*TTAG[Proot],              $ 'a'@root.
   set tag flag+Xroot+rrootfl,
   get base from lineno+-1+y,y->scope*LADM[Xroot],
   put adm+Xroot+Anone,
  Xshift affix->adm*TTAG[Pshift affx], $ 'q'shift affix block+@.
   set tag flag+Xshift affix+rshiftarg,
   put adm+Xshift affix+Ashiftblock,
  Xget affix->adm*TTAG[Pget affx],     $ 'f'get affix blockno+n>+@.
   set tag flag+Xget affix+rgetarg,
   put adm+Xget affix+Agetblockno.
  
$ ************************************************************** $
$ @StringTable entries are automatically linked as the same 
$   forbidden tag @. Strings are stored only once

'q'is stdstring stored+>str+ptr>:
   get stdstring head+ptr,(nxt:ptr=0,-;
     (-eq:compare string+LEXT+str+LEXT+adm*LADM[ptr]+eq,eq=0);
     get next tag+ptr+ptr,:nxt).
'a'new stdstring+>str+>dl+c>:
   is stdstring stored+str+c,forget string+str;
   create tag definition+0+Panchor+Ipointer constant+dl+c,
    put adm+c+str,set tag flag+c+tdefined,set tag flag+c+tused,
    set tag flag+Xstring table+rstringfl.
'f'get stdstring head+ptr>:
   $ zero if no stdstring, otherwise the last LADM entry
   adm*TTAG[Panchor]->ptr.

$ ************************************************************** $
$ font / back matter pragmat strings
'variable'matters=0.
'a'add pragmat matter+>type+>str:
   $ type=1: front, type=2: back
   (* type->adm,str->repr,matters->link *)LADM, >>LADM->matters.
'q'get next matter+>ptr>+type>+str>:
   ((ptr=0,matters->ptr;link*LADM[ptr]->ptr),ptr!=0),
      adm*LADM[ptr]->type,repr*LADM[ptr]->str.

$ ------------------------------------------------------------ $
$ special rule identifier: Parrow and relations
'q'is special rule+>symb+ttag>:
  symb=Sarrow,   Parrow->ttag;
  symb=Sequals,  Pequal->ttag;
  symb=Smore,    Pmore->ttag;
  symb=Sless,    Pless->ttag;
  symb=Snotequal,Pnotequal->ttag;
  symb=Slseq,    Plseq->ttag;
  symb=Smreq,    Pmreq->ttag.
  
$ ************************************************************ $
$ store and retrieve macro

'variable'macro ptr=0.
'a'link macro rule+>tag+>dpos+>dnum:
   $ (dpos,dnum) point to Dlabel <ruletag>
   (* dnum->dnum,dpos->dpos,tag->tag,macro ptr->adm *)LADM,
   >>LADM->macro ptr.
'f'search macro rule+>tag+dpos>+dnum>-link:
   macro ptr->link,
   (nxt: link=0,internal error+_rule_;
    tag*LADM[link]=tag,dpos*LADM[link]->dpos,dnum*LADM[link]->dnum;
    get adm+link+link,:nxt).
'q'next macro rule+>tag>-link:
    macro ptr->link,(tag=0;
     (nxt:link=0;
          tag*LADM[link]=tag,get adm+link+link;
          get adm+link+link,:nxt)),
    is+link,tag*LADM[link]->tag.
    
'root'init tags.

'pragmat'endif=compile.
'end'

