$ identifiers
'pragmat'module=identifier,title="identifier v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
$
'a'pragmat ttag definition+>ttag+>dl.
   $ handle define=TAG pragmat
'q'is ttag defined+>ttag.
   $ true if the given ttag was defined
'a'create tag definition+>qf+>tag+>type+>dl+res>.
   $ create a new LADM entry, first pass
'a'check tag definition+>tag>.
   $ check LADM tag against double definition on the same level.
'a'check all ttags.
   $ check all tag entries at the end of first pass; handle fills
'a'find ttag definition+>qf+>ttag+def>.
   $ return the LADM entry which defines (qf::ttag) at current base
   $  or zero if no definition found. Error messages for
   $  double definition of missing definition
'f'get module rank+>tag+rank>.
   $ get the rank of a tag; no warning if >1 (library or predefined)

$ BODY ******************************************************** $
'pragmat'if=compile.
'pragmat'require=("display","buffer","input","tags","selector","types","symbols").

$ tag definitions
$   a tag can have several definitions with different qualifiers
$   all definitions are collected while producing the token stream.
$ Definitions: import pragmats, declarations, table fills, predefined tags
$   List selectors are not handled, only calibre and ssel is set.
$   There are no two definitions on the same level.
$
$ After the first pass only one definition is kept. For table fills
$   determine which are definitions and which are not.
$

'table'MESSAGE=(
  "%p: cannot be redefined"     :tag cannot be redefined,
  "%p: was defined at %l"       :tag doubly defined
).
'pragmat'require="selector".

'a'create tag definition+>qf+>ttag+>tp+>dl+res>-ptr:
   $ create a new LADM entry, return >>LADM. Complain if permanent
   (is+qf;get source base+qf), adm*TTAG[ttag]->ptr,
   (* ptr->next,qf->scope,dl->defline,
      0->flag,tp->type,0->repr->adm,ttag->tag *) LADM,
   >>LADM->res,
   ((is+ptr,is tag flag+ptr+tpermanent),
        0->next*LADM,error+tag cannot be redefined+ttag;
    res->adm*TTAG[ttag]).

'a'pragmat ttag definition+>ttag+>dl-ptr:
   $ 'pragmat'define=ttag, dl=-1 if command line
   adm*TTAG[ttag]->ptr,
   (nxt:ptr=0, $ not found, add and empty entry
           create tag definition+0+ttag+Iempty+dl+ptr,
           set tag flag+ptr+tpragdef;
        is tag flag+ptr+tpragdef;
        is tag flag+ptr+tdefined;
        get next tag+ptr+ptr,:nxt).

'q'is ttag defined+>ttag-ptr:
   $ true of ttag has a definition
   adm*TTAG[ttag]->ptr,
   (nxt:ptr=0,-; $ not defined
        is tag flag+ptr+tpragdef;
        is tag flag+ptr+tdefined;
        get next tag+ptr+ptr,:nxt).

'f'get qfb+>x+qf>+base>:
   $ get the qualifier and BASE of a LADM entry
   $    if has qualifier, determine BASE from defline,
   $    if no qualifier, find BASE name (srchead for main)
   $    return 0,0 for tpragdef and predefined tags
   scope*LADM[x]->qf, $ either TTAG (qualifier) or BASE
   (is tag flag+x+tpragdef,0->qf->base;  $ tpragdef entry
    qf=0,0->base;  $ predefined 
    was+TTAG+qf,get base from lineno+defline*LADM[x]+base;
    qf->base,get base name+base+qf,(is+qf;base->qf)).

$ check if a newly created tag definition is duplicate / first pass
$    check matching Q::T entries on the same base. It is duplicate
$    except when both are imported and share the same type.
'a'check tag definition+>tag>-ptr-q-b:
   (get qfb+tag+q+b,q=0); $ there was an error before - tpermanent
   get next tag+tag+ptr,
     (nxt:ptr=0;  $ OK, no conflict found
          is on level+ptr+q+b,
            (have same type+tag+ptr,check imported+tag+ptr;
             doubly defined error+tag+ptr,unlink tag+tag);
          get next tag+ptr+ptr,:nxt).

'q'is on level+>x+>q1+>b1-q-b:
    $ qualifier and base of x is (q1,b1)
    get qfb+x+q+b,q=q1,b=b1.
'q'have same type+>t1+>t2-x1-x2:
    $ tags t1 and t2 have the same type
    get type+t1+x1,get type+t2+x2,x1=x2,
    (=x1=
     [Irule], $ rules have the same rule type and formal affixes
        get tag flag+t1+rtype+x1,get tag flag+t2+rtype+x2,x1=x2,
        get adm+t1+x1,get adm+t2+x2,x1=x2;
     [Itable;Istack;Istatic stack], $ same calibre and ssel
        get calibre+t1+x1,get calibre+t2+x2,x1=x2,
        get ssel+t1+x1,get ssel+t2+x2,x1=x2;
     +).
'a'check imported+>tag>+>ptr:
    $ tag and ptr have the same type, chek if both are imports
    (is tag flag+tag+timported,is tag flag+ptr+timported),
         unlink tag+tag,reclaim tag+tag,ptr->tag;
    doubly defined error+tag+ptr,unlink tag+tag.
'a'doubly defined error+>tag+>ptr:
    $ tag is doubly defined; also called at the end of source files
    Xerror+defline*LADM[tag]+tag doubly defined+tag+defline*LADM[ptr].
'a'unlink tag+>tag-ttag-ptr-list:
    $ tag is unlinked from TTAG; remove it from the list
    get ttag+tag+ttag,adm*TTAG[ttag]->list,get next tag+tag+ptr,
    (nxt:list=tag,ptr->adm*TTAG[ttag];
         list=0,internal error+_rule_; $ should not happen
         next*LADM[list]=tag,ptr->next*LADM[list];
         get next tag+list+list,:nxt).
'a'reclaim tag+>tag:
    $ recycle tag if it is the top element of LADM
    tag=>>LADM,unstack+LADM;+.

$ ****************************************************************
$ check all tag entries at the end of the first pass for double
$    definitions.

'a'check all ttags-head:
    $ initialize tree traversing
    get ttag head+head,check dble ttag+head.
'a'check dble ttag+>y-x:
    $ traverse the tree and call check single ttag for each entry
    y=0;
    add+y+<>TTAG+x,check dble ttag+left*TTAG[x],
       check single ttag+x,       $ definitions at the same base
       canonize defs+adm*TTAG[x], $ in module M replace M::T by T
       right*TTAG[x]->y,:check dble ttag.
'a'check single ttag+>ttag-ptr-deleted:
    $ merge definitions at the same base, or complain
    $ restart when an entry is deleted
    adm*TTAG[ttag]->ptr,(nxt:ptr=0;
        check single tag+ptr+deleted,
           (is+deleted,:check single ttag; $ start it again
            get next tag+ptr+ptr,:nxt)).
'a'check single tag+>tag+deleted>-ptr-q-b:
    $ merge definitions at the same base
    get qfb+tag+q+b,get next tag+tag+ptr,
      (nxt:ptr=0,0->deleted; $ no problem 
       is on level+ptr+q+b,1->deleted, $ tag is deleted
           (have same type+tag+ptr,check imported+tag+ptr;
            doubly defined error+tag+ptr,unlink tag+tag);
       get next tag+ptr+ptr,:nxt).
'a'canonize defs+>ptr-q:
    $ in module M replace definition M::T by T (no qualifier)
    ptr=0;
    ((is tag flag+ptr+tdefined,scope*LADM[ptr]->q,was+TTAG+q),
      canonize single tag+ptr+q;+),
      get next tag+ptr+ptr,:canonize defs.
'a'canonize single tag+>ptr+>qf-b-name:
    (get base from lineno+defline*LADM[ptr]+b,
     get base name+b+name,name=qf),b->scope*LADM[ptr];+.

$ -------------------------------------------------------------- 
$ find a definition of a tag used at base M
$ a) looking at definitions BELOW M
$    M=> T (no qualifier) matching N=> M::T
$    M=> Q::T matching             N=> Q::T and Q=> T
$ b) looking at definitions ABOVE M
$    M=> T (no qualifier) matching N=> T, N=> M::T
$    M=> Q::T matching             N=> Q::T and Q=> T
$
'variable'BASE0=0. $ set to the lowest base by 'root'.

'q'match tag below+>base+>bname+>tag+rank>-tb:
    $ id to be searched is at base (with id bname), no qualifier
    $     base is not BASE0
    $ tag is STRICLY below base, it must have M::T
    is tag flag+tag+tdefined, $ must be a definition
    scope*LADM[tag]->tb,is+tb,tb=bname,
      get base from lineno+defline*LADM[tag]+tb,
      find rank above+tb+base+rank,rank>0,
      find rank above+BASE0+tb+rank.
'q'match qtag below+>base+>qf+>tag+rank>-tb-tbname:
    $ qf::id to be matched at base
    $ either qf is the tag qualifier, or it is tag's module name
    is tag flag+tag+tdefined,  $ must be a definition
    scope*LADM[tag]->tb,is+tb, $ not predefined tag
    (qf=tb,get base from lineno+defline*LADM[tag]+tb,
           find rank above+tb+base+rank,rank>0,
           find rank above+BASE0+tb+rank;
     get base name+tb+tbname,tbname=qf,
           find rank above+tb+base+rank,rank>0,
           find rank above+BASE0+tb+rank).

'q'match tag above+>base+>bname+>tag+rank>-tb:
    $ id to be searched is at base (with id bname), no qualifier
    $ if tag is a matching definition return the rank
    is tag flag+tag+tdefined,  $ must be a definition
    scope*LADM[tag]->tb,
     (tb=0,0->rank; $ predefined, matching at level zero
      $ if tag has a qualifier it must match bname
      was+TTAG+tb,tb=bname,get base from lineno+defline*LADM[tag]+tb,
            find rank above+base+tb+rank,rank>=0;
      $ tag has no qualifier, it is a match
      find rank above+base+tb+rank,rank>=0).
'q'match qtag above+>base+>qf+>tag+rank>-tb-tbname:
    $ qf::id to be matched at base
    $ either qf is the tag qualifier, or it is tag's module name
    is tag flag+tag+tdefined,
    scope*LADM[tag]->tb,is+tb, $ predefined does not match
    (qf=tb,get base from lineno+defline*LADM[tag]+tb,
            find rank above+base+tb+rank,rank>=0;
     get base name+tb+tbname,tbname=qf,
            find rank above+base+tb+rank,rank>=0).


'table'MESSAGE=(
"%q%p: multiply defined (%l and %l)" :not unique definition,
"%q%p: not defined"                  :ttag not defined
).

'p'find definition below+>base+>qf+>id+def1>-r-rank1-def2-rank2-ptr-bname:
    $ find a definition of (qf::id) below base
    $   give error message for two minimal rank definitions
    base=BASE0,-; $ fail at the lowest level
    adm*TTAG[id]->ptr,-1->rank1->rank2,0->def1->def2,
    get base name+base+bname,
    (nxt:ptr=0,rank1>=0,(rank2=-1;rank1<rank2;
             error+not unique definition+qf+id+defline*LADM[def1]+defline*LADM[def2],
               0->def1);
         (is+qf,match qtag below+base+qf+ptr+r;
          match tag below+base+bname+ptr+r), $ can be a definition
              ((rank1<0;r<=rank1),rank1->rank2,def1->def2,r->rank1,ptr->def1;+),
              get next tag+ptr+ptr,:nxt;
         get next tag+ptr+ptr,:nxt).
'p'find definition above+>base+>qf+>id+def1>-r-rank1-def2-rank2-ptr-bname:
    $ find a definition of (qf::id) at or above base
    $  give error message for two minimal rank definitions
    adm*TTAG[id]->ptr,-1->rank1->rank2,0->def1->def2,
    get base name+base+bname,
    (nxt:ptr=0,rank1>=0,(rank2=-1;rank1<rank2;
            error+not unique definition+qf+id+defline*LADM[def1]+defline*LADM[def2],
                0->def1);
         (is+qf,match qtag above+base+qf+ptr+r;
          match tag above+base+bname+ptr+r),
            ((rank1<0;r<=rank1),rank1->rank2,def1->def2,r->rank1,ptr->def1;+),
            get next tag+ptr+ptr,:nxt;
         get next tag+ptr+ptr,:nxt).
'a'find ttag definition+>qf+>ttag+def>-base:
    $ find the definition of (qf::ttag), zero if not found with error messages
    get source base+base,
      (find definition below+base+qf+ttag+def; $ there is a definition below
       find definition above+base+qf+ttag+def; $ there is a definition above
       error+ttag not defined+qf+ttag,0->def).

$ -------------------------------------------------------------- 
$ if tag is defined but not used, give a warning when it has 
$   rank zero or one
'f'get module rank+>tag+rank>-base:
    $ find the rank of a tag; for >=2 do not give warning
    (get qfb+tag+#+base,base=0),2->rank;
    find rank above+BASE0+base+rank.


'root'get base from lineno+-1+BASE0.

'pragmat'endif=compile.
'end'

