$ check macros
'pragmat'module="macros".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH)
$
$  (C) 2020-2022, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ******************************************************* $
$ read from DISC and check that macros do not call each other
$
'a'check macro rules.

$ BODY ********************************************************* $
'pragmat'if=compile.
'pragmat'require=("display","disc","tags").

'table'MESSAGE=(
  "rule %p: unbounded macro substitution":recursive macro call
).

'a'skip source:
  Q cons+#;
  (Q+Dlwb;Q+Dupb;Q+Dvlwb;Q+Dvupb;Q+Dcalibre),must Qtag+#;
  Q+Dsub,must Qtag+#,skip source,mustQ+Dbus,(Qtag+#;must Qcons+#);
  Q+Dnoarg;
  must Qtag+#.
'a'skip affixes:
  Q+Dplus,skip source,:skip affixes;+.

'a'rule body:
  (Q+Dlabel,must Qtag+#;+),
  (Q+Dlocal,Qskip+Dcolon;+),
  (Q+Dbox,Qskip+Dbox,classification;
   alt sequence).
'a'classification:
  mustQ+Darea,Qskip+Darea,mustQ+Dcomma,alternative,
    (Q+Dsemicolon,:classification;+).
'a'alternative:
   member,(Q+Dcomma,:alternative;+).
'a'alt sequence:
   alternative,(Q+Dsemicolon,:alt sequence;+).
 'a'member-tag:
   Q+Dopen,rule body,mustQ+Dclose;
   Q+Dextension,Qskip+Dextension;
   Q+Djump,must Qtag+#;
   Q+Dplus;
   Q+Dminus;
   must Qtag+tag,(is tag flag+tag+rmacro,check macro rule+tag;+),
      skip affixes.

'a'check macro rule+>tag-dpos-dnum-mp-mn:
   $ tag is a macro
   is tag flag+tag+rmchecked;
   is tag flag+tag+rmchecking,
     error+recursive macro call+tag,clear tag flag+tag+rmchecking,
     set tag flag+tag+rmchecked;
   set tag flag+tag+rmchecking,save disc position+dpos+dnum,
     search macro rule+tag+mp+mn,restore disc position+mp+mn, 
     rule body,clear tag flag+tag+rmchecking,set tag flag+tag+rmchecked,
     restore disc position+dpos+dnum.

'a'check macro rules-tag:
   0->tag,(nxt:next macro rule+tag,check macro rule+tag,:nxt;+).

'root'+.

'pragmat'endif=compile.

'end'

