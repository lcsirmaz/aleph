$ rule body
'pragmat'module=rulebody,title="rule body v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ******************************************************* $
$
'a'rule body+>tag.
   $ write rule body to DISC; rule tag in LADM, formal affixes in LLOC 
'a'root body.
   $ write root body to DISC
'f'get rule tag+tag>.
   $ _RULE_ constant: return TTAG or 0

$ BODY ********************************************************* $
'pragmat'if=compile.
'pragmat'require=("symbols","tags","types","lexical","disc",
    "number","selector","display","pragmats").

'table'MESSAGE=(
  "symbol %p is expected here"     :expected,
  "symbol %p is expected after %p" :expected after,
  "tag expected after %p"          :tag expected after,
  "tag expected"                   :tag expected,
$  "cannot call %p"                 :cannot call,
  "source or tag expected"         :source or tag expected,
  "in extension selector expected" :selector tag expected,
  "after extension tag expected"   :stack tag expected,
  "wrong affix form"               :wrong affix form,
  "rule %p: unknown label %p"      :unknown label,
  "rule %p: formal affix %p repeated":duplicate formal affix,
  "source expected after %p"       :source expected,
  "formal selector %p*%p not defined":undefined formal selector,
  "affix %p is not table or stack" :not a formal list,
  "rule %p: member expected"       :member expected,
  "rule %p: no formal anchor affix":no formal anchor affix,
  "rule %p: zone syntax (cannot be empty)" :wrong zone,
  "classification has no cases"    :empty classification
  
).

$ ------------------------------------------------------ $
$ general error handling:
$  clear local error+old>:
$        remembers the error number
$  was local error+>old:   
$        true if there was an error since then
$  suspend Errors+>n ... suspend Errors+0
$        stop issuing error messages after n >=1 errors;
$        resume error messages after "suspend Errors+0"

$ ------------------------------------------------------ $
$ the rule tag (LADM) and the formal anchor affix (LLOC), if any
'variable'rule tag=0,empty rule=0,formal anchor affix=0.
$ ------------------------------------------------------ $
$ local affixes $
$  ftype: Ilocal,Iformal XXX:   repr: old content of adm*TTAG[ttag]
$         Ilocal anchor:        ttag: "@"
$         Ilabel:               ttag: the label
$

'stack'(calibre,ssel,flag,ftype,repr,ttag) LLOC=().
  $ () is added so it is not a prototype

$ make adm*ttag point to loc, store old content at repr*LLOC
'a'set local repr+>loc-ttag:
   ttag*LLOC[loc]->ttag,adm*TTAG[ttag]->repr*LLOC[loc],loc->adm*TTAG[ttag].
$ restore adm*ttag to the old value
'a'restore local repr+>loc-ttag:
   ttag*LLOC[loc]->ttag,repr*LLOC[loc]->adm*TTAG[ttag].
$ create the initial range; LLOC has an entry for each formal affix
'a'set up local stack+>rtag-loc-ttag:
   <<LLOC->loc,0->formal anchor affix,
   (nxt:loc>>>LLOC; $ figure out formal anchor
     ftype*LLOC[loc]=Iformal anchor,loc->formal anchor affix,next+LLOC+loc,:nxt;
     $ otherwise replace ttag = ttag*LLOC[loc] to point to loc
     set local repr+loc, $check for duplicate formal affixes
     (was+LLOC+repr*LLOC[loc],error+duplicate formal affix+rtag+loc;+),
     next+LLOC+loc,:nxt),
   $ add rule tag as label
   get ttag+rtag+ttag,create local affix+Ilabel+ttag,D+Dlabel,Dttag+ttag.
$ close the range; restore formal and local affixes
'a'close local stack:
   >>LLOC<<<LLOC;
   (ftype*LLOC=Ilabel;ftype*LLOC=Iformal anchor;restore local repr+>>LLOC),
   unstack+LLOC,:close local stack.
'a'open local range+>label+old>: $ label is a TTAG
   >>LLOC->old,
   (label=0;
    create local affix+Ilabel+label,D+Dlabel,Dttag+label).
'a'add local affix+>ttag:
   create local affix+Ilocal+ttag,set local repr+>>LLOC.
'a'close local range+>old:
   >>LLOC<=old; $ ftype*LLOC can be Ilocal or Ilabel
   (ftype*LLOC=Ilocal,restore local repr+>>LLOC;+),
   unstack+LLOC,:close local range.
$ ----------------------------------------------------- $
$ handle formal/local affixes; they have no qualifier
'f'get formal affix+>qf+>tag+loc>:
    $ find if tag is a formal/local affix
    (qf=0,adm*TTAG[tag]->loc,was+LLOC+loc);
    0->loc.
'p'is qltag+qf>+tag>+loc>:
    is qtag+qf+tag,get formal affix+qf+tag+loc.
'a'Dqloc+>qf+>tag+>loc:
    $ write either tag or the formal affix
    loc=0,Dqtag+qf+tag;Dtag+loc.
'a'must formal list+>loc:
    $ if formal/local, it must be stack or table
    loc=0;
    (=ftype*LLOC[loc]=
      [Iformal table;Iformal stack],+;
      Error+not a formal list+loc).
$ ----------------------------------------------------- $
$ check if it is an extension. The alternate syntax is
$ ambiguous; go ahead and retrieve the list tag and its type
$   (* 0->s1->s2 *) STACK
$   ( * 0->s1->s2 *STACK, ... )

$ skip over an index [a*b[32]]
'a'skip over an index:
   R+Ssub,skip over source+#,
     (R+Sbus;Error+expected+Sbus);
   +.
$ skip over a source; single=1 if this is a single tag
'a'skip over source+single>-symb-qf:
   0->single,inpt->symb,
    (is number+#+#;
     is qtag+qf+#,
               ((qf=0,R+Sasterisk),(is qtag+#+#,skip over an index;
                                    Error+tag expected after+Sasterisk);
               ahead+Ssub,skip over an index;
               1->single);
     (R+Slwb;R+Supb;R+Svlwb;R+Svupb;R+Scalibre),
                  (is qtag+#+#;Error+tag expected after+symb);
     Error+source or tag expected).
$ skip over target selectors (there must be at least one)
'a'skip over destination:
   R+Sarrow,(nxt:is ttag+#,(R+Sarrow,:nxt;+);
                 Error+selector tag expected);
   Error+expected+Sarrow.
$ skip over an extension
$  ex      : if set, allow "*) STACK" extended syntax
$  qf+tag  : the STACK, tag=0 if there was an error
$  simple  : set if the extended syntax was used
'a'skip over extension+>ex+qf>+tag>+simple>+err>:
   clear local error+err,0->qf->tag->simple,init restore,
   suspend Errors+3, $ throw at most three errors in this block
   Rskip+Sasterisk,
   (nxt:skip over source+#,skip over destination,
         (R+Scomma,:nxt;+)),
   $ * STACK or *) STACK
   must+Sasterisk,
   ((is+ex,R+Sclose),1->simple;+),
   (is qtag+qf+tag;Error+stack tag expected),
   suspend Errors+0,  $ allow error messages from here
   (was local error+err,forget restore,skip all,1->err;
    make restore,0->err).

$ check whether this is an affix form, transport or relation
$   ttag is zero if an affix form, 
$   TTAG entry for -> and relations
'a'peek after source+ttag>+err>-single tag:
   clear local error+err,init restore,0->ttag,suspend Errors+2,
   skip over source+single tag,
     (is special rule+inpt+ttag;
      is+single tag;
      Error+wrong affix form),
   suspend Errors+0,
   (was local error+err,forget restore,skip all,1->err;
    make restore,0->err).
$ ----------------------------------------------------- $
$ search "tag" as a label; complain if not found
'a'search jump+>tag-loc:
   >>LLOC->loc,(nxt:
      loc<<<LLOC,error+unknown label+rule tag+tag;
      (ftype*LLOC[loc]=Ilabel,ttag*LLOC[loc]=tag),D+Djump,Dtag+loc;
      previous+LLOC+loc,:nxt).
'p'terminator-x:
  R+Splus,D+Dplus;
  R+Sminus,D+Dminus;
  R+Sexit,Dttag+Pexit,D+Dplus,source+Pexit;
  R+Scolon,(is ttag+x,search jump+x;error+tag expected after+Scolon).

$ SEL*LIST [ index ] ==>
$  Dsub Dtag(LIST) <index> Dbus Dtag/Dcons
'a'index source+>qf+>tag+>loc:
   must formal list+loc,
   (R+Ssub,D+Dsub,Dqloc+qf+tag+loc,source+tag,D+Dbus,
      (R+Sbus;Error+expected after+Sbus+tag);
    D+Dsub,Dqloc+qf+tag+loc,D+Dupb,Dqloc+qf+tag+loc,D+Dbus).
$ emit the selector after the index value
'a'selector+>sel+>tag+>loc-offs:
   loc=0,Dttag+sel;
   must formal list+loc,
    (find temp selector+sel+loc+offs,Dcons+offs;
     error+undefined formal selector+sel+tag).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
$ a list tag is expected after <L, <<L, <>L, >L, >>L
'a'list tag+>x-qf-tag-loc:
   is qltag+qf+tag+loc,must formal list+loc,Dqloc+qf+tag+loc;
   Error+tag expected after+x.
'a'source+>tag-qf-x-y-loc:
   is number+x+#,D+x; $ constant pointer
   is qltag+qf+x+loc,
        ((qf=0,R+Sasterisk),  $ x is a selector
              (is qltag+qf+y+loc,index source+qf+y+loc,selector+x+y+loc;
               Error+tag expected after+Sasterisk);
         ahead+Ssub,index source+qf+x+loc,selector+x+x+loc;
         Dqloc+qf+x+loc);
   R+Slwb,D+Dlwb,list tag+Slwb;
   R+Supb,D+Dupb,list tag+Supb;
   R+Svlwb,D+Dvlwb,list tag+Svlwb;
   R+Svupb,D+Dvupb,list tag+Svupb;
   R+Scalibre,D+Dcalibre,list tag+Scalibre;
   Error+source expected+tag,skip all.
$ actual affix can be a string, dummy argument # or ?, or a source
'a'source or string+>tag-x-c-dl:
   is string+x,get linenum+dl,new stdstring+x+dl+c,$ c and Xstring table
      D+Dplus,Dtag+Xstring table,D+Dplus,Dtag+c;
   R+Snoarg,D+Dplus,D+Dnoarg;
   D+Dplus,source+tag.
'p'anchor affix:
   R+Sanchor,(is+formal anchor affix,D+Dplus,Dtag+formal anchor affix;
      error+no formal anchor affix+rule tag).
'a'affix form-qf-ttag:
   is qtag+qf+ttag,Dqtag+qf+ttag,0->empty rule,
$ do not complain if @root is called
$         (ttag=Proot,error+cannot call+ttag;+),
          (nxt:R+Splus,(anchor affix; $this must be the last affix $
                        source or string+ttag,:nxt);+);
   error+tag expected,skip all.
'a'special affix form+>tag-err:
   Dqtag+0+tag,D+Dplus,0->empty rule,clear local error+err,source+tag,
     (was local error+err;next symbol), $ skip -> or the relation
     D+Dplus,source+tag,
     (tag=Parrow,(nxt:R+Sarrow,D+Dplus,source+tag,:nxt;+);+).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'to selectors+>tag+>loc-sel:
   R+Sarrow,(nxt:is ttag+sel,D+Dto,selector+sel+tag+loc,(R+Sarrow,:nxt;+);
                 error+tag expected after+Sarrow,skip all);
   error+expected+Sarrow.

'a'extension+>qf+>tag-loc:
   get formal affix+qf+tag+loc,must formal list+loc,0->empty rule,
   D+Dextension,Dqloc+qf+tag+loc,Rskip+Sasterisk,
   (nxt:source+tag,to selectors+tag+loc,(R+Scomma,D+Dcomma,:nxt;+)),
   D+Dextension,Rskip+Sasterisk,Rskip+Sclose,Rskip+qf,Rskip+Squalifier,Rskip+tag.
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'q'looking at a member:
   =inpt=
   [Sopen;                   $ compound member or extension
    Sasterisk;               $ extension
    Slwb;Supb;Svlwb;Svupb;Scalibre; $ limit
    NUMBER;TTAG              $ constant or tag
   ],+;
   -.
'a'member-qf-tag-simple-err:
   R+Sopen,(ahead+Sasterisk, $ check for (* ... *)STACK
               skip over extension+1+qf+tag+simple+err,
               (is+err;   $ error
                is+simple,extension+qf+tag;
                compound member);
            compound member);
   ahead+Sasterisk,skip over extension+0+qf+tag+#+err,
          (is+err;extension+qf+tag);
   peek after source+tag+err,
          (is+err;is+tag,special affix form+tag;affix form).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'peek label+label>:
   init restore,0->label,
      (is ttag+label,(ahead+Scolon;ahead+Sminus;0->label);+),
      make restore.
'a'skip label+>label:
   is+label,Rskip+label,Rskip+Scolon;+.
'a'add local affixes-tag:
   init restore,
     ((R+Sminus,is ttag+#),make restore,D+Dlocal,
        (nxt:R+Sminus,(is ttag+tag,Dttag+tag,add local affix+tag,:nxt;
                error+tag expected after+Sminus,skip all);
             R+Scolon,D+Dcolon;
             error+expected+Scolon,skip all);
      make restore).
'a'compound member-label-loc:
   D+Dopen,
   peek label+label,open local range+label+loc,
   skip label+label,add local affixes,
   (R+Sbox,classification;alternative series),
   (R+Sclose;error+expected+Sclose,skip all),
   D+Dclose,close local range+loc.
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'alternative:
   terminator;
   looking at a member,member,(R+Scomma,D+Dcomma,:alternative;+);
   error+member expected+rule tag.
'a'alternative series:
   alternative,(R+Ssemicolon,D+Dsemicolon,:alternative series;+).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'area-qf-x-empty:
   0->empty, $ classifier cannot have formal/local affixes
   (is qtag+qf+x,Dqtag+qf+x;is number+x+#,D+x;1->empty),
   (R+Scolon,0->empty,D+Dcolon,
     (is qtag+qf+x,Dqtag+qf+x;is number+x+#,D+x;+);+),
   (is+empty, error+wrong zone+rule tag;+),
   (R+Ssemicolon,D+Dsemicolon,:area;
    must+Sbus).
'a'class+last>:
   R+Ssub,0->last,D+Darea,area,D+Darea,D+Dcomma,
     (R+Scomma;error+expected+Scomma),
     alternative;
   1->last,D+Darea,D+Dcolon,D+Darea,D+Dcomma,alternative.
$ classification: we are after =
'a'classification-err-last-cnt:
  D+Dbox,0->empty rule,clear local error+err,0->cnt,source+Sbox,D+Dbox,
    (R+Sbox;error+expected+Sbox),
    (nxt:class+last,(is+last;R+Ssemicolon,D+Dsemicolon,incr+cnt,:nxt;+)),
    (was local error+err,skip all;last=0;cnt=0,error+empty classification;+).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'f'get rule tag+tag>:
   $ get rule tag as a string; built-in string for _rule_
   is+rule tag,get ttag+rule tag+tag;0->tag.
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'rule pragmats+>tag:
   (is pragmat value+pgt trace,set tag flag+tag+rtrace;+),
   (is pragmat value+pgt count,set tag flag+tag+rcount;+),
   (is pragmat value+pgt bounds,set tag flag+tag+rbounds;+).
'a'rule body+>tag:
   $ tag is a LADM, formal affixes are in LLOC
   tag->rule tag,rule pragmats+rule tag,
   set up local stack+tag,1->empty rule,
   (ahead+Sminus,add local affixes;
    R+Scolon;
    error+expected+Scolon,skip all),
   (R+Sbox,classification; alternative series),
   D+Dpoint,close local stack,0->rule tag,
   (is+empty rule,set tag flag+tag+rempty;+),
   (R+Spoint;error+expected+Spoint,skip to point).

'a'root body-dl:
   Xroot->rule tag,0->formal anchor affix,
   get linenum+dl,put defline+Xroot+dl,
   D+Droot,Dtag+Xroot,rule pragmats+Xroot,scratch+LLOC,
   set up local stack+Xroot,1->empty rule,add local affixes,
   (R+Sbox,classification; alternative series),
   D+Dpoint,close local stack,0->rule tag,
   (is+empty rule,set tag flag+Xroot+rempty;+),
   (R+Spoint;error+expected+Spoint,skip to point).

'root'+.
'pragmat'endif=compile.
'end'



