$ rule body
'pragmat'module="rulebody".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH)
$
$  (C) 2020-2022, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ******************************************************* $
$
'a'rule body+>tag+>repaffix.
   $ write rule body to DISC; rule tag, repeat affix block 
'a'root body.
   $ write root body to DISC
'a'get rule tag+string>.
   $ _rule_ constant: return a LEXT pointer with the rule tag

$ BODY ********************************************************* $
'pragmat'if=compile.
'pragmat'require=("symbols","tags","types","lexical","disc",
    "display","pragmats").

'table'MESSAGE=(
  "symbol %p is expected here"     :expected,
  "symbol %p is expected after %p" :expected after,
  "tag expected after %p"          :tag expected after,
  "tag expected"                   :tag expected,
  "source or tag expected"         :source or tag expected,
  "in extension selector expected" :selector tag expected,
  "after extension tag expected"   :stack tag expected,
  "wrong affix form"               :wrong affix form,
  "rule %p: unknown label %p"      :unknown label,
  "source expected after %p"       :source expected,
  "formal selector %p not defined" :undefined formal selector,
  "rule %p: member expected"       :member expected,
  "formal affix %p as an actuel rule":formal as rule,
  "rule %p: no formal repeat affix":no formal repeat affix,
  "rule %p: zone syntax (cannot be empty)" :wrong zone,
  "classification has no cases"    :empty classification
  
).

$ ------------------------------------------------------ $
$ dont'give cumulative error messages
'variable'suppress messages=0.

'a'Eerror+*+>msg:
  is+suppress messages;
  1->suppress messages,error+*.
'a'clear errors:
   0->suppress messages.
'q'had errors:
   is+suppress messages.
'pragmat'macro=(Eerror,clear errors,had errors).
$ ------------------------------------------------------ $
$ the rule tag and the formal repeat affix, if any
'variable'rule tag=0,formal repeat affix=0.
$ ------------------------------------------------------ $
$ local affixes $
$  (orepr,  otype,flag,type,repr,tag) LLOC <== formal/local
$  (calibre,ssel, flag,type,repr,tag) LLOC <== formal lists

'stack'(orepr=calibre,otype=ssel,flag,type,repr,tag) LLOC=().
  $ the empty () is added to prevent exporting this stack

$ retrieve formal calibre and ssel
'a'handle formal list+>formal:
  =type*LLOC=
  [Iformal stack;Iformal table],
     get formal calibre+formal+calibre*LLOC,
     get formal ssel+formal+ssel*LLOC;
  +.
$ open a range
'a'set up local stack+>rtag+loc>-formal:
   scratch+LLOC,get adm+rtag+formal,
   $ formal affixes $
   (nxt: formal=0;
     (*0->flag->repr,type*LADM[formal]->type,formal->tag,0->orepr->otype *)LLOC,
     handle formal list+formal,put repr+formal+>>LLOC,
     get adm+formal+formal,:nxt),
   >>LLOC->loc,
   $ add rule tag as label
   D+Dlabel,Dtag+rtag,
   (* 0->flag->repr,Ilabel->type,rtag->tag,0->orepr->otype *)LLOC.
'a'open new local range+>label+old>:
   >>LLOC->old,
   (label=0;
    (* 0->flag->repr->orepr->otype,Ilabel->type,label->tag *)LLOC,
       D+Dlabel,Dtag+label).
'a'add local affix+>tag-orepr-otype:
   get repr+tag+orepr,get type+tag+otype,
   (* 0->flag->repr,Ilocal->type,tag->tag,orepr->orepr,otype->otype *)LLOC,
   put type+tag+Ilocal,put repr+tag+>>LLOC.
'a'close local range+>old:
   >>LLOC<=old;
   $ type*LLOC can be Ilocal,ILabel,or some formal value $
   (type*LLOC=Ilocal,put repr+tag*LLOC+orepr*LLOC,
           put type+tag*LLOC+otype*LLOC;+),   
   unstack+LLOC,:close local range.
$ ----------------------------------------------------- $
$ check if it is an extension. The alternate syntax is
$ ambiguous; go ahead and retrieve list tag and its type
$   (* 0->s1->s2 *) STACK
$   ( * 0->s1->s2 *STACK, ... )

$ skip over an index [a*b[32]]
'a'skip over an index:
   R+Ssub,skip over source+#,
     (R+Sbus;Eerror+expected+Sbus);
   +.
$ skip over a source; single=1 if this is a single tag
'a'skip over source+single>-symb:
   0->single,inpt->symb,
    (is cons+#;
     is tag+#,(R+Sasterisk,(is tag+#,skip over an index;
                  Eerror+tag expected after+Sasterisk);
               ahead+Ssub,skip over an index;
               1->single);
     (R+Slwb;R+Supb;R+Svlwb;R+Svupb;R+Scalibre),
                  (is tag+#;Eerror+tag expected after+symb);
     Eerror+source or tag expected).
$ skip over target selectors (there must be at least one)
'a'skip over destination:
   R+Sarrow,(nxt:is tag+#,(R+Sarrow,:nxt;+);
     Eerror+selector tag expected);
   Eerror+expected+Sarrow.
$ skip over an extension
$  >ex     : if set, allow "*) STACK" extended syntax
$  tag>    : the STACK
$  simple> : set if the extended syntax was used
'a'skip over extension+>ex+tag>+simple>:
   clear errors,0->tag->simple,init restore,
   Rskip+Sasterisk,
   (nxt:skip over source+#,skip over destination,
         (R+Scomma,:nxt;+)),
   $ * STACK or *) STACK
   must+Sasterisk,
   ((is+ex,R+Sclose),1->simple;+),
   (is tag+tag;Eerror+stack tag expected),
   (had errors,forget restore,skip all;make restore).
$ check whether this is an affix form, tranport or relation
$  tag is zero if affix form, Xarrow for ->, and other
$  LADM entry for other relation
'a'peek after source+tag>-single tag:
   clear errors,init restore,0->tag,skip over source+single tag,
     (is special rule+inpt+tag;
      is+single tag;
      Eerror+wrong affix form),
   (had errors,forget restore,skip all;make restore).
$ ----------------------------------------------------- $

$ search "tag" as a label; complain if not found
'a'search jump+>tag-loc:
   >>LLOC->loc,(nxt:
      loc<<<LLOC,error+unknown label+rule tag+tag;
      (type*LLOC[loc]=Ilabel,tag*LLOC[loc]=tag),D+Djump,Dtag+loc;
      previous+LLOC+loc,:nxt).
'p'terminator-x:
  R+Splus,D+Dplus;
  R+Sminus,D+Dminus;
  R+Sexit,Dtag+Xexit,use tag+Xexit,
     D+Dplus,clear errors,source+Xexit;
  R+Scolon,(is tag+x,search jump+x;error+tag expected after+Scolon).

$ SEL*LIST [ index ] ==>
$  Dsub Dtag(LIST) <index> Dbus Dtag/Dcons
'a'index source+>tag:
   R+Ssub,D+Dsub,Dtag+tag,source+tag,D+Dbus,
      (R+Sbus;Eerror+expected after+Sbus+tag);
   D+Dsub,Dtag+tag,D+Dupb,Dtag+tag,D+Dbus.
$ emit the selector after the index value
'a'selector+>sel+>tag-type-repr:
   pack selector+sel+tag+sel,
     (has formal type+tag,get type+sel+type,
        (type=Iformal selector,get repr+sel+repr;-1->repr),
        $ repr=-1: selector not defined
        (repr>0,D cons+repr;
         error+undefined formal selector+sel);
      Dtag+sel).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
$ a list tag is expected after <L, <<L, <>L, >L, >>L
'a'list tag+>x-tag:
   is tag+tag,use tag+tag,Dtag+tag;
   Eerror+tag expected after+x.
'a'source+>tag-x-y:
   is cons+x,Dcons+x;
   is tag+x,(R+Sasterisk,
                (is tag+y,index source+y,use tag+y,selector+x+y;
                 Eerror+tag expected after+Sasterisk);     
             ahead+Ssub,index source+x,use tag+x,selector+x+x;
             use tag+x,Dtag+x);
   R+Slwb,D+Dlwb,list tag+Slwb;
   R+Supb,D+Dupb,list tag+Supb;
   R+Svlwb,D+Dvlwb,list tag+Svlwb;
   R+Svupb,D+Dvupb,list tag+Svupb;
   R+Scalibre,D+Dcalibre,list tag+Scalibre;
   Eerror+source expected+tag,skip all.
$ actual affix can be a string, dummy argument # or ?, or a source
'a'source or string+>tag-x-c:
   is string+x,new stdstring+x+c,$ c and Xstring table are used
      D+Dplus,Dtag+Xstring table,D+Dplus,Dtag+c;
   R+Snoarg,D+Dplus,D+Dnoarg;
   R+Senquiry,D+Dplus,D+Dnoarg; $ +? is the same as +# 
   D+Dplus,source+tag.
'p'repeat affix:
   R+Sasterisk,(is+formal repeat affix,D+Dplus,Dtag+formal repeat affix;
      error+no formal repeat affix+rule tag).
'a'affix form-tag:
   is tag+tag,(has formal type+tag,error+formal as rule+tag,skip all;
       Dtag+tag,use tag+tag,clear errors,
          (nxt:R+Splus,(repeat affix; $this must be the last affix $
                        source or string+tag,:nxt);+));
   error+tag expected,skip all.
'a'special affix form+>tag:
   Dtag+tag,use tag+tag,D+Dplus,clear errors,source+tag,
     (had errors;next symbol), $ skip -> or the relation
     D+Dplus,source+tag,
     (tag=Xarrow,(nxt:R+Sarrow,D+Dplus,source+tag,:nxt;+);+).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'to selectors+>tag-sel:
   R+Sarrow,(nxt:is tag+sel,D+Dto,selector+sel+tag,(R+Sarrow,:nxt;+);
                 Eerror+tag expected after+Sarrow,skip all);
   Eerror+expected+Sarrow.
'a'extension+>tag:
   D+Dextension,use tag+tag,Dtag+tag,Rskip+Sasterisk,clear errors,
   (nxt:source+tag,to selectors+tag,(R+Scomma,:nxt;+)),
   D+Dextension,Rskip+Sasterisk,Rskip+Sclose,Rskip+tag.

'q'looking at a member:
   =inpt=
   [Sopen;                   $ compound member or extension $
    Sasterisk;               $ extension $
    Slwb;Supb;Svlwb;Svupb;Scalibre; $ limit $
    CONST;TTAG               $ constant or tag $
   ],+;
   -.
'a'member-tag-simple:
   R+Sopen,(ahead+Sasterisk, $ check for (* ... *)STACK
               skip over extension+1+tag+simple,
               (had errors; $ error
                is+simple,extension+tag;
                compound member);
            compound member);
   ahead+Sasterisk,skip over extension+0+tag+#,
          (had errors;extension+tag);
   peek after source+tag,
          (had errors;is+tag,special affix form+tag;affix form).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'peek label+label>:
   init restore,0->label,
      (is tag+label,(ahead+Scolon;ahead+Sminus;0->label);+),
      make restore.
'a'skip label+>label:
   is+label,Rskip+label,Rskip+Scolon;+.
'a'add local affixes-tag:
   init restore,
     ((R+Sminus,is tag+#),make restore,D+Dlocal,
        (nxt:R+Sminus,(is tag+tag,Dtag+tag,add local affix+tag,:nxt;
                error+tag expected after+Sminus,skip all);
             R+Scolon,D+Dcolon;
             error+expected+Scolon,skip all);
      make restore).
'a'compound member-label-loc:
   D+Dopen,
   peek label+label,open new local range+label+loc,
   skip label+label,add local affixes,
   (R+Sbox,classification;alternative series),
   (R+Sclose;error+expected+Sclose,skip all),
   D+Dclose,close local range+loc.
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'alternative:
   terminator;
   looking at a member,member,(R+Scomma,D+Dcomma,:alternative;+);
   error+member expected+rule tag.
'a'alternative series:
   alternative,(R+Ssemicolon,D+Dsemicolon,:alternative series;+).
'a'classifier-x-empty:
   0->empty,
   (is tag+x,Dtag+x,use tag+x;is cons+x,Dcons+x;1->empty),
   (R+Scolon,0->empty,D+Dcolon,
     (is tag+x,Dtag+x,use tag+x;is cons+x,Dcons+x;+);+),
   (is+empty, error+wrong zone+rule tag;+),
   (R+Ssemicolon,D+Dsemicolon,:classifier;
    must+Sbus).
'a'area+last>:
   R+Ssub,0->last,D+Darea,classifier,D+Darea,D+Dcomma,
     (R+Scomma;Eerror+expected+Scomma),
     alternative;
   1->last,D+Darea,D+Dcolon,D+Darea,D+Dcomma,alternative.
$ classification: we are after =
'a'classification-last-cnt:
  D+Dbox,clear errors,0->cnt,source+Sbox,D+Dbox,
    (R+Sbox;Eerror+expected+Sbox),
    (nxt:area+last,(is+last;R+Ssemicolon,D+Dsemicolon,incr+cnt,:nxt;+)),
    (had errors,skip all;last=0;cnt=0,error+empty classification;+).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'get rule tag+string>:
   $ get rule tag as a string; built-in string _rule_
   is+rule tag,get tag+rule tag+string,previous+TTAG+string,
        copy string+TTAG+string+LEXT,>>LEXT->string;
   Squote image->string.
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $
'a'rule pragmats+>tag:
   (is pragmat value+pgt trace,set tag flag+tag+rtrace;+),
   (is pragmat value+pgt count,set tag flag+tag+rcount;+),
   (is pragmat value+pgt bounds,set tag flag+tag+rbounds;+).
'a'rule body+>tag+>repaffix-loc:
   tag->rule tag,repaffix->formal repeat affix,
   D+Drule,Dtag+rule tag,rule pragmats+rule tag,
   set up local stack+tag+loc,
   (ahead+Sminus,add local affixes;
    R+Scolon;
    error+expected+Scolon,skip all),
   (R+Sbox,classification; alternative series),
   D+Dpoint,close local range+loc,0->rule tag,
   (R+Spoint;error+expected+Spoint,skip to point).

'a'root body-loc:
   Xroot->rule tag,0->formal repeat affix,
   D+Droot,Dtag+Xroot,rule pragmats+Xroot,
   set up local stack+Xroot+loc,add local affixes,
   (R+Sbox,classification; alternative series),
   D+Dpoint,close local range+loc,0->rule tag,
   (R+Spoint;error+expected+Spoint,skip to point).

'root'+.
'pragmat'endif=compile.
'end'



