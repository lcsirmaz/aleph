$ standard ALEPH library -- hash routines
'pragmat'module=stdlib,title="jslib simple hash".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v1.0)
$
$  (C) 2020-2025, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
$ hash functions
$ Simple hash producing a word size hash
$   string hash+t+p+hash  computes a hash value for the string
$   block hash+t+p+hash   computes a hash from t[p+1] until the end
'f' string hash+t[]+>p+hash>,
    block hash+t[]+>p+hash>.
$ BODY ******************************************************** $
'pragmat'if=compile,library mode=on.
$ hashing
'x''f'string hash+t[]+>p+hash>       ="a_StringHash",
      block hash+t[]+>p+hash>        ="a_BlockHash".
'pragmat'front matter=
"function a_StringHash(F1,F2,A){%n"
" const ii=F1.offs+F2;const w=F1.data[ii]-1;%n"
" const u=new Uint8Array(F1.buffer,4*(ii-w),4*w);%n"
" let v1=0x135345+47*u[0],v2=0xeca864+856*u[0];%n"
" for(let i=0;u[i]!=0;i++){%n"
"   v1=(29*v1+17*v2+1259*(u[i]^v2))%0x1010309;%n"
"   v2=(23*v2+257*v1+1237*(u[i]^v1))%0x1010507;%n"
" }%n"
" A[0]=(v1<<16)^v2;%n"
"}%n"
"function a_BlockHash(F1,F2,A){%n"
" const ii=F1.offs+F2+1;const w=4*(F1.aupb-F2);%n"
" const u=new Uint8Array(F1.buffer,4*ii,w);%n"
" let v1=0x135345,v2=0xeca864;%n"
" for(let i=0;i<w;i++){%n"
"   v1=(29*v1+17*v2+1259*(u[i]^v2))%0x1010309;%n"
"   v2=(23*v2+257*v1+1237*(u[i]^v1))%0x1010507;%n"
" }%n"
" A[0]=(v1<<16)^v2;%n"
"}".

'root'+.

'pragmat'endif=compile.
'end'

