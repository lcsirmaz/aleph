$ standard ALEPH library -- basic externals and constants
'pragmat'module=stdlib,title="jslib base",library mode=on.

$ *************************************************************
$  This code is part of ALEPH-M (Modular js ALEPH-v1.0)
$
$  (C) 2020-2025, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
$ Arithmetic Functions
$   return the result of the operation without checking overflow
'f' add+>x+>y+z>, subtr+>x+>y+z>,
    mult+>x+>y+z>,addmult+>x+>y+>z+u>,
    div+>x+>y+z>,divrem+>x+>y+z>+u>,incr+>x>,decr+>x>,
    getabs+>x+y>,max+>x+>y>,min+>x+>y>.
$ Arithmetic Comparisons including built-in ones, such as
$   a=b    is replaced by    @equal+a+b
$   a<=b   is replaced by    @lseq+a+b
$   a!=b   is replaced by    @noteq+a+b
'q' equal+>x+>y,not equal+>x+>y,less+>x+>y,lseq+>x+>y,
    more+>x+>y,mreq+>x+>y,
    @equal+>x+>y,@noteq+>x+>y,@less+>x+>y,@lseq+>x+>y,
    @more+>x+>y,@mreq+>x+>y.
$ Assignment
$   src -> t1 -> t2 -> t2  is replaced by    @make+src+t1+t2+t3
'f' @make+>from+@+to>.
$ Boolean Operations
$   false, true
'cons'false=0,true=1.
$   is+x        true if x is not zero,
$   is true+x   true if x is not zero
$   is false+x  true if x is zero
'q' is+>x,is true+>x,is false+>x.
$   left clear+>x>+>n   shifts x by n>=0 positions to the left including
$                       the sign bit; zeroes enter from the low bits
$   right clear+>x>+>n  shifts x by n>=0 position to the right,
$                       zeroes enter from left, clears the sign bit
'f' bool invert+>x+y>,bool and+>x+>y+z>,bool or+>x+>y+z>,
    bool xor+>x+>y+z>,left clear+>x>+>n,right clear+>x>+>n.
$ Stacks and Tables
$   null pointer. It is checked as is+ptr, so it MUST be zero.
'cons'nil=0.
$   was+t+p         true if p points to the actual address space of t
$   next+t+p        increase p by the calibre of t (next block)
$   previous+t+p    decrease p by the calibre of t (previous block)
$   list length+t+p number of actual elements in t (in words, not blocks)
$   unstack+st      the rightmost block of st is deleted
$   unstask to+st+p the top of the stack is moved to p 
$   scratch+st      all elements of st are removed
$   release+st      elements of st are removed, the memory is released
$   request space+st+n  the stack has at least n additional words over the top
'q' was+t[]+>p.
'f' next+t[]+>p>,previous+t[]+>p>,list length+t[]+n>.
'a' unstack+[]st[],unstack to+[]st[]+>p,
    scratch+[]st[],release+[]st[].
'p' request space+[]st[]+>n.
$ Strings
$   string length+t+p+n   number of characters in the string (zero or more)
$   string width+t+p+n    number of words occupied by the string
$   previous string+t+p   decrease p by the width of the string
$   compare string        the returned value >0, =0, <0 indicates the relationship
$   compare string n      compares the first n characters only
$   string elem           return the n-th characters of the string starting at
$                            zero. Fail is n<0 or >= string length
$   unstack string+st     the topmost string is removed
$   pack string+t+n+to    the top n elements of t[] are characters, which are
$                            packed to a string, added to the top of stack to.
$   unpack string+t+p+to  characters of the string are added to the top of the stack to
$   copy string+t+p+to    the string is added to the top of stack to.
'f' string length+t[]+>p+n>,string width+t[]+>p+n>,
    previous string+t[]+>p>,
    compare string+t1[]+>p1+t2[]+>p2+comp>,
    compare string n+t1[]+>p1+t2[]+>p2+>n+comp>.
'q' string elem+t[]+>p+>n+chr>.
'a' unstack string+[]st[],pack string+from[]+>p+[]to[],
    unpack string+from[]+>p+[]to[],copy string+from[]+>p+[]to[].
$ File input/output
$   character values
'cons'newline=10,newpage=12.
'cons'same line=-1,rest line=-2.
$   open file         open the file given by the string; mode is /r/
$                         for read, /w/ for write, /a/ for append (char only)
$   open temp file    create a temp file
$   close file        close the file
$   unlink file       delete the file given by the string
$   get file error    retrieve the last error code associated with the file
$   get file pos      retrieve file position, -1 on error
$   set file pos      set file position - only if opened for read
'p' open file+""f+>mode+t[]+>p.
'p' open temp file+""f+[]st[]+>p.
'a' close file+""f.
'a' unlink file+t[]+>p.
'f' get file error+""f+err>.
'f' get file pos+""f+pos>.
'a' set file pos+""f+>pos.
$ Character transput
$   STDIN,STDOUT         standard input and output files
$   get char+""f+char>   retrieves the next character
$   put char+""f+>char   puts the character to the file
$   ahead char+""f+char> peek to the next character
'p' get char+""f+char>, ahead char+""f+char>.
'a' put char+""f+>char.
$ Data transput
'cons'numerical=0,pointer=1.
$   get data+""F+D>+T>   read the next word from the data file F
$   put data+""f+>D+>T   put word D of type T to the data file, abort if error
$   put datap+""f+>D+>T  same as put data; fail if F is not datafile, or D is a
$                            pointer not in the list.
'p' get data+""f+data>+type>.
'a' put data+""f+>data+>type.
'p' put datap+""f+>data+>type.
$ Exit routines
$   exit+>code           terminate program execution with code "code".
'e'exit+>code,@exit+>code.
$ Backtrack
$   backtrack            if linked with -g, prints the calls; otherwise nop
'a'backtrack.

$ BODY ******************************************************** $
'pragmat'if=compile,library mode=on.
$
$ external rule string syntax
$ external rule string first character:
$   letter:  use the string as a procedure name to be called
$      with the standard ALEPH parameter passing mechanism
$      for each used name generate an extern prototype
$   @ symbol: a sequence of 0/1 digits is created for each out affix
$      whether it is dummy or not. Search the string for a matching
$      @01010, start the replacing process from that point.
$   @@make and @@waitfor: special handling
$   other (including space) If the rule is question or predicate, skip
$      to the next @ character if generating the negated condition.
$      Copy by replacement until the end or the first @ character.
$      #1 ... #9 #a ... #z copy numbered actual affix (1 .. 35)
$      #, add  ",a_Ltr" if linked with stack trace, otherwise nothing
$      #0 all "a_Ltr" if linked with stack trace, otherwise nothing
$      #> ignore; at the beginning indicates an async external rule
$      ## the # sign
$
$ functions with only dummy out affixes and questions with no branching
$      are optimized out.

$ 'pragmat'front matter="// Some routines can be added here".

$ arithmetic operators
'x''f'add+>x+>y+z>            ="#3=#1+#2",	$ x+y -> x
      subtr+>x+>y+z>          ="#3=#1-#2",	$ x-y -> z
      mult+>x+>y+z>           ="#3=#1*#2",	$ x*y -> z
      addmult+>x+>y+>z+u>     ="#4=#1*#2+#3",	$ x*y+z -> u
      div+>x+>y+z>            ="#3=(#1/#2)|0",	$ x/y -> z
      divrem+>x+>y+z>+u>      =			$ x/y -> z, x%y-> u
      "@00@01#4=#1%#2@10#3=(#1/#2)|0@11{const ar=#1%#2;#3=(#1/#2)|0;#4=ar;}",
      incr+>x>                ="#1++",		$ x+1 -> x
      decr+>x>                ="#1--",		$ x-1 -> x
      getabs+>x+y>            ="#2=Math.abs(#1)",$ |x| -> y
      max+>x+>y>              =" if(#1>#2){#2=#1;}",$ max(x,y) -> y
      min+>x+>y>              =" if(#1<#2){#2=#1;}".$ min(x,y) -> y
$ relations
'x''q'equal+>x+>y	="#1==#2@#1!=#2",	$ x = y
      @equal+>x+>y	="#1==#2@#1!=#2",
      not equal+>x+>y	="#1!=#2@#1==#2",	$ x != y
      @noteq+>x+>y	="#1!=#2@#1==#2",
      less+>x+>y	="#1<#2@#2<=#1",	$ x < y
      @less+>x+>y	="#1<#2@#1>=#2",
      lseq+>x+>y	="#1<=#2@#1>#2",	$ x <= y
      @lseq+>x+>y	="#1<=#2@#1>#2",
      more+>x+>y	="#1>#2@#1<=#2",	$ x > y
      @more+>x+>y	="#1>#2@#1<=#2",
      mreq+>x+>y	="#1>=#2@#1<#2",	$ x >= y
      @mreq+>x+>y	="#1>=#2@#1<#2".
$ assignment
'x''f'@make+>f+@+to>	="@@make".	$ assignment
$ boolean operators
'x''q'is+>x		="#1@!#1",	$ x != 0
      is true+>x	="#1@!#1",	$ x != 0
      is false+>x	="!#1@#1".	$ x == 0
'x''f'bool invert+>x+y>       ="#2=~#1",	$ ~x -> y
      bool and+>x+>y+z>       ="#3=#1&#2",	$ x&y -> z
      bool or+>x+>y+z>        ="#3=#1|#2",	$ x|y -> z
      bool xor+>x+>y+z>       ="#3=#1^#2",	$ x^y -> z
      left clear+>x>+>n       ="#1<<=#2",	$ x<<n -> x
      right clear+>x>+>n      ="#1>>>=#2".	$ x>>n -> x
$ stacks and tables
'x''q'was+t[]+>p              ="#1.alwb<=#2&&#2<=#1.aupb@#2<#1.alwb||#2>#1.aupb".
'x''f'next+t[]+>p>            ="#2+=#1.calibre",
      previous+t[]+>p>        ="#2-=#1.calibre",
      list length+t[]+p>      ="#2=#1.aupb-#1.alwb+#1.calibre".
'x''a'unstack+[]st[]          ="#1.aupb-=#1.calibre",
      unstack to+[]st[]+>p    ="#1.aupb=#2",
      scratch+[]st[]          ="#1.aupb=#1.alwb-#1.calibre_a_scratch",
      release+[]st[]          ="#1.free()".
'x''p'request space+[]st[]+>n ="a_RequestSpace".
$ strings
'x''f'string length+t[]+>p+n>        ="#3=#1.get(#2-1)",
      string width+t[]+>p+n>         ="#3=#1.get(#2)",
      previous string+t[]+>p>        ="#2-=#1.get(#2)",
      compare string+t1[]+>p1+t2[]+>p2+comp>   ="#5=a_CompareString(#1,#2,#3,#4)",
      compare string n+t1[]+>p2+t2[]+>p2+>n+comp> ="#6=a_CompareStringN(#1,#2,#3,#4,#5)".
'x''q'string elem+t[]+>p+>n+c>       ="a_StringElem".
'x''a'unstack string+[]st[]          ="#1.aupb-=#1.get(#1.aupb)",
      pack string+t[]+>p+[]st[]      ="a_PackString",
      unpack string+t[]+>p+[]st[]    ="a_UnpackString",
      copy string+t[]+>p+[]st[]      ="a_CopyString".
$ files
'x''p'open file+""f+>mode+t[]+>p     ="a_openfile".
'x''p'open temp file+""f+[]st[]+>p   ="a_opentempfile".
'x''a'close file+""f                 ="a_closefile".
'x''a'unlink file+t[]+>p             ="a_unlinkfile".
'x''f'get file error+""f+err>        ="#2=#1.errno".
'x''f'get file pos+""f+pos>          ="#2=#1.filepos".
'x''a'set file pos+""f+>pos          ="a_setfilepos".
'x''p'get char+""f+char>             ="#>a_getchar(#1,#2)@!#>a_getchar(#1,#2)".
'x''p'ahead char+""f+char>           ="#>a_aheadchar(#1,#2)@!#>a_aheadchar(#1,#2)".
'x''a'put char+""f+>char             ="a_putchar".
'x''p'get data+""f+data>+type>       ="a_getdata".
'x''a'put data+""f+>data+>type       ="a_putdata".
'x''p'put datap+""f+>data+>type      ="a_putdatap".
$ exit with optional backtrack 
'x''e'exit+>code                     =" a_exit(#1#,)",
      @exit+>code                    =" a_exit(#1#,)".
$ backtack 
'x''a'backtrack                      =" a_PrintStackFrame(#0)".

'root'+.
'pragmat'endif=compile.
'end'
