$ standard ALEPH library -- command-line arguments
'pragmat'module=stdlib,title="libC stdarg".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2.1)
$
$  (C) 2020-2024, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
$ command line argument strings in reverse order
'table'STDARG.

$ BODY ******************************************************** $
'pragmat'if=compile,library mode=on.

'pragmat'front matter="static void a_setup_stdarg(int,const char*,int);".
'x''table'STDARG="a_setup_stdarg".
'pragmat'back matter=
"extern int a_argc; extern char **a_argv;%n"
"static int a_push_string_to(int F1,char*ptr){"
" int n,w;int*goal;char*to;%n"
" #define st to_LIST(F1)%n"
" w=0;n=12;for(to=ptr;*to;to++){n++;if((*to&0xC0)!=0x80)w++;}"
" n/=4;if(!a_requestspace(F1,n))return 0;%n"
" goal=&(st->offset[1+st->aupb]);to=(char*)goal;"
" goal[n-1]=n;goal[n-2]=w;goal[n-3]=0;st->aupb+=n;"
" while(*ptr)*to++=*ptr++;%n"
" #undef st%n"
" return 1;"
"}%n"
"static void a_setup_stdarg(int F1,const char*name,int F2){%n"
" int i;%n"
" #define st to_LIST(F1)%n"
" st->name=name;st->offset=st->p=0;st->length=0;"
" st->vlwb=a_virtual_max+16;a_virtual_max+=65436;"
" if(a_virtual_max<=0) a_fatal(a_FATAL_memory);%n"
" st->vupb=a_virtual_max-1;st->calibre=F2;"
" st->alwb=st->vlwb;st->aupb=st->alwb-st->calibre;%n"
"  for(i=a_argc-1;i>0;i--){"
"   if(a_push_string_to(F1,a_argv[i])==0)a_fatal(a_FATAL_memory);"
" }%n"
" #undef st%n"
"}".


'root'+.

'pragmat'endif=compile.
'end'

