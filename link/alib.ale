$ 'pragmat'trace=off,overflow=off,count=off.
'pragmat'library=on.

$ programs
?put line'a'put line+""f+T[]+>n-i:
    (n=rest line;put char+f+n),<<T->i,previous+T+i,incr+i,
    (nxt:i<=>>T,put char+f+T[i],incr+i,:nxt;+).
?put string'a'put string+""f+T[]+>x-y-z:
    0->y,
    (nxt:string elem+T+x+y+z,incr+y,put char+f+z,:nxt;+).
?put as string'a'put as string+""f+T[]+>x-y-z:
    0->y,put char+f+/"/,
    (nxt:string elem+T+x+y+z,incr+y,(z=/"/,put char+f+z;+),
            put char+f+z,:nxt;put char+f+/"/).
?put int'a'put int+""f+>n: $ min int: -2147483648, max int=2147483647
    n=min int,@put int+f+147483648+/-/+10,put char+f+/2/;
    n>0,@put int+f+n+/ /+10;
    n=0,@put int+f+n+/0/+10;
    get abs+n+n,@put int+f+n+/-/+10.
?@put int'a'@put int+""f+>n+>ch+>m-q-r:
    m=0;
    n=0,decr+m,@put int+f+0+/ /+m,put char+f+ch;
    decr+m,divrem+n+10+q+r,@put int+f+q+ch+m,add+r+/0/+r,put char+f+r.
?get int'p'get int+""f+n>-ch-sign:
    (nxt:get char+f+ch,(=ch=
       [newline;sameline;newpage;/ /],:nxt;
       [/+/],1->sign,0->n;
       [/-/],-1->sign,0->n;
       [/0/:/9/],1->sign,subtr+ch+/0/+n;
       0->sign,0->n);
     -),
    (nxt:ahead char+f+ch,(=ch=
     [/0/:/9/],addmult+n+10+ch+n,(get char+f+#,:nxt;+);
     +)),
    (=sign=[0],0->n;[0:],+;subtr+0+n+n).
?get line'p'get line+""f+[]T[]+n>-ch:
    get char+f+ch,(=ch=[newline;sameline;newpage],ch->n;
                       restline->n,(*ch->T*)T),
    (next:ahead char+f+ch,(=ch=[newline;sameline;newpage;132],+;
     *ch->T*T,(get char+f+ch,:nxt;+))
    ).

$ standard argument,stdin,stdout
?STDARG 'x''table'STDARG="@stdarg".
?STDIN  'charfile'STDIN =>"stdin".
?STDOUT 'charfile'STDOUT="stdout">.
$ arithmetic functions
?add    'x''f'add+>x+>y+z>	 ="add".          $ x+y -> z
?subtr  'x''f'subtr+>x+>y+z>	 ="subtr".        $ x-y -> z
?mult   'x''f'mult+>x+>y+z>	 ="mult".         $ x*y -> z
?addmult'x''f'addmult+>x+>y+>z+u> ="addmult".      $ x*y+z -> y
?div    'x''f'div+>x+>y+z>	 ="div".          $ x/y -> z
?divrem 'x''f'divrem+>x+>y+z>+u> ="divrem".       $ x/y -> z, x%y -> u
?incr   'x''f'incr+>x>		 ="incr".         $ x++
?decr   'x''f'decr+>x>		 ="decr".         $ x--
?getabs 'x''f'getabs+>x+y>	 ="getabs".       $ |x| -> y
?max    'x''f'max+>x+>y>	 ="max".          $ max(x,y)->y
?min    'x''f'min+>x+>y>	 ="min".          $ min(x,y)->y
?false    'cons'false=0.
?true     'cons'true=1.
?min int  'cons'min int=0x80000000.
?max int  'cons'max int=0x7fffffff.
?int size 'cons'int size=10.

?is           'x''q'is+>x                ="@is".
?bool invert  'x''f'bool invert+>x+y>    ="boolivert".
?bool and     'x''f'bool and+>x+>y+z>    ="booland".
?bool or      'x''f'bool or+>x+>y+z>     ="boolor".
?bool xor     'x''f'bool xor+>x+>y+z>    ="boolxor".
?is true      'x''q'is true+>x           ="@istrue".
?is false     'x''q'is false+>x          ="@isfalse".
?extract bits 'x''f'extract bits+>x+>y+z>="extractbits".
?left clear   'x''f'left clear+>x>+>n    ="leftclear".
?right clear  'x''f'right clear+>x>+>n   ="rightclear".

$stack and tables
?nil          'cons'nil=0.
?was          'x''q'was+t[]+>p           ="@was".
?next         'x''f'next+t[]+>p>         ="@next".
?previous     'x''f'previous+t[]+>p>     ="@previous".
?list length  'x''f'list length+t[]+p>   ="@listlength".
?unstack      'x''a'unstack+[]st[]       ="@unstack".
?unstack to   'x''a'unstack to+[]st[]+>p ="@unstackto".
?scratch      'x''a'scratch+[]st[]       ="@scratch".
?release      'x''a'release+[]st[]       ="@release".
?request space'x''p'request space+[]st[]+>n="@requestspace".
?expand stack 'x''a'expand stack+[]st[]+*+>v ="@expandstack".

$ strings
?string length   'x''f'string length+t[]+>p+n> ="stringlength".
?string width    'x''f'string width+t[]+>p+n> ="stringwidth".
?previous string 'x''f'previous string+t[]+>p> ="previousstring".
?compare string  'x''f'compare string+t1[]+>p1+t2[]+>p2+comp> ="comparestring".
?compare string n'x''f'compare string n+t1[]+>p1+t2[]+>p2+>n+comp> ="comparestringn".
?string elem     'x''q'string elem+t[]+>ptr+>n+c> ="stringelem".
?unstack string  'x''a'unstack string+[]st[]="unstackstring".
?pack string     'x''a'pack string+from[]+>p+[]to[]="packstring".
?unpack string   'x''a'unpack string+from[]+>p+[]to[]="unspackstring".
?copy string     'x''a'copy string+from[]+>p+[]to[]="copystring".

$ file input/output
?newline        'cons'newline=10.
?sameline       'cons'sameline=-1.
?rest line      'cons'rest line=-2.
?newpage        'cons'newpage=12.
?simple hash    'x''f'simple hash+t[]+>p+res>  ="simplehash".
?get char       'x''p'get char+""f+char>       ="@getchar".
?put char       'x''a'put char+""f+>char       ="@putchar".
$ ?fill data file 'x''a'fill data file+""f+*+>lwb+>upb+t[]+>p="@filldatafile".
?open file      'x''p'open file+""f+>mode+t[]+>p="@openfile".
?close file     'x''a'close file+""f           ="@closefile".
?unlink file    'x''a'unlink file+t[]+>p       ="@unlink".
?numerical      'cons'numerical=0.
?pointer        'cons'pointer=1.
?put datap      'x''p'put datap+""f+>data+>type="@putdatap".
?put data       'x''a'put data+""f+>data+>type ="@putdata".
?get data       'x''p'get data+""f+data>+type> ="@getdata".
?get file error 'x''f'get file error+""f+err>  ="@getfileerror".
?get file pos   'x''f'get file pos+""f+pos>    ="@getfilepos".
?set file pos   'x''a'set file pos+""f+>pos    ="@setfilepos".
?ahead char     'x''a'ahead char+""f+char>     ="@aheadchar".

$ relations
?@make  'x''f'@make+>f+*+to>    ="@@make".
?@equal 'x''q'@equal+>x+>y      ="@@equal".
?@noteq 'x''q'@noteq+>x+>y      ="@@noteq".
?@more  'x''q'@more+>x+>y       ="@@more".
?@lseq  'x''q'@lseq+>x+>y       ="@@lseq".
?@less  'x''q'@less+>x+>y       ="@@less".
?@mreq  'x''q'@mreq+>x+>y       ="@@mreq".

$ exit
?exit 'x''e'exit+>x = "@exit".


'end'

