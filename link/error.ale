$ error handling rules
'pragmat'module="error".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH)
$
$  (C) 2020-2022, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER *********************************************** $
'a'error+*+>msg.
'a'warning+*+>msg.
'a'message+*+>msg. $ --help and --version
'e'fatal error+*+>msg.
'e'internal error+T[]+>rule+>lineno.
'e'corrupted ice file+T[]+>file+>lineno.
'q'was error.
'table'MESSAGE.

$ BODY ************************************************* $
'pragmat'if=compile.
'pragmat'require=("input","lexical","item","target").

'table'MESSAGE=(
  "too many errors, further messages are suppressed" :too many errors,
  "internal error at rule "   :fatal head,
  " line %d, aborted"         :fatal tail,
  ".ice file %p corrupt (%d/" :corrupted head,
  "), aborted"                :corrupted tail
).
$ messages go here $
'charfile' PRINTFILE="stdout">.
'variable'prpos=0.

'a'print char+>ch: 
   incr+prpos,put char+PRINTFILE+ch.
'a'nlcr: 
   prpos<=1,1->prpos;
   0->prpos,print char+newline.
'a'tab line+>pos:
   prpos=pos;
   prpos>pos,nlcr,:tab line;
   print char+/ /,:tab line.

$ simple output $
'a'print int+>n:
   $ print n in decimal; min int does not end with 9
   n=min int, print char+/-/,subtr+-1+n+n,print int1+n+/1/;
   n<0, print char+/-/,get abs+n+n,print int1+n+/0/;
   print int1+n+/0/.
'a'print int1+>n+>c-q-r:
   divrem+n+10+q+r,(q=0; print int1+q+/0/),
        add+r+c+r, print char+r.
'a'print form+>n: print form1+n+4.
   $ print n for 4 places
'a'print form1+>n+>m -q-r:
   m=0;
   decr+m,divrem+n+10+q+r,print form1+q+m,add+r+/0/+r,print char+r.
'a'print+T[]+>p-n:
   $ print a string
   was+T+p,put string+PRINTFILE+T+p,
     string length+T+p+n,add+prpos+n+prpos;
   +.
$ formatted printing $
'a'print pointer+>ptr:
   ptr=0,print+"[NULL]";
   was+MESSAGE+ptr,print+MESSAGE+ptr;
   was+STDARG+ptr,print+STDARG+ptr;
   was+LEXT+ptr,get tag image+ptr+ptr,print+LEXT+ptr;
   internal error+_rule_+_line_.
'a'print base+>str-obuff-ptr:
   >>BUFFER->obuff,
   (was+LEXT+str,get tag image+str+str,
        unpack string+LEXT+str+BUFFER;
    was+STDARG+str,
        unpack string+STDARG+str+BUFFER;
    internal error+_rule_+_line_),
   >>BUFFER->ptr,
   $ go back until / or \
   (nxt: ptr<=obuff;
         BUFFER[ptr]=///;BUFFER[ptr]=/\/;BUFFER[ptr]=/:/;
         decr+ptr,:nxt),incr+ptr,
   $ print until the first dot
   (nxt: ptr>>>BUFFER;BUFFER[ptr]=/./;
         print char+BUFFER[ptr],incr+ptr,:nxt),
   unstack to+BUFFER+obuff.
'a'print item+>item-line-source-module:
   $ print item as "0034/aleph (aleph)"
   find item lineno+item+line+source+module,
   (line<=0;print form+line),
   (source=Squote image;
    print char+///,print base+source),
   print char+/ /,print char+/(/,print pointer+module,print char+/)/.
'a'print line+>l-line-source:
   $ error in this module; print "0034/static"
   find lineno+l+line+source,
   (line<=0;print form+line),
   (source=Squote image;print char+///,print base+source).

'a'format print+*+>fmt-optr-ptr:
   >>BUFFER->optr,unpack string+MESSAGE+fmt+BUFFER,add+optr+1+ptr,
   (nxt:>>BUFFER<ptr;
          BUFFER[ptr]!=/%/,print char+BUFFER[ptr],incr+ptr,:nxt;
          incr+ptr,(>>BUFFER<ptr,print char+/%/;
                    (=BUFFER[ptr]=
                     [/p/],(shift affix block+*,print pointer+fmt;print+"[?]"),incr+ptr,:nxt;
                     [/i/],(shift affix block+*,print item+fmt;print+"[?]"),incr+ptr,:nxt;
$                     [/f/],(shift affix block+*,print form+fmt;print+"[?]"),incr+ptr,:nxt;
                     [/l/],(shift affix block+*,print line+fmt;print+"[?]"),incr+ptr,:nxt;
                     [/d/],(shift affix block+*,print int+fmt;print+"[?]"),incr+ptr,:nxt;
                     [/n/],print char+newline,incr+ptr,:nxt;
                     print char+BUFFER[ptr],incr+ptr,:nxt))),
   (shift affix block+*,print+"[...]";+),
   unstack to+BUFFER+optr.

$ error handling ******************************************** $
'variable'error no=0.
'constant'maximal errors=51.
'constant'message col=16.

'q'was error: error no>0.

'a'message head+>M-ice:
  nlcr,print char+M,print char+/ /,get ice file+ice,
  (ice=0;print base+ice),
  (M=/F/,print char+///,print form+source line;+),
  print char+/ /,tab line+message col.

'a'error+*+>mess:
   error no>=maximal errors;
   message head+/E/,format print+*,nlcr,incr+error no,
    (error no<maximal errors;
     message head+/F/,format print+too many errors,nlcr).
'a'warning+*+>mess:
   error no>=maximal errors;
   message head+/W/,format print+*,nlcr.
'a'message+*+>mess:
   format print+*,nlcr,incr+error no.

'e'fatal error+*+>mess:
   message head+/F/,format print+*,nlcr,delete target,exit+3.
'e'corrupted ice file+T[]+>source+>line-ice:
   message head+/F/,get ice file+ice,format print+corrupted head+ice+line,
   print+T+source,format print+corrupted tail,nlcr,delete target,exit+3.
'e'internal error+T[]+>rule+>line:
   message head+/F/,format print+fatal head,print+T+rule,
   format print+fatal tail+line,nlcr,delete target,exit+64.

'root'+.

'pragmat'endif=compile.
'end'
