$ data.ale 
'pragmat'module=data,title="data, v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ******************************************************
$ handle data:
$  expression, fill, list, file $

'a'data section i.
$  read data section for the first time; collect expressions;
$    file and list daclarations.
'a'data section ii.
$  read data section second time; determine fill size and
$    relative offsets of pointer constants
$    store external strings, front and back matter
'a'data section iii.
$  generate fill data
'a'skip data section.
$  skip the data section
'a'loose bounds.
$  prepare seize estmates for each list after first scan
'a'distribute virtual address.
$  compute virtual limits and pointer constants
'a'assign repr numbers.
$  give representation number for items

$ BODY ********************************************************
'pragmat'if=compile.
'pragmat'require=("number","arithm","error","item","lexical","expr","config","target").

'f'get item def+>item>:
    is item flag+item+timported,repr*ITEM[item]->item;+.

'a'skip entry:
   R+Dpoint;
   R+Dend,corrupt ice file+_rule_;
   next symbol,:skip entry.

$ *************************************************************
$ skip data section *******************************************
'a'skip data section:
    (nxt:R+Dfill,skip entry,:nxt;
         R+Dexpression,skip entry,:nxt;
         R+Dlist,skip entry,:nxt;
         R+Dfile,skip entry,:nxt;
         R+Dbackmatter,skip entry,:nxt;
         R+Dfrontmatter,skip entry,:nxt;
         R+Dexternal,skip entry,:nxt;
         inpt=Drule;
         corrupt ice file+_rule_).

$ *************************************************************
$ read data section first time ********************************
$ store all expressions, list estimates, complete file data
$   link table fills (@StringTable has no declaration)
$   check fill syntax
$   read externals at the next round
'a'data section i:
    $ first scan: store expressions, list and file data, externals
    was error;
    (nxt:R+Dfill,skip fill,:nxt;
         R+Dexpression,read expression,:nxt;
         R+Dlist,list entry,:nxt;
         R+Dfile,file entry,:nxt;
         R+Dbackmatter,skip entry,:nxt;
         R+Dfrontmatter,skip entry,:nxt;
         R+Dexternal,skip entry,:nxt;
         inpt=Drule;
         corrupt ice file+_rule_).

$ sanitary checking -------------------------------------------
'constant'tnodef=timported|texternal.

'a'check list type+>item:
    (=type*ITEM[item]=
      [Itable;Istack;Istatic stack],is item flag+item+tnodef;
      +), corrupt ice file+_rule_;
    +.
'a'check constant type+>item+>strict:
    (=type*ITEM[item]=
       [Ipointer constant],(strict=1;is item flag+item+tnodef);
       [Iconstant],is item flag+item+tnodef;
       +),
        corrupt ice file+_rule_;
     +.
'a'check fill constant type+>item:
    $ allow external constants in a fill block
    (=type*ITEM[item]=
       [Ipointer constant],is item flag+item+tnodef;
       [Iconstant],-;
       +), corrupt ice file+_rule_;
    +.
'a'check file type+>item:
    (=type*ITEM[item]=
      [Icharfile;Idatafile],is item flag+item+tnodef;
      +),corrupt ice file+_rule_;
    +.

$ files -------------------------------------------------------
'a'file entry-item-x-cnt:
   $ <item>, <direction>, <str>, <ptr>, DSUB, lists, DBUS.
   $  retrieve string as get file data+item+tble+offs
   must+Titem+item,check file type+item,
     must+Tconst+x, $ direction
     ((x=1;x=3),set item flag+item+tinfile;+),
     ((x=2;x=3),set item flag+item+toutfile;+),
     read file info+item,must+Dpoint+#,0->cnt,
     $ check area members, they cannot be externals
     (nxt:(incr+cnt,get file area+item+cnt+x,x=0);
          get item def+x,check list type+x,:nxt).

$ fill --------------------------------------------------------
'table'MESSAGE=(
"%p fill: repeater constant %d is out of range (max %d)"
    :repeater error 
).

'a'skip fill-list:
   $ skip fill entries at the first scan, link definitions
   must+Titem+list,get item def+list,check list type+list,
     must+Tconst+#, $ lineno
     remember list+list,
     (nxt:R+Dpoint;
      skip fill item,skip fill repeater+list,
         skip fill initializer+list,:nxt).
'a'check fill item-item:
   R+Tnumber; $ constant
   must+Titem+item,check fill constant type+item.
'a'skip fill item:
   R+Dopen,(nxt:R+Dclose;check fill item,:nxt);
   check fill item.
'a'skip fill repeater+>list-item-cnt:
   $ it cannot be a pointer constant
   R+Dstar,(RR+Tconst+cnt,((1<=cnt,cnt<=max repeat size);
             error+repeater error+tag*ITEM[list]+cnt+max repeat size);
            must+Titem+item,check constant type+item+1);+.
'a'skip fill initializer+>list-item:
   R+Dcolon,must+Titem+item,
     ((is item flag+item+texternal;
       type*ITEM[item]!=Ipointer constant;
       is+adm*ITEM[item]),corrupt ice file+_rule_;
      +),
     list->adm*ITEM[item],:skip fill initializer;
   +.

$ lists -------------------------------------------------------
'variable'link lists=-1. $ -1 is not a valid pointer
'a'remember list+>item-link:
   $ link lists, no external or imported.
   (get list link+item+link,link=0), $ was not added previously
      put list link+item+link lists,item->link lists;
   +.

'a'list entry-item-etype-esize:
   $ just after the 'list' keyword
   $  <item>, <etype> <esize>
   $   0: 0, 1: [const], 2: [=const], 3: [tag], 4: [=tag=]
   must+Titem+item,check list type+item,
   must+Tconst+etype,(=etype=
      [0;1;2], must+Tconst+esize;
      [3;4],   must+Titem+esize,check constant type+esize+1;
      corrupt ice file+_rule_),
   put vupb+item+etype,put vlwb+item+esize,
   remember list+item,must+Dpoint+#.

$ *************************************************************
$ prepare size estimates after first scan *********************
$  link lists links all lists, ending with a -1 (not zero)
'a'loose bounds-item-etype-esize-x:
   $ go through all lists, set vlwb to zero, vupb to:
   $  0  no bound (for stacks and tables with size equal to fill)
   $  -100<= .. <=-1: relative size
   $  1 ,,  max stack size:  absolute size
   link lists->item,(nxt:item=-1;
      get vupb+item+etype,get vlwb+item+esize,put vlwb+item+0,
      $ if this is not a declaration, then etype=0
      (=etype=
          [1],relative size+esize+item;
          [2],fix size+esize+item;
          [3],get estimator+esize+item+x,relative size+x+item;
          [4],get estimator+esize+item+x,fix size+x+item;
          put vupb+item+0),
      get list link+item+item,:nxt).

'table'MESSAGE=(
  "%p: relative size estimator %d is out of range (%i)":relative size estimator,
  "%p: size estimator %d is out or range (%i)":fix size estimator,
  "%p: size estimator %p has no value (%i)":unknown estimator
).

'a'relative size+>x+>item:
   ((x<1;x>100),warning+relative size estimator+tag*ITEM[item]+x+item;+),
   min+100+x,max+1+x,subtr+0+x+x,put vupb+item+x.
'a'fix size+>x+>item:
   ((x<1;x>max stack size),warning+fix size estimator+tag*ITEM[item]+x+item;+),
   min+max stack size+x,max+1+x,put vupb+item+x.
'p'get const value+>tag+x>:
   get item def+tag,is item flag+tag+tvalue,
           get target number value+repr*ITEM[tag]+x.
'a'get estimator+>tag+>list+x>:
   get const value+tag+x;
   1->x,error+unknown estimator+tag*ITEM[list]+tag*ITEM[tag]+list.

$ *************************************************************
$ read data section second time *******************************
$   list size estimators and repeat constants have known values
$   determine the size of each fill and the relative address of
$   each pointer constant inside the fill.
'a'data section ii:
    $ first scan: store expressions, list and file data, externals
    was error;
    (nxt:R+Dfill,loose fill,:nxt;
         R+Dexpression,skip entry,:nxt;
         R+Dlist,skip entry,:nxt;
         R+Dfile,skip entry,:nxt;
         R+Dbackmatter,read matter+0,:nxt;
         R+Dfrontmatter,read matter+1,:nxt;
         R+Dexternal,external entry,:nxt;
         inpt=Drule;
         internal error+_rule_).

$ externals ---------------------------------------------------
$ <tag>, <string>, Dpoint.
'a'external entry-item-str:
   $ I28 "@a_divrem"
   must+Titem+item,must+Tstring+str,must+Dpoint+#,
   (is item flag+item+texternal;corrupt ice file+_rule_),
   (is item flag+item+timported,corrupt ice file+_rule_;+),
   (=type*ITEM[item]=
      [Irule;Iconstant;Ivariable],str->repr*ITEM[item];
      [Ichar file;Idata file],str->adm*ITEM[item];
      [Itable;Istack],put vlwb+item+str;
      corrupt ice file+_rule_
   ).
   
$ front/back matter -------------------------------------------
$ save matters
'a'read matter+>type-str:
   must+Tstring+str,must+Dpoint+#,add matter+type+str.
    
$ loose fill --------------------------------------------------
$ figure out the relative pointer constant values and the
$   fill size of each stack/table. The size is stored in
$   the "fill" field of the list.
'variable'filltable size=0.
   $ filltable contains all fills; its size is calculated here

'table'MESSAGE=(
"filling %p: at %l repeater %p is not defined"
   :repeater tag not defined,
"filling %p at %l: value %d of repeater %p is out of range (max %d)"
   :repeater tag out of range
).

'a'loose fill-list-lineno-size:
    must+Titem+list,get item def+list,must+Tconst+lineno,
    $ check list type+list is OK
       (nxt:R+Dpoint;
            loose fill item+size,add+size+filltable size+filltable size,
              loose repeater+list+lineno+size,
              loose initializer+list,:nxt).
'a'loose fill item+size>:
   R+Dopen,0->size,(nxt:R+Dclose;
                        R+Tnumber,incr+size,:nxt;
                        must+Titem+#,incr+size,:nxt);
   R+Tnumber,1->size;
   must+Titem+#,1->size.
'a'repeater value+>list+>lineno+>item+cnt>:
   get const value+item+cnt,
     ((1<=cnt,cnt<=max repeat size);
      error+repeater tag out of range+tag*ITEM[list]+lineno+cnt+tag*ITEM[item]+max repeat size,
        1->cnt);
   1->cnt,error+repeater tag not defined+tag*ITEM[list]+lineno+tag*ITEM[item].
'a'loose repeater+>list+>lineno+>size-item-cnt:
   (R+Dstar,(RR+Tconst+cnt; $ the value has already been checked
             must+Titem+item,get item def+item,
               repeater value+list+lineno+item+cnt),
            (cnt=1;add+2+filltable size+filltable size),
            mult+size+cnt+size;
    +),
    get fill+list+cnt,add+size+cnt+cnt,put fill+list+cnt.
'a'loose initializer+>list-item-offset:
   R+Dcolon,must+Titem+item,get fill+list+offset,offset->repr*ITEM[item],
      $ the tvalue flag is not yet set as this is a relative address
      :loose initializer;
   +.

$ *************************************************************
$ read data section third time ********************************
$   generate fill entries
'a'data section iii:
   (nxt:R+Dfill,generate fill entries,:nxt;
        R+Dexpression,skip entry,:nxt;
        R+Dlist,skip entry,:nxt;
        R+Dfile,skip entry,:nxt;
        R+Dbackmatter,skip entry,:nxt;
        R+Dfrontmatter,skip entry,:nxt;
        R+Dexternal,skip entry,:nxt;
        inpt=Drule;
        corrupt ice file+_rule_).

$ *************************************************************
$ virtual address spzce ***************************************
$   collect list size claims, both for absolute and relative.
$   these calculations are done by the compiler. The actual
$   virtual addresses are computed for the target machine
$   "link lists" links all lists, ending with a -1 (not zero)

'table'MESSAGE=(
  "insufficient virtual space" :insufficient virtual space
).

'f'collect list size claims+abs>+rel>-item-x-y:
   0->abs->rel,link lists->item,(nxt:item=-1;
      get calibre+item+x,add+x+abs+abs,get fill+item+x,
         get vupb+item+y, $ x=fill size,
         (y>=0,max+y+x,add+x+abs+abs; $ absolute size y=0: no request
          subtr+rel+y+rel,add+x+abs+abs), $ relative size
         get list link+item+item,:nxt).

'a'set list bounds-item-cal-abs-rel-lwb-upb:
   link lists->item,(nxt:item=-1;
      get calibre+item+cal,get fill+item+abs,get vupb+item+rel,
        (rel>=0,max+rel+abs,0->rel;subtr+0+rel+rel),
        $ virtual size: abs+rel*by; after a gap of size calibre
        next virtual block+cal+abs+rel+lwb+upb,
        put vlwb+item+lwb,put vupb+item+upb,
        get list link+item+item,:nxt).

'a'distribute virtual address-abs-rel:
   collect list size claims+abs+rel,(rel>0;1->rel),
   (split virtual space+abs+rel,$ total = abs + rel*by
        set list bounds,clear virtual space,
        compute pointer constants;
    error+insufficient virtual space).

'a'compute pointer constants-ptr:
   <<ITEM->ptr,(nxt:ptr>>>ITEM;
    type*ITEM[ptr]=Ipointer constant,
       set pointer value+ptr,next+ITEM+ptr,:nxt;
    next+ITEM+ptr,:nxt).

'a'set pointer value+>ptr-list-cal-base:
   $ this is a pointer constant, compute the exact value
   adm*ITEM[ptr]->list,get item def+list,
   get calibre+list+cal,get vlwb+list+base,
     subtr+repr*ITEM[ptr]+cal+cal, $ lwb+offset-cal
     virtual address offset+base+cal+repr*ITEM[ptr],
     set item flag+ptr+tvalue.

$ ASSIGN REPR NUMBERS *************************************** $
$ add repr numbers of items. external variable and external rule
$  add tpidgin and tauxpidgin flags to rules
$  items do not use the representation
'variable'next repr no=1000. $ last number assigned $

'a'set repr number+>item-x:
   is item flag+item+texternal,(=type*ITEM[item]=
      [Ivariable;Iconstant],+;
      [Irule],get tag image+repr*ITEM[item]+x,
         ((string elem+LEXT+x+0+x,x=/_/),set item flag+item+rplainpidgin;
          x=/@/,set item flag+item+raltpidgin;
          +);
      [Ichar file;Idata file;Itable;Istack],
        incr+next repr no,next repr no->repr*ITEM[item];
      internal error+_rule_);
   (=type*ITEM[item]=
    [Iconstant;Ipointer constant],+;
    [Ivariable;Istatic var],repr*ITEM[item]->adm*ITEM[item],
        incr+next repr no,next repr no->repr*ITEM[item];
    [Irule;Itable;Istack;Istatic stack;Ichar file;Idata file],
        incr+next repr no,next repr no->repr*ITEM[item];
    +).

'a'assign repr numbers-item:
   $ assign representation numbers. 
   $   variables: copy the initial value (NUMBER) to the adm field
   $   constant, pointer: NUMBER is in repr
   $   external var,constant: string in repr
   $   external rule: string in repr; compute pidgin flags
   $   external file: string is in the adm field
   $   external list: string is in the vlwb field (no vupb/vlwb)
   <<ITEM->item,(nxt:item>>>ITEM;
     is item flag+item+timported,next+ITEM+item,:nxt;
     (=type*ITEM[item]=
      [Iconstant;Ipointer constant;Ivariable;Istatic var;Irule;
       Itable;Istack;Istatic stack;Ichar file;Idata file],
              set repr number+item;
      +), next+ITEM+item,:nxt).

$ ROOT ********************************************************
'root'+.
'pragmat'endif=compile.
'end'

