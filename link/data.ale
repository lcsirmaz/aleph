$ HEADER ************************************************** $
'pragmat'module="data".
$ handle data:
$  expression, fill, list, file $
'a'data section,data section ii.
'a'loose bounds,distribute virtual address,
   finalize pointer constants.
$ expressions are stored in the stack EXPRESSION,
$  linked so we can walk them.
$ expressions are evaluated twice. Loose evaluation
$  determines values which do not depend on pointers
$  and limits. Final evaluation determines all final
$  values for expressions; after that EXPRESSION can
$  be freed.
'a'loose evaluation,final evaluation.
'a'release EXPRESSION.

$ BODY **************************************************** $
'pragmat'if=compile.
'pragmat'require=("error","item","lexical").

'stack'[7]EXPRESSION.
'a'push EXPR+>x:
  (* x->EXPRESSION *)EXPRESSION.
'a'release EXPRESSION:
  release+EXPRESSION.

'variable'link expr=0. $link all expressions

'f'check list type+>item:
  =type*ITEM[item]=
  [Itable;Istack;Istatic stack],+;
  corrupted obj file+_title_+_line_.
'f'check constant type+>item:
  =type*ITEM[item]=
  [Iconstant;Ipointer constant],+;
  corrupted obj file+_title_+_line_.

$ list section ============================================ $
'variable'link lists=0.
'constant'max stack size=1 000 000.

'a'remember list+>item-link:
   (get list link+item+link,link<0),
       put list link+item+link lists,item->link lists;
   +.

'a'list entry-item-etype-esize:
   $ we are just after the 'list' keyword
   $ <item> <etype> <esize> .
   $   1: [const], 2: [=const=], 3: [tag], 4: [=tag=]
   must+Titem+item,check list type+item,
     (is item flag+item+timported,corrupted obj file+_title_+_line_;+),
     must+Tconst+etype,
     (=etype=[1;2],must+Tconst+esize;
             [3;4],must+Titem+esize,check constant type+esize;
             corrupted obj file+_title_+_line_),
     put vupb+item+etype,put vlwb+item+esize,
     remember list+item,must+Dpoint+#.

'a'fill item-item:
   R+Dopen,(nxt: R+Dclose;
                 R+Tconst,:nxt;
                 must+Titem+item,check constant type+item,:nxt);
   R+Tconst;
   must+Titem+item,check constant type+item.
'a'fill repeater-item:
  R+Dstar,(R+Tconst;must+Titem+item,check constant type+item);+.

'a'fill initializer+>list-item:
  R+Dcolon,must+Titem+item,
    ((type*ITEM[item]=Ipointer constant,adm*ITEM[item]=0);corrupted obj file+_title_+_line_),
    list->adm*ITEM[item],:fill initializer;
  +.

'a'skip fill-list:
   $ skip fill entries at the first scan; link the definitions
   must+Titem+list,check list type+list,must+Tconst+#,$ lineno $
     remember list+list,
     (nxt:R+Dpoint; fill item,fill repeater,fill initializer+list,:nxt).

'table'MESSAGE=(
  "%p: relative size estimator %d is out of range (%i)":relative size estimator,
  "%p: fix size estimator %d is out or range (%i)":fix size estimator,
  "%p: size estimator %p has no value (%i)":unknown estimator,
  "filling %p at %l: repeat %p has value %d out of range (1 .. 10000)"
          :repeat constant out of range,
  "filling %p at %l: repeat constant %p is not defined"
          :repeat constant not defined,
  "insufficient virtual space" :insufficient virtual space
).

'a'relative size+>x+>item:
   ((x<1;x>100),warning+relative size estimator+tag*ITEM[item]+x+item;+),
   min+100+x,max+1+x,put vupb+item+x.
'a'fix size+>x+>item:
   ((x<1;x>max stack size),warning+fix size estimator+tag*ITEM[item]+x+item;+),
   min+max stack size+x,max+1+x,subtr+0+x+x,put vupb+item+x.
'p'get const value+>tag+x>-def:
   is item flag+tag+tvalue,repr*ITEM[tag]->x;
   (get item def+tag+def,is item flag+def+tvalue),
      set item flag+tag+tvalue,repr*ITEM[def]->repr*ITEM[tag]->x.
'a'get estimator+>tag+>list+x>:
   get const value+tag+x;
   1->x,error+unknown estimator+tag*ITEM[list]+tag*ITEM[tag]+list.

'a'loose bounds-item-etype-esize-x:
   $ go through all lists, set vlwb to zero, vupb to:
   $  0  no bound (for stacks and tables with size equal to fill)
   $  1<= .. <=100 relative size
   $  <0 absolute size (up to max stack size 1 000 000)
   link lists->item,(nxt:item=0;
   (get item def+item+#,put vlwb+item+0,put vupb+item+0;
          $ external and imported lists $
    get vupb+item+etype,get vlwb+item+esize,put vlwb+item+0,
     $ if this is not a definition, then etype=0
     (=etype=
      [1],relative size+esize+item;
      [2],fix size+esize+item;
      [3],get estimator+esize+item+x,relative size+x+item;
      [4],get estimator+esize+item+x,fix size+x+item;
      put vupb+item+0)),
   get list link+item+item,:nxt).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $ 
$ after loose constant evaluation go through fillings and
$   figure out (relative) pointer constant values, and the
$   fill size of each table/stack. Fill size is stored in
$   the "fill" field.
$ external stack/table has disjoint address space; all limits
$   are dynamic; this handles the external table STDARG
$ @StringTable is different; it is defined as "imported" and
$   is handled here
'variable'filltable size=0.
   $ fill table contains all fills; repeated blocks only once.
'a'loose fill item+size>:
   R+Dopen,0->size,(nxt: R+Dclose;
                         R+Tconst,incr+size,:nxt;
                         must+Titem+#,incr+size,:nxt);
   R+Tconst,1->size;
   must+Titem+#,1->size.
$ repeat constant must have value betweem 1 and 10000 (hardcoded in lists.ale)$
'a'repeater value+>list+>lineno+>item+cnt>: $ item is either constant or pointer constant $
   get const value+item+cnt,
      ((1<=cnt,cnt<=10000);
       warning+repeat constant out of range+tag*ITEM[list]+lineno+tag*ITEM[item]+cnt,
         1->cnt);
   1->cnt,error+repeat constant not defined+tag*ITEM[list]+lineno+tag*ITEM[item].
'a'loose repeater+>list+>lineno+>size-item-cnt:
   (R+Dstar,(RR+Tconst+cnt;
             must+Titem+item,(get item def+item+item;+),
               repeater value+list+lineno+item+cnt),
      (cnt=1;add+2+filltable size+filltable size),
      mult+size+cnt+size;
    +),
   get fill+list+cnt,add+size+cnt+cnt,put fill+list+cnt.
'a'loose initializer+>list-item-offset:
   R+Dcolon,must+Titem+item,
      (get item def+item+#,corrupted obj file+_title_+_line_;+),
      get fill+list+offset,offset->repr*ITEM[item],
                           list->adm*ITEM[item],
      $ the tvalue flag is not set yet (this is relative address)
      :loose initializer;
   +.
'a'loose fill-list-lineno-size:
  must+Titem+list,(get item def+list+list,remember list+list;+),must+Tconst+lineno,
   (nxt:R+Dpoint;
        loose fill item+size,add+size+filltable size+filltable size,
        loose repeater+list+lineno+size,
        loose initializer+list,:nxt).
        
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $ 
$ virtual address space distribution
'constant'min virtual address=0x01000000,max virtual address=0x77ffffff.
  $ this is for 32 bits, address above 0x78000000 is for externals $ 
'f'collect list size claims+abs>+rel>-ptr-x-y:
  0->abs->rel,link lists->ptr,
   (nxt:ptr=0;
        get item def+ptr+#,get list link+ptr+ptr,:nxt;
        get calibre+ptr+x,add+x+abs+abs,get fill+ptr+x,
          get vupb+ptr+y, $ x=fill size, y=requested size $
          (y<=0,subtr+0+y+y,max+y+x,add+x+abs+abs;
           add+y+rel+rel,add+x+abs+abs),
          get list link+ptr+ptr,:nxt).
'a'set list bounds+>by-addr-ptr-cal-x-y:
   $ compute vlwb and vupb for all lists
   min virtual address->addr,link lists->ptr,
   (nxt:ptr=0;
     get item def+ptr+#,get list link+ptr+ptr,:nxt; $ not a definition
     get fill+ptr+x,get vupb+ptr+y,(y<=0,subtr+0+y+y;mult+y+by+y),max+y+x, 
       $ total size is in x$
       get calibre+ptr+cal,add+cal+addr+y,put vlwb+ptr+y,
       $ starting address is addr+1, last one is addr+x $
       add+x+addr+addr,put vupb+ptr+addr,add+addr+cal+addr,
       get list link+ptr+ptr,:nxt).

'a'distribute virtual address-abs-rel-by:
   collect list size claims+abs+rel,(rel>0;1->rel),
   subtr+max virtual address+min virtual address+by,
   ((abs<0;by<abs;subtr+by+abs+by,div+by+rel+by,by<=0),
         error+insufficient virtual space;
    set list bounds+by).

$ finalize pointer constants  - - - - - - - - - - - - - - - $
$ repr: offset from the beginning (first list element has offset 1)
$ adm:  link to list definition
'a'set pointer value+>ptr-list-cal-lwb:
  adm*ITEM[ptr]->list,get calibre+list+cal,get vlwb+list+lwb,
  subtr+lwb+cal+lwb,add+lwb+repr*ITEM[ptr]+repr*ITEM[ptr],
  set item flag+ptr+tvalue.
'a'finalize pointer constants-ptr:
  <<ITEM->ptr,(nxt:ptr>>>ITEM;
  (type*ITEM[ptr]=Ipointer constant,
    (get item def+ptr+#,corrupted obj file+_title_+_line_;+),
    set pointer value+ptr;
   +),
  next+ITEM+ptr,:nxt).
$ EXPRESSION ============================================== $

'a'read expression-item-ptr:
   $ I5 12 *(3 /'calibre'I2 +'lwb'I2 ^'upb'I3 )+-3 *'calibre'I3 &-12 .
   must+Titem+item,
     (=type*ITEM[item]= [Iconstant;Ivariable;Istatic var],+;corrupted obj file+_title_+_line_),
     push EXPR+item,>>EXPRESSION->ptr,push EXPR+link expr,ptr->link expr,
     >>EXPRESSION->adm*ITEM[item],(nxt:=inpt=
     [Dpoint],next symbol,push EXPR+Dpoint;
     [Tconst],push EXPR+Tconst,push EXPR+inpt value,next symbol,:nxt;
     [Titem], check constant type+inpt value,push EXPR+inpt value,next symbol,:nxt;
     [Dlwb;Dupb;Dcalibre],push EXPR+inpt,next symbol,must+Titem+item,
        push EXPR+item,check list type+item,:nxt;
     [Dplus;Dminus;Dstar;Ddiv;Dand;Dor;Dxor;Dcompl;
      Dopen;Dclose],push EXPR+inpt,next symbol,:nxt;
      corrupted obj file+_title_+_line_).

$ DATA section ========================================== $
'a'data section:    $ first pass $
   was error;
   (nxt:R+Dfill,skip fill,:nxt;
        R+Dexpression,read expression,:nxt;
        R+Dlist,list entry,:nxt;
        R+Dfile,file entry,:nxt;
        +).
'a'skip entry:
   R+Dpoint;next symbol,:skip entry.
'a'data section ii: $ second pass $
   (nxt:R+Dexpression,skip entry,:nxt;
        R+Dlist,skip entry,:nxt;
        R+Dfile,skip entry,:nxt;
        R+Dfill,loose fill,:nxt;
        +).
$ loose evaluation ****************************************** $
'table'MESSAGE=(
  "%p: constant definition refers to itself (%i)": constant refers to itself
).
'variable'eptr=0.
'p'E+>x:
    EXPRESSION[eptr]=x,incr+eptr.
'p'Eitem+x>:
    EXPRESSION[eptr]->x,was+ITEM+x,incr+eptr.
'p'Eop+>prio+op>+p>:
    EXPRESSION[eptr]->op,(=op=
       [Dxor],        prio=0, 1->p,incr+eptr;
       [Dand],        prio<=1,2->p,incr+eptr;
       [Dor],         prio<=2,3->p,incr+eptr;
       [Dplus;Dminus],prio<=3,4->p,incr+eptr;
       [Ddiv;Dstar],  prio<=4,5->p,incr+eptr;
       -).
'f'optor+>op+>w+>v>:
  =op=
  [Dxor], bool xor+v+w+v;
  [Dand], bool and+v+w+v;
  [Dor],  bool or+v+w+v;
  [Dplus],add+v+w+v;
  [Dminus],subtr+v+w+v;
  [Dstar], mult+v+w+v;
  [Ddiv], div+v+w+v.

'p'loose base+v>:
   E+Dopen,loose expr+0+v,E+Dclose;
   E+Tconst,EXPRESSION[eptr]->v,incr+eptr;
   E+Dcompl,loose base+v,bool invert+v+v;
   E+Dminus,loose base+v,subtr+0+v+v;
   E+Dcalibre,get calibre+EXPRESSION[eptr]+v,incr+eptr;
   Eitem+v,type*ITEM[v]=Iconstant,loose eval+v,
       is item flag+v+tvalue,repr*ITEM[v]->v.
'p'loose expr+>prio+v>-op-p-w:
   loose base+v,
      (nxt:Eop+prio+op+p,loose expr+p+w,optor+op+w+v,:nxt;+).

'a'set final value+>v+>item1+>item2:
   clear item flag+item1+teval,
   v->repr*ITEM[item1],set item flag+item1+tvalue,
   (item1=item2;v->repr*ITEM[item2],set item flag+item2+tvalue).

'a'loose eval+>item-def-oldptr:
   is item flag+item+tvalue;
   ((get item def+item+def;item->def),is item flag+def+teval),
      error+constant refers to itself+tag*ITEM[def]+def,
      set final value+0+def+item;
   set item flag+def+teval,eptr->oldptr,adm*ITEM[def]->eptr,incr+eptr,
      (was+EXPRESSION+eptr;corrupted obj file+_title_+_line_),
      (-v:loose expr+0+v,set final value+v+def+item;
          clear item flag+def+teval),
      oldptr->eptr.
'a'loose evaluation-ptr:
   was error;
   link expr->ptr,(nxt:ptr=0;
     loose eval+EXPRESSION[ptr],incr+ptr,EXPRESSION[ptr]->ptr,:nxt).

$ final evaluation ****************************************** $
$  *** a pointer constant MUST HAVE its tvalue flag set ***
'f'get expr limit+>what+>item+x>:
  (get item def+item+item;+),
  (what=Dlwb,get vlwb+item+x;get vupb+item+x).

'a'final base+v>:
   E+Dopen,final expr+0+v,(E+Dclose;+);
   E+Tconst,EXPRESSION[eptr]->v,incr+eptr;
   E+Dcompl,final base+v,bool invert+v+v;
   E+Dminus,final base+v,subtr+0+v+v;
   E+Dcalibre,EXPRESSION[eptr]->v,get calibre+v+v,incr+eptr;
   E+Dlwb,get expr limit+Dlwb+EXPRESSION[eptr]+v,incr+eptr;
   E+Dupb,get expr limit+Dupb+EXPRESSION[eptr]+v,incr+eptr;
   Eitem+v,final eval+v,repr*ITEM[v]->v;
   corrupted obj file+_title_+_line_.
   
'a'final expr+>prio+v>-op-p-w:
   final base+v,(nxt:Eop+prio+op+p,final expr+p+w,optor+op+w+v,:nxt;+).
'a'final eval+>item-def-v-oldptr:
   is item flag+item+tvalue;
   ((get item def+item+def;item->def),is item flag+def+tvalue),
      repr*ITEM[def]->repr*ITEM[item],set item flag+item+tvalue;
   is item flag+def+teval,
      error+constant refers to itself+tag*ITEM[def]+item,
      set final value+0+def+item;
   set item flag+def+teval,eptr->oldptr,adm*ITEM[def]->eptr,incr+eptr,
      (was+EXPRESSION+eptr;corrupted obj file+_title_+_line_),
      final expr+0+v,oldptr->eptr,set final value+v+def+item.
'a'final evaluation-ptr:
   link expr->ptr,(nxt:ptr=0;
     final eval+EXPRESSION[ptr],incr+ptr,EXPRESSION[ptr]->ptr,:nxt).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - $

'root'+.
'pragmat'endif=compile.
'end'
