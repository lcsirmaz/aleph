$ target.ale
'pragmat'module=target,title="target, v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ************************************************** $
$ generating code $
'a'open target,close target,delete target.
   $ manipulate the target file $
'a'use call stack.
   $ call tracing was required
$ data section
'a'target prelude,target postlude.
   $ header -- show modules and the main file, plus tail
'a'data declaration.
   $ data declaration and rule prototypes. Define stack, table,
   $  file offsets.
'a'fill table head,generate fill entries,fill table tail.
   $ generate the fill table
'a'data initialization,target main.
   $ data initialization, waitfor, and ROOT
$ rule section
'a'profiling declaration.
   $ declare a_profiles at the end.

'a'rule declaration head+>item+>C1+>C2+>C3+>rulehead
                      +>minloc+>maxloc+>locptr+>cstack.
'a'rule declaration tail.
'a'Tlabel+>this+>next.
'a'T box+>ptr+>area,T extension+>ptr+>label.
'a'T rule call+>tag+>n+>fnext+>tnext+>rep+>star+>ptr.

$ BODY **************************************************** $
'pragmat'if=compile.
'pragmat'require=("number","lexical","input","item",
                  "arithm","error","config").

$ manipulate target file ********************************** $

'charfile'TARGET="aleph.c">.
'table'MESSAGE=(
 "cannot create target file %p, error code: %d" :cannot open target
).

'variable'target opened=0.

'a'open target-d:
  get target file, $ file name on top of LEXT
  (open file+TARGET+/w/+LEXT+>>LEXT,unstack string+LEXT,1->target opened;
   get file error+TARGET+d,error+cannot open target+>>LEXT+d).
'a'close target:
  target opened=0;close file+TARGET,0->target opened.
'a'delete target:
  target opened=0;
  close target,get target file,unlink file+LEXT+>>LEXT,unstack string+LEXT.

$ naming convention *************************************** $
$  formal parameters: 
$     a_tr      call stack
$     a_F%d     if not out/inout (serial number)
$     a_A[%d]   out/inout (count, starting at zero)
$     a_C       formal repeat count
$    *a_V       repeat block (indexed consecutively from zero)
$  local variables:
$     a_L%d     from 'min loc' to 'max loc', inclusive (d>=1)
$  labels:
$     a_G%d     d>1, the node number
$  actual parameters:
$     a_P[]     for out/inout, fixed size repeat block
$    *a_D       dynamic size repeat block
$  items:
$     a_nnnn    nnnn is the repr number of the item

$ print to TARGET file ==================================== $
'pragmat'macro=(print char,print str,print prefix).
'a'print char+>ch: put char+TARGET+ch.

'a'print int+>n:
   $ print n in decimal; min int is not allowed in gcc
   n=min int, $ print char+/-/,subtr+-1+n+n,print int1+n+/1/;
     print char+/(/,print char+/-/,print int+max int,
     print char+/-/,print char+/1/,print char+/)/;
   n<0, print char+/-/,get abs+n+n,print int1+n+/0/;
   print int1+n+/0/.
'a'print int1+>n+>c-q-r:
   divrem+n+10+q+r,(q=0; print int1+q+/0/),
        add+r+c+r, print char+r.
'a'print str+T[]+>ptr:
  put string+TARGET+T+ptr.

$ prefix, formal, local, actual arguments
'a'print prefix:
   print char+/a/,print char+/_/.
'a'print label prefix:
   print prefix,print char+/G/.
'a'local argument+>cnt:
   $ local affix
   print prefix,print char+/L/,print int+cnt.
'a'print int index+>c+>idx:
   print prefix,print char+c,print char+/[/,print int+idx,print char+/]/.
'a'formal argument+>cnt-i-type-out:
   $ formal affix of this rule
   0->i->out,(nxt:get formal+this rule+i+type,incr+i,
     ((type=Iformal out;type=Iformal inout),
        (i=cnt,print int index+/A/+out;incr+out,:nxt);
      type=Iformal anchor,incr+i,subtr+cnt+i+i,
        (i<0,print prefix,print char+/C/;print int index+/V/+i);
      i=cnt,print prefix,print char+/F/,print int+cnt;
      :nxt)).
'a'print pidgin repr+>item-ptr-x-y:
  $ if pidgin, start with the second char
  get tag image+repr*ITEM[item]+ptr,1->y,
     (nxt:string elem+LEXT+ptr+y+x,print char+x,incr+y,:nxt;+).
'a'print external repr+>item:
  =type*ITEM[item]=
  [Iconstant;Ivariable],print ptr+repr*ITEM[item];
  [Irule],(is item flag+item+rpidgin,print pidgin repr+item;
           print ptr+repr*ITEM[item]);
  print prefix,print int+repr*ITEM[item].
'a'print repr+>item:
   $ representation of an item
   was+ITEM+item,
     (is item flag+item+texternal,print external repr+item;
      (=type*ITEM[item]=
          [Iconstant;Ipointer constant],print number+repr*ITEM[item];
          print prefix, print int+repr*ITEM[item]));
   print ptr+item.
'a'print local label+>label:
   $ local label with prefix a_G
   print label prefix,print int+label.
'a'print goto+>label:
   $ -1: success return, -2: fail return; otherwise jump
   =label=
$   [0], (is item flag+called rule+rexit,-1->label,:print goto;
$         internal error+_rule_);
   [0;-1],(is item flag+this rule+rcan fail,print str+" return 1;";print str+" return;");
   [-2],print str+" return 0;";
   print str+" goto ",print local label+label,print char+/;/.
'a'print GOTO+>label:
   $ goto only if label!=next node idx $
   (label=next node idx,next node idx!=0);
   print goto+label.
$ print an affix ----------------------------------------- $
$ affixes are stored in BUFFER. The format character %p
$   prints a double item from BUFFER
'a'print BUFFER+>ptr:
  =BUFFER[ptr]=
  [Titem],incr+ptr,print repr+BUFFER[ptr];
  [Tconst],incr+ptr,print int+BUFFER[ptr];
  [Tlocal],incr+ptr,local argument+BUFFER[ptr];
  [Tnumber],incr+ptr,print number+BUFFER[ptr];
  [Tformal],incr+ptr,formal argument+BUFFER[ptr];
  internal error+_rule_.
'a'print ptr+>p:
  was+ITEM+p,tag*ITEM[p]->p,:print ptr;
  was+LEXT+p,get tag image+p+p,print str+LEXT+p;
  was+MESSAGE+p,print str+MESSAGE+p;
  was+BUFFER+p,print BUFFER+p;
  p=0,print str+"[null]";
  internal error+_rule_.
'a'print nlptr+>p-obuff-ptr:
  was+LEXT+p,get tag image+p+p,
    >>BUFFER->obuff->ptr,unpack string+LEXT+p+BUFFER,
      (nxt:>>BUFFER<=ptr,unstack to+BUFFER+obuff;
           (incr+ptr,BUFFER[ptr]!=/%/),print char+BUFFER[ptr],:nxt;
           (incr+ptr,>>BUFFER<ptr),:nxt;
           BUFFER[ptr]=/n/,print char+newline,:nxt;
           print char+/%/,print char+BUFFER[ptr],:nxt);
  print ptr+p.
'a'print number+>p-obuff-ptr:
   >>BUFFER->obuff->ptr,get number repr+p,
     (nxt:>>BUFFER<=ptr,unstack to+BUFFER+obuff;
          incr+ptr,print char+BUFFER[ptr],:nxt).

'a'T+t[]+@+>fmt-ptr-optr:
$ formal characters:
$   r: item, get repr
$   g: goto (return or goto)
$   G: don't print for the next node
$   n: newline
$   p: pointer
$   d: integer
$   s: LEXT string, replace %n by newline
$   t: target number
$   w: ALEPH word type
  >>BUFFER->optr,unpack string+t+fmt+BUFFER,add+optr+1+ptr,
  (nxt:>>BUFFER<ptr;
    BUFFER[ptr]!=/%/,print char+BUFFER[ptr],incr+ptr,:nxt;
    incr+ptr,(ptr>>>BUFFER,print char+/%/;
      (=BUFFER[ptr]=
       [/r/],(shift affix block+@,print repr+fmt;print char+/?/),incr+ptr,:nxt;
       [/g/],(shift affix block+@,print goto+fmt;print char+/?/),incr+ptr,:nxt;
       [/G/],(shift affix block+@,print GOTO+fmt;print char+/?/),incr+ptr,:nxt;
       [/w/],print ptr+aleph word type,incr+ptr,:nxt;
       [/n/],print char+newline,incr+ptr,:nxt;
       [/d/],(shift affix block+@,print int+fmt;print char+/?/),incr+ptr,:nxt;
       [/p/],(shift affix block+@,print ptr+fmt;print char+/?/),incr+ptr,:nxt;
       [/s/],(shift affix block+@,print nlptr+fmt;print char+/?/),incr+ptr,:nxt;
       [/t/],(shift affix block+@,print number+fmt;print char+/?/),incr+ptr,:nxt;
       print char+BUFFER[ptr],incr+ptr,:nxt))),
  (shift affix block+@,print str+"[...]";+),
  unstack to+BUFFER+optr.

'a'call trace arg+sep>:
   call stack=0,0->sep;
   T+"a_CALLp a_tr",1->sep.
'a'call trace call+sep>:
   call stack=0,0->sep;
   T+"&a_Ltr",1->sep.
'a'add call stack+>st:
   call stack=0;
   st=0,T+" a_unused_callstack(a_rulename);%n";
   T+" a_addto_callstack(a_rulename);%n".


$ auxiliary rules *************************************************
'variable'
   call stack=0.  $ compile all rules with call stack tracing

'a'use call stack: 1->call stack.

'f'get item def+>item>:
   $ switch to the definition of the item
   is item flag+item+timported,repr*ITEM[item]->item;+.
'pragmat'macro=get item def.

$ prelude *********************************************************
$  target head; module names, front matters
'a'target prelude-ptr-str:
   T+"/* ALEPH ice linker v%d.%d, word size=%d */%n%n// linked modules:%n"+
       version major+version minor+target word size,
   (nxt:(get next module head+ptr,ptr=0);
       tag*ITEM[ptr]=0,(scope*ITEM[ptr]=0; $ built in
          T+"// @main ""%p""%n"+scope*ITEM[ptr]),:nxt; $ main module
       T+"// %p ""%p""%n"+ptr+scope*ITEM[ptr],:nxt),
   $ indicate whether call stack is required
   (call stack=0;T+"#define a_CALL_STACK a_CALL_STACK%n"),
   $ core aleph header
   T+"%s%n"+aleph front matter,
   $ user supplied front matters, e.g. stdlib
   0->ptr,(nxt:get matter+ptr+1+str,T+"%s%n"+str,:nxt;+).

'a'target postlude-ptr-str:
   $ used supplied back matters
   0->ptr,(nxt:get matter+ptr+0+str,T+"%s%n"+str,:nxt;+),
   T+"/* EOF */%n".

$ declaration ************************************************
$ rule prototype, variable, list, file declarations
$ defined
$  variable:   static %w a_1099=<initial value>; /* tag */
$  list,file:  #define a_1101 (a_1100+sizeof_LIST);  /* tag */
$ external - only if --external is present
$  variable:   extern %w XXXX; /* tag */
$  list:       extern void XXXX(%w,%w); /* list tag */
$  file:       extern void XXXX(%w);        /* file tag */
$ an external constant can be a procedure call, variable, or #define

'table'MESSAGE=(
  "sizeof_LIST"   :sizeof list,
  "sizeof_CHFILE" :sizeof chfile,
  "sizeof_DFILE"  :sizeof dfile,
  "BLOCK_TOTAL"   :block total
).

$ ------------------------------------------------------------
$  prototype for (external) rules with standard call 
$  external rules with pidgin call have no prototype 
$  static/extern %w/void <ID>(parameters);
$    (int a_F1,int a_F3,int a_A[3],int a_C,int *a_V)

'a'rule typer+>item+sep>:
  (is item flag+item+rcan fail,T+"static %w %r("+item;
   T+"static void %r("+item $))$ ),
  call trace arg+sep.
'a'arg sep+>sep>:
  sep=0,1->sep;print char+/,/.
'a'out args+>out+>sep>:
  out=0;arg sep+sep,T+"%w a_A[%d]"+out.
'a'rule args+>item+>sep-n-cnt-type-out:
  get number of formals+item+n,0->cnt->out,
  (nxt: cnt<n,get formal+item+cnt+type,incr+cnt,
     ((type=Iformal out;type=Iformal inout),incr+out,:nxt;
      type=Iformal anchor,out args+out+sep,arg sep+sep,
              $($ T+"%w a_C,%w *a_V)";
      arg sep+sep,T+"%w a_F%d"+cnt,:nxt);
    out args+out+sep,(is+sep;T+"void"),$($ print char+/)/).

$ ------------------------------------------------------------
'variable'waitfor used=0, $ waitfor external is used
          module roots=0. $ number of non-empty module roots

$ call stack: procedures have the "a_CALLp a_tr" first arg;
$     first command is a_CALL a_Ltr={"rulename",a_tr}
$     call each rule with &a_Ltr as first arg

'a'var declaration+>item:
   is item flag+item+texternal;
   T+"static %w %r=%t; /* %p */%n"+item+adm*ITEM[item]+item.
'a'block declaration+>item+>prev+>sf:
   $ list, file declaration; this defines the offset only
   T+"#define %r ("+item,
   (prev=0,T+"0";T+"%r+%p"+prev+sf),
   T+") /* %p */%n"+item.
'a'rule prototype+>item-sep: $ prototype $
   is item flag+item+rpidgin, $ no prototype
     (is waitfor item+item,1->waitfor used;+);
   is builtin rule+item+#;
   is item flag+item+rempty;  $ if empty rule, do nothing
   is root item+item,add matter+2+item; $ save roots items
   is item flag+item+texternal; $ no prototype
   rule typer+item+sep,rule args+item+sep,T+"; /* %p */%n"+item.
'a'root prototype+>item-sep:
   rule typer+item+sep,rule args+item+sep,
   (scope*ITEM[item]=Squote image, $ main root
        T+"; /* @main root */%n";
     incr+module roots,T+"; /* %p root */%n"+scope*ITEM[item]).

'a'data declaration-item-prev-sf-roots:
   <<ITEM->item,0->prev->sf,(nxt:item>>>ITEM;
     is item flag+item+timported,next+ITEM+item,:nxt;
     (=type*ITEM[item]=
        [Ivariable;Istatic var],var declaration+item;
        [Itable;Istack;Istatic stack],
           block declaration+item+prev+sf,item->prev,sizeof list->sf;
        [Icharfile],
           block declaration+item+prev+sf,item->prev,sizeof chfile->sf;
        [Idatafile],
           block declaration+item+prev+sf,item->prev,sizeof dfile->sf;
        [Irule], rule prototype+item;
        $ [Iconstant;Ipointer constant],+;
      +), next+ITEM+item,:nxt),
   $ root items
   0->roots,(nxt:get matter+roots+2+item,root prototype+item,:nxt;+),
   (prev=0,T+"#define %p 0%n"+block total;
           T+"#define %p (%r+%p)%n"+block total+prev+sf),
   T+"%w a_DATABLOCK[%p];%n"+block total.

$ FILL table *************************************************
$  generate the fill table with all fills. 
$   where: list id, or -1, followed by a sequence of blocks
$     n=0: last block
$     n>0: block of n items
$     n<0: repeat the previous block -n times

'a'push BUFFER+>x: (* x->BUFFER *)BUFFER.

'variable'fill total=0.
'a'fill table head:
  T+"static %w a_FILL[]={ /* fill table */%n",0->fill total.
'a'fill table tail:
  T+"-1}; /* fill table size %d */%n"+fill total.

'a'until next comma+>ptr>:
   ptr>>>BUFFER,internal error+_rule_;
   BUFFER[ptr]=/,/,print char+/,/,incr+ptr;
   print char+BUFFER[ptr],incr+ptr,:until next comma.
'a'const item-v:
   $ inpt value vanished at the next symbol, save it immediately
  inpt=Tnumber,get number repr+inpt value,next symbol;
  must+Titem+v,get item def+v,get number repr+repr*ITEM[v].
'a'fill item+size>:
  $ save the decimal representation of the value immediately
  R+Dopen,0->size,(nxt:R+Dclose;
        incr+size,const item,push BUFFER+/,/,:nxt);
  1->size,const item,push BUFFER+/,/.
'p'fill repeater+rep>-item:
  R+Dstar,(RR+Tconst+rep;
           must+Titem+item,get item def+item,
              get target number value+repr*ITEM[item]+rep).
'a'flush buffer+>size+>last+>ptr:
  add+size+fill total+fill total,add+last+fill total+fill total,
  incr+ptr,(size=0;T+"%d,"+size,incr+fill total),
  (nxt:size=0;until next comma+ptr,decr+size,:nxt),
  (last=0;T+"%d,"+last,incr+fill total),
  (nxt:last=0;until next comma+ptr,decr+last,:nxt).
'a'skip fill initializer:
  R+Dcolon,must+Titem+#,:skip fill initializer;+.
'a'generate fill entries-list-obuff-size-last-rep:
   must+Titem+list,get item def+list,must+Tconst+#,incr+fill total,
    T+"%r,/* %p */%n"+list+list,>>BUFFER->obuff,0->size,
    (nxt:R+Dpoint;
         fill item+last,
           (fill repeater+rep,flush buffer+size+last+obuff,
               T+"-%d,%n"+rep,incr+fill total,
               unstack to+BUFFER+obuff,0->size;
            add+size+last+size),
           skip fill initializer,:nxt),
    flush buffer+size+0+obuff,unstack to+BUFFER+obuff,
    incr+fill total,T+"0,%n".

$ DATA SETUP ********************************************** $
$  setup list and file data structures. As file area uses
$    list bounds, lists should come first. Add external list
$    and file initializations. Call list_FILL which adds
$    all fillings.
$  void a_data_setup(void){ ... }
$   set virtual limits,
$   a_setup_list(0/1,<id>,calibre,lb,ub,fill size);
$   a_setup_chfile(<id>,direction,<stringtable>,<stringptr>);
$   a_setup_dfile(<id>,direction,<stringtable>,<stringptr>,number of areas);
$      a_add_filearea(<id>,<table>,count);
$  external lists:  XXXXX(<id>,calibre)
$  external files:  XXXXX(<id>)

'a'list initialization+>kind+>item-cal-lb-up-fill:
   is item flag+item+texternal,get calibre+item+cal,
     get vlwb+item+lb, $ the init function
     T+" %p(%r,%d); /* %p */%n"+lb+item+cal+item;
   get calibre+item+cal,get vupb+item+up,get vlwb+item+lb,
     get fill+item+fill,
     T+" a_setup_list(%d,%r,%d,%t,%t,%d); /* %p */%n"
        +kind+item+cal+lb+up+fill+item.

'a'charfile initialization+>item-dir-id-ptr:
   is item flag+item+texternal, $ init function is in adm
     T+" %p(%r); /* %p */%n"+adm*ITEM[item]+item+item;
   (is item flag+item+toutfile,2->dir;0->dir),
     (is item flag+item+tinfile,incr+dir;+),
     get file data+item+id+ptr,get item def+id,
     T+" a_setup_charfile(%r,%d,%r,%r); /* %p */%n"
        +item+dir+id+ptr+item.
'f'count file area+>item+cnt>-list:
   1->cnt,(nxt:get file area+item+cnt+list,
      (list=0,decr+cnt;incr+cnt,:nxt)).
'a'datafile initialization+>item-dir-id-ptr-link-cnt:
   is item flag+item+texternal,
     T+" %p(%r); /* %p */%n"+adm*ITEM[item]+item+item;
   (is item flag+item+toutfile,2->dir;0->dir),
     (is item flag+item+tinfile,incr+dir;+),
     get file data+item+id+ptr,count file area+item+cnt,get item def+id,
     T+" a_setup_dfile(%r,%d,%r,%r,%d); /* %p */%n"+item+dir+id+ptr+cnt+item,
     1->cnt,(nxt:get file area+item+cnt+link,
            (link=0;
             get item def+link,
             T+"   a_add_filearea(%r,%r,%d); /* %p */%n"+item+link+cnt+link,
                incr+cnt,:nxt)).

'a'data initialization-item:
   T+"static void a_data_setup(void){%n",
   T+" a_virtual_min=%p;a_virtual_max=%p;%n"+min virtual address+max virtual address,
   <<ITEM->item,(nxt:item>>>ITEM;
     is item flag+item+timported,next+ITEM+item,:nxt;
     (=type*ITEM[item]=
       [Itable],list initialization+0+item;
       [Istack;Istatic stack],list initialization+1+item;
       +),next+ITEM+item,:nxt),
    <<ITEM->item,(nxt:item>>>ITEM;
      is item flag+item+timported,next+ITEM+item,:nxt;
      (=type*ITEM[item]=
        [Icharfile],charfile initialization+item;
        [Idatafile],datafile initialization+item;
       +), next+ITEM+item,:nxt),
   T+" a_list_fill(a_FILL);%n}%n".

$ ROOT DECLARATIONS ******************************************
$  generate  waitfor 
'table'MESSAGE=(
"rule waitfor: only empty module roots, not needed":waitfor has no effect
).
'a'proc waitfor-roots-item-sep:
    $ static void a_waitfor(<CALLTR>,Table,offset){
    $     a_MODROOT(module_root,"moduleid")
    $ if Table!=0 calls matching modules, otherwise
    $ all modules at most once.
    T+"static void a_waitfor(",$)$
    call trace arg+sep,arg sep+sep,T+"%w a_F1,%w a_F2){%n",
    (call stack=0;T+" a_addto_callstack(""waitfor"");%n"),
    0->roots,(nxt:get matter+roots+2+item,
        (scope*ITEM[item]=Squote image,:nxt; $ the main root
         T+" a_MODROOT(%r,""%p"")%n"+item+scope*ITEM[item],:nxt);
      T+"}%n").
'a'target main-roots-item-sep-main:
    $ generate waitfor if required or there are mod roots
    (waitfor used=0;module roots>0;warning+waitfor has no effect),
    ((waitfor used=0,module roots=0);proc waitfor),
    $ calls each module root then the main root
    T+"void a_ROOT(void){%n",
    (call stack=0;T+" a_addto_callstack_bottom();%n"),
    T+" a_data_setup();%n",
    0->roots->main,(nxt:get matter+roots+2+item,
      (scope*ITEM[item]=Squote image,item->main;+),:nxt;
    +),
    (module roots=0;T+" a_waitfor(",call trace call+sep,
           arg sep+sep,T+"0,0);%n"),
    (is+main,T+" %r("+main,call trace call+#,T+");%n}%n";
     corrupt ice file+_rule_).

$ RULE generation ********************************************
'variable'
  last profile=0.    $ profile link

'variable'
  this rule=0,       $ rule compiled now
  next node idx=0,   $ label of the next node, no jump to it
  called rule=0.     $ rule to be called

$ declaration head  and tail *********************************
'a'show formals as comment+>item-n-cnt-type:
  get number of formals+item+n,0->cnt,
  (nxt:cnt>=n;
    get formal+item+cnt+type,incr+cnt,
    (=type=
     [Iformal in],    T+"+>a";
     [Iformal out],   T+"+a>";
     [Iformal inout], T+"+>a>";
     [Iformal table], T+"+t[]";
     [Iformal stack], T+"+[]st[]";
     [Iformal file],  T+"+""""f";
     [Iformal anchor],T+"+@"),:nxt).
'a'declare locals+>minloc+>maxloc+>locptr:
   minloc=0;
   minloc>maxloc;
   BUFFER[locptr]=0,incr+minloc,incr+locptr,:declare locals;
   T+"%w a_L%d;"+minloc,incr+minloc,incr+locptr,:declare locals.
'a'declare callargs+>item+>C1+>C2+>C3-cnt:
   (C1=0;+),
   (C2=0;T+"%w a_P[%d];"+C2),
   (C3=0;get anchor count+item+cnt,$ even if cnt=1 $
        T+"%w *a_D=alloca(sizeof(%w)*(%d+%d*a_C));"+C3+cnt),
   print char+newline.
'a'rule declaration head+>rule+>C1+>C2+>C3+>rn+>minloc+>maxloc
              +>locptr+>cst-sep:
   $ rule declaration head, prototype, trace and count
   rule->this rule,add profiling def,
     rule typer+rule+sep,rule args+rule+sep,
     T+"{ /* %p"+tag*ITEM[rule],
     show formals as comment+rule,T+" */%n",
     add+minloc+locptr+locptr,declare locals+minloc+maxloc+locptr,
     declare callargs+rule+C1+C2+C3,
     $ trace and count: store rule name as static string
     (call stack=0;1->rn),
     (rn=0;T+" static const char *a_rulename=""%p"";%n"+rule),
     add call stack+cst,add profiling count,add tracing.
'a'rule declaration tail:
  T+"} /* %p */%n"+this rule.

$ profiling and tracing --------------------------------------
$  profiling: add a definition before the rule declaration
$     add a count inside the rule
$     declare a_profiles variable holding all counts (at the end)
'a'add profiling def:
   is item flag+this rule+rcount,
     (last profile=0,T+"a_profile_def(a_PF%d,""%p"",NULL);%n"
           +repr*ITEM[this rule]+this rule;
      T+"a_profile_def(a_PF%d,""%p"",&a_PF%d);%n"
           +repr*ITEM[this rule]+this rule+repr*ITEM[last profile]),
     this rule->last profile;
   +.         
'a'add profiling count:
   is item flag+this rule+rcount,
     T+" a_profiling(a_PF%d);%n"+repr*ITEM[this rule];
   +.
'a'profiling declaration:
   T+"a_PROFILE *a_profiles=",(last profile=0,T+"NULL;%n";
                 T+"&a_PF%d;%n"+repr*ITEM[last profile]).
$ tracing:
$    add trace_rule("rule",n,affix1,affix2,...)
'a'add tracing-n-m-cnt-type:
   is item flag+this rule+rtrace,get number of formals+this rule+n,
     0->cnt->m,
     (nxt:cnt>=n;
          get formal+this rule+cnt+type,incr+cnt,
          (type=Iformal out;incr+m),:nxt),
     T+" a_trace_rule(a_rulename,%d"+m,0->cnt,
     (nxt:cnt>=n;
          get formal+this rule+cnt+type,incr+cnt,
          (type=Iformal out;print char+/,/,formal argument+cnt),:nxt),
     T+");%n";
   +.
$ RULE BODY *************************************************
'table'MESSAGE=(
   "calibre"  :Tcalibre,
   "alwb"     :Tlwb,
   "aupb"     :Tupb,
   "vlwb"     :Tvlwb,
   "vupb"     :Tvupb,
   "a_r1"     :r1, $ variable storing classifier's value
   "a_r2"     :r2  $ another auxiliary variable
). 
$ labels ----------------------------------------------------
'a'Tlabel+>label+>nextidx:
   nextidx->next node idx,(label=0;print local label+label,print char+/:/).
'a'jump to label+>label:
   label=next node idx; $ don't jump $
   T+" %g%n"+label.

$ affixes ---------------------------------------------------
$ BUFFER[ptr] starts an affix; generate code for it
'a'T affix+>ptr:
   =BUFFER[ptr]=
   [Dcolon],incr+ptr,T affix inner+ptr;
   [Dnoarg],+;
   T affix inner+ptr.
'a'T affix inner+>ptr>-x:
   $ generate an affix from BUFFER[ptr]
   =BUFFER[ptr]=
   [Tformal;Tlocal;Titem],T+"%p"+ptr,incr+ptr,incr+ptr;
   [Tnumber],T+"%p"+ptr,incr+ptr,incr+ptr;
   [Dsub],incr+ptr,T index+ptr;
   T limit tail+BUFFER[ptr]+x,incr+ptr,
      T+"to_LIST(%p)->%p"+ptr+x,incr+ptr,incr+ptr.
'f'T limit tail+>what+code>:
   =what=
   [Dcalibre],Tcalibre->code;
   [Dlwb],    Tlwb->code;
   [Dupb],    Tupb->code;
   [Dvlwb],   Tvlwb->code;
   [Dvupb],   Tvupb->code;
   internal error+_rule_.
'a'T index+>ptr>-x:
   is item flag+this rule+rbounds, $ indexing with bound checking $
      T+"to_LIST(%p)->offset[a_listelem(%p,"+ptr+ptr,incr+ptr,
      incr+ptr,T affix inner+ptr,incr+ptr,
      subtr+BUFFER[ptr]+1+x,incr+ptr,T+",%d,a_rulename)]"+x;
   T+"to_LIST(%p)->offset["+ptr,incr+ptr,incr+ptr,T affix inner+ptr,
      $ BUFFER[ptr]=Dbus $incr+ptr,subtr+BUFFER[ptr]+1+x,
      incr+ptr,(x=0,T+"]";T+"-%d]"+x).

$ EXTENSION ******************************************************
$  BUFFER[affix+1] is the stack, then width, followed by
$  a linked list of affixes + target offsets
'a'extension block+>w+>st+>ptr-offs-x:
   incr+ptr,$ affix $
   ptr->offs,(nxt:BUFFER[offs]=Dplus;incr+offs,:nxt),incr+offs,
   (nxt:BUFFER[offs]<0;
        subtr+w+BUFFER[offs]+x,incr+x,incr+offs,
        T+"to_LIST(%p)->top[%d]="+st+x,:nxt),
   T affix+ptr,print char+/;/.
'a'T extension+>ptr+>label-st-w:
   incr+ptr,BUFFER[ptr]->w,incr+ptr,ptr->st,T+" a_extension(%p,%d);"+st+w,
   $ now L->top[1,2,...,k] works
   add+2+ptr+ptr, $ BUFFER[ptr] points to the affix; zero if no more $
   (nxt:extension block+w+st+ptr,BUFFER[ptr]->ptr,(ptr=0;:nxt)),
   T+"to_LIST(%p)->aupb+=%d;%n"+st+w,jump to label+label.

$ CLASSIFICATION *************************************************
$  BUFFER[affix+1] the affix; BUFFER[area+1] ... describes areas
$    <next>,<label>,lw,up,Dsemicolon,lw,up,Dplus

'p'numbers equal+>x+>y-yes:
    load register+0+x+x,load register+0+y+y,
    (reg compare2+Aeq+x+y,1->yes;0->yes),
    free register+x,free register+y,is+yes.

'a'box classifier+>ptr+v>:
  =BUFFER[ptr]= [Titem;Tlocal;Tformal;Tnumber],ptr->v;
     r1->v,T+"register %w %p="+v,T affix+ptr,T+";%n".

'q'is complete area+>ptr:
  BUFFER[ptr]=0,incr+ptr,incr+ptr,BUFFER[ptr]=target min int,incr+ptr,
     BUFFER[ptr]=target max int.

'a'T single if condition+>lw+>up+>v:
  numbers equal+lw+up,T+"%p==%t"+v+lw;
  numbers equal+lw+target min int,T+"%p<=%t"+v+up;
  numbers equal+up+target max int,T+"%p>=%t"+v+lw;
  T+"(%t<=%p && %p<=%t)"+lw+v+v+up.

'a'T if condition+>ptr+>v-lw-up:
  incr+ptr,BUFFER[ptr]->lw,incr+ptr,BUFFER[ptr]->up,
     T single if condition+lw+up+v,incr+ptr,
     (BUFFER[ptr]=Dsemicolon,T+"||",:T if condition;+).

'a'T jump to areas+>ptr+>v-goal-fgoal-nextptr:
  $ ptr: pointer to next; label to jump to if true;
  $  (lw,up), Dsemicolon or Dplus
  BUFFER[ptr]->nextptr,
    (nextptr=0, $ last case, may fail
        incr+ptr,BUFFER[ptr]->goal,
        T+" if(!(",T if condition+ptr+v,T+")){a_area_failed(a_rulename,%p);}%n"+v,
        (goal=next node idx;T+" %g"+BUFFER[ptr]);
    is complete area+nextptr,incr+ptr,BUFFER[ptr]->goal,
        incr+nextptr,BUFFER[nextptr]->fgoal,
        (goal=next node idx,(goal=fgoal;
           T+" if(!(",T if condition+ptr+v,T+")){%g}%n"+fgoal);
         T+" if(",T if condition+ptr+v,T+"){ %g}%n"+goal,
           (fgoal=next node idx;T+" %g"+fgoal));
    incr+ptr,T+" if(",T if condition+ptr+v,T+"){%g}%n"+BUFFER[ptr],
        nextptr->ptr,:T jump to areas).
'a'T box+>affix+>area-v:
  T+"{",incr+affix,box classifier+affix+v,incr+area,
    T jump to areas+area+v,T+"}%n".

$ RULE CALL *****************************************************

'a'T rule call+>tag+>n+>fnext+>tnext+>rep+>star+>ptr-x-type:
   $ tag   rule to be called
   $ n     total number of arguments including @
   $ fnext,tnext false, true node numbers
   $ rep   number of repeat items (not blocks)
   $ star  0/1 indicating if "@" is the last actual affix
   $ ptr   actual affixes start at BUFFER[ptr+1], linked
   $         Danchor is followed by <n> where
   $           n>0   number of repeat blocks
   $           n<=0  star=1, -n blocks follow plus @
   tag->called rule,incr+ptr, $ BUFFER[ptr] is the first affix 
   (is rule discarded+ptr+fnext+tnext,T+";%G%n"+tnext;
    is waitfor item+tag,gen waitfor+ptr+tnext;
    is assign item+tag,gen assignment+rep+star+ptr+tnext;
    is builtin rule+tag+x,
        (x=1,gen shiftaffix+fnext+tnext;gen getaffixno+n+ptr+tnext);
    is item flag+tag+rpidgin,
        regular call d1+fnext+tnext+type,
        pidgin rule call+ptr,
        regular call d2+type+fnext,
        regular call d3+type+fnext+tnext;
    regular call preload+ptr,
        regular call d1+fnext+tnext+type,
        regular rule call+ptr,
        regular call d2+type+fnext,
        regular call postload+ptr,
        regular call d3+type+fnext+tnext).

$ auxiliary rules -------------------------------------------------

'f'next affix+>ptr>:
   BUFFER[ptr]=Dplus,incr+ptr;
   incr+ptr,:next affix.
'q'is dummy affix+>ptr:
   =BUFFER[ptr]= [Dnoarg;Dcolon],+;-.

$ discarded call --------------------------------------------------
$ this should be moved to rules, and simplfy the node structure
$   (many further iterations ...
$  rule is discarded if function without valid out affixes,
$    or question with the same true and false label
'q'is rule discarded+>ptr+>fnext+>tnext-n-cnt-type:
    is item flag+called rule+rside effect,-; $ it has a side effect
    is item flag+called rule+rno return,-;   $ it is exit
    is item flag+called rule+rvararg,-;      $ has @
    is item flag+called rule+rcan fail,fnext=tnext;
    get number of formals+called rule+n,0->cnt,
      (nxt:cnt=n;
           is dummy affix+ptr,incr+cnt,next affix+ptr,:nxt;
           get formal+called rule+cnt+type,
             ((type=Iformal out;type=Iformal inout;type=Iformal anchor),-;
              incr+cnt,next affix+ptr,:nxt)).
$ builtin rules ---------------------------------------------------
'a'gen shiftaffix+>fnext+>tnext-w: $ shift affix block+@
   get anchor count+this rule+w,
    ((fnext=next node idx;
      fnext=tnext,next node idx->tnext;
      tnext!=next node idx),
         T+"if(a_C>1){a_C--;a_V+=%d;%G} %G%n"+w+tnext+fnext;
     $tnext=next node idx$
         T+"if(a_C<=1){%g} a_C--;a_V+=%d;%n"+fnext+w).
'a'gen getaffixno+>n+>ptr+>tnext:
   n!=2,corrupt ice file+_rule_;
   is dummy affix+ptr;
   T affix+ptr,T+"=a_C;%G%n"+tnext.
'a'gen waitfor+>ptr+>tnext-sep:
   T+" a_waitfor(",call trace call+sep,arg sep+sep,T affix+ptr,
     next affix+ptr,arg sep+sep,T affix+ptr,T+"); %G"+tnext.
$ assignment ------------------------------------------------------
'a'assignment source+>ptr+>star+v>+block>:
   =BUFFER[ptr]= [Titem;Tlocal;Tformal;Tnumber],ptr->v,
     (is+star,T+"{register %w %p;"+r2,1->block;0->block);
   r1->v,T+"{register %w %p="+v,T affix+ptr,
     (is+star,T+",%p"+r2;+),print char+/;/,1->block.
'a'gen assignment+>rep+>star+>ptr+>tnext-source-v-block-n-cnt:
   $ rep: one more than blocks after @ (@ is an extra)
   $ star: the last actual affix is the formal @
   $    X->b->c->d->@   (rep=5,star=1)
   $    X->b->c->d      (rep=4,star=0)
   $ ALEPH semantic requires evaluating assignment from left to
   $  right. The C double assignment a[i]=(i=3) is undefined;
   $  thus an ALEPH assignment is split into separate C assignments:
   $       b=X;c=X;d=X;for(i=0;i<a_C;i++)a_V[i]=X;
   $  if X is a slice, then it is assigned to a dummy int first
   $  as the index could change, example: L[x]->x->y,
   ptr->source,next affix+ptr, $ BUFFER[ptr]=Danchor $
   $ number of valid destinations goes to n
   0->n,1->cnt,(nxt:cnt>=rep;
     incr+cnt,next affix+ptr,
     (=BUFFER[ptr]= [Danchor;Dnoarg;Dcolon],+;incr+n),:nxt),
   $ if n>1 or star, store source
   ((n>1;is+star),assignment source+source+star+v+block;
    0->v->block),
   source->ptr,next affix+ptr,1->cnt,(nxt:cnt>=rep;
     incr+cnt,next affix+ptr,
     (=BUFFER[ptr]= [Danchor;Dnoarg;Dcolon],+;
       T affix+ptr,
       (v=0,print char+/=/,T affix+source,print char+/;/;
        T+"=%p;"+v)),:nxt),
   (star=0;T+"for(%p=0;%p<a_C;%p++)a_V[%p]=%p;"+r2+r2+r2+r2+v),
   (block=0;print char+/}/),T+"%G%n"+tnext.

$ regular call interface ------------------------------------------
$   may fail: <pre> if(<call>){ <post> GOTO <texit> }
$             <pre> if(!<call>){ GOTO <fexit> } <post>
$   cannot fail: <pre> <call> <post> GOTO <texit>
$   for exit rule, texit=0, add "return" or "return 1" (GOTO -1)
'a'repeat block preload+>ptr+>n+>rep+>out-size-bsz-cnt-type-dn:
   $ BUFFER[ptr]=Danchor,BUFFER[ptr+1]=size,
   $  size>0: number of blocks to a_P[]
   $  size=0: pass a_C, a_V (nothing to be done)
   $  size<0: blocks plus the formal blocks in a_V to a_D[]
   $ rep: first repeat affix
   $ n:   number of affixes
   $ out: first free index in a_A[]
   incr+ptr,BUFFER[ptr]->size,next affix+ptr,rep->dn,
    (size<0,0->out,subtr+0+size+cnt;size->cnt),
    get anchor count+called rule+bsz,mult+cnt+bsz+cnt,
    (nxt:cnt=0;
     get formal+called rule+dn+type,
     (type=Iformal out;
      size>0,T+"a_P[%d]="+out,T affix+ptr,print char+/;/;
      T+"a_D[%d]="+out,T affix+ptr,print char+/;/),
     incr+dn,(dn<n;rep->dn),decr+cnt,incr+out,next affix+ptr,:nxt),
    (size>=0; $ done, otherwise copy repeat block to a_D[out ...] $
     T+"memcpy(a_D+%d,a_V,a_C*%d*sizeof(%w));"+out+bsz).
'a'regular call preload+>ptr-n-cnt-out-type:
   get number of formals+called rule+n,0->cnt->out,
   $ before @ inout affixes go to a_A[out]
   (nxt:cnt=n;
    get formal+called rule+cnt+type,incr+cnt,
     (type=Iformal out,incr+out,next affix+ptr,:nxt;
      type=Iformal inout,T+"a_P[%d]="+out,incr+out,T affix+ptr,
            print char+/;/,next affix+ptr,:nxt;
      type=Iformal anchor,repeat block preload+ptr+n+cnt+out;
      next affix+ptr,:nxt)).
'a'repeat block call+>ptr+>out+>sep-size:
   (out=0;arg sep+sep,T+"a_P"),
   incr+ptr,BUFFER[ptr]->size,arg sep+sep,
   (size=0,T+"a_C,a_V)";
    size<0,subtr+0+size+size,T+"a_C+%d,a_D)"+size;
    out=0,T+"%d,a_P)"+size;
    T+"%d,a_P+%d)"+size+out).
'a'regular rule call+>ptr-n-cnt-out-sep-type:
   get number of formals+called rule+n,
   T+"%r("+called rule,0->cnt->out,$)$
   (is item flag+called rule+texternal,0->sep;call trace call+sep),
   (nxt:cnt=n,(out=0,$($print char+/)/;arg sep+sep,T+"a_P)");
     get formal+called rule+cnt+type,incr+cnt,
     ((type=Iformal out;type=Iformal inout),incr+out,next affix+ptr,:nxt;
      type=Iformal anchor,repeat block call+ptr+out+sep;
      arg sep+sep,T affix+ptr,next affix+ptr,:nxt)).
'a'repeat block postload+>ptr+>n+>rep+>out-size-bsz-dn-cnt-type:
   incr+ptr,BUFFER[ptr]->size,next affix+ptr,rep->dn,
   (size<0,0->out,subtr+0+size+cnt;size->cnt),
   get anchor count+called rule+bsz,mult+cnt+bsz+cnt,
   (nxt:cnt=0;
    get formal+called rule+dn+type,
      (is dummy affix+ptr;
       (type=Iformal out;type=Iformal inout),T affix+ptr,
          (size>0,T+"=a_P[%d];"+out;T+"=a_D[%d];"+out);
       +),
      incr+dn,(dn<n;rep->dn),decr+cnt,incr+out,next affix+ptr,:nxt),
   (size>=0; $ done, otherwise copy back repeat block from a_D[out] $
    T+"memcpy(a_V,a_D+%d,a_C*%d*sizeof(%w));"+out+bsz).
'a'regular call postload+>ptr-n-cnt-out-type:
   get number of formals+called rule+n,0->cnt->out,
   (nxt:cnt=n;
    get formal+called rule+cnt+type,incr+cnt,
      ((type=Iformal out;type=Iformal inout),
         (is dummy affix+ptr;T affix+ptr,T+"=a_P[%d];"+out),
         incr+out,next affix+ptr,:nxt;
       type=Iformal anchor,repeat block postload+ptr+n+cnt+out;
       next affix+ptr,:nxt)).
'a'regular call d1+>fnext+>tnext+type>:
   $ type=1:  if(<call>){ <post> GOTO <tnext>} GOTO <fnext>
   $ type=2:  if(!<call>){ GOTO <fnext>} <post> GOTO <tnext>
   $ type=0:  <call> <post> GOTO <tnext>
   is item flag+called rule+rcan fail,
     ((fnext!=next node idx,(tnext=next node idx;fnext<=0)),
           2->type,T+"if(!";
      1->type,T+"if(");
   0->type.
'a'regular call d2+>type+>fnext:
   type=1,T+"){"; 
   type=2,T+"){%G}"+fnext;
   print char+/;/.
'a'regular call d3+>type+>fnext+>tnext:
   type=1,T+"%G}%G%n"+tnext+fnext;
   type=2,T+"%G%n"+tnext;
   T+"%G%n"+tnext.

$ pidgin call interface -------------------------------------------
$  - function with dummy out affixes only: discard
$  - pidgin alt: append 0/1 for all out, discard dummy

'a'pidgin alt tagtail+>ptr-n-cnt-type:
   get number of formals+called rule+n,0->cnt,
   (nxt:cnt=n;
    get formal+called rule+cnt+type,incr+cnt,
      (type=Iformal out,(BUFFER[ptr]=Dnoarg,print char+/0/;print char+/1/);+),
      (type=Iformal anchor;next affix+ptr,:nxt)).
'a'pidgin repeat block+>ptr-size-cnt-rep:
   $ BUFFER[ptr]=Danchor
   incr+ptr,BUFFER[ptr]->size,next affix+ptr,print int+size,
   (size<0,subtr+0+size+cnt;size->cnt),
   get anchor count+called rule+rep,mult+cnt+rep+cnt,
   (nxt:cnt=0;
    print char+/,/,T affix+ptr,decr+cnt,next affix+ptr,:nxt),
   (size>0;T+",a_C,a_V").
'a'pidgin rule args+>ptr+>alt-n-cnt-sep-type:
   get number of formals+called rule+n,0->cnt->sep,
   (nxt:cnt=n;
    get formal+called rule+cnt+type,incr+cnt,
      (type=Iformal anchor,arg sep+sep,pidgin repeat block+ptr;
       ((type=Iformal out,is+alt,BUFFER[ptr]=Dnoarg);
        arg sep+sep,T affix+ptr),
       next affix+ptr,:nxt)).
'a'pidgin rule call+>ptr-alt:
    T+"%r"+called rule, # no tracing
    (is item flag+called rule+raltpidgin,1->alt,pidgin alt tagtail+ptr;0->alt),
    print char+/(/,pidgin rule args+ptr+alt,print char+/)/.

$ ROOT *******************************************************

'root'+.
'pragmat'endif=compile.
'end'

