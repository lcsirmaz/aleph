$ HEADER ************************************************** $
'pragmat'module="target".
$ generating code $
'a'open target,close target,delete target.
   $ manipulate target files $
'a'target prelude.
   $ header -- show modules and the main file marked by * $
'a'data declaration.
   $ data declaration and rule prototypes. Define stack, table,
   $  file offsets.
'a'data initialization.
   $ stack, table, and file structure initialization routines
'a'fill table head,fill table tail,data section iii,data section iv.
   $ stack and table filling 
'a'target main.
   $ generate 'wait for' external; call module roots, and
   $  the main root
'q'is pidgin rule+>item.
   $ the external rule uses pidgin call
'a'rule declaration head+>item+>C1+>C2+>C3+>minloc+>maxloc.
'a'Tlabel+>this+>next.
'a'T box+>ptr+>area,T extension+>ptr+>label.
'a'T rule call+>tag+>C1+>C2+>C3+>n+>fnext+>tnext
              +>rep+>star+>odummy+>idummy+>ptr.
'a'rule declaration tail.
$ BODY **************************************************** $
'pragmat'if=compile.
'pragmat'require=("item","data","lexical","error","rule").

$ manipulate target file ********************************** $
'charfile'TARGET="aleph.c">.
'table'MESSAGE=(
 "aleph.c"  :target file name,
 "cannot create target file %p" :cannot open target
).

$ seme externals 
'stack'(next,def)LEXT=(
   "@root"    ,(0,0):Sroot,
   "a_waitfor",(0,0):ext waitfor ).

'a'open target:
  open file+TARGET+/w/+MESSAGE+target file name;
  Ferror+cannot open target+target file name.
'a'close target:
  close file+TARGET.
'a'delete target:
  close target,unlink file+MESSAGE+target file name.  
$ naming convention *************************************** $
$  formal parameters: 
$     a_F%d     if not out/inout (serial number)
$     a_A[%d]   out/inout (count, starting at zero)
$     a_C       formal repeat count
$    *a_V       repeat block (indexed consecutively from zero)
$  local variables:
$     a_L%d     from 'min loc' to 'max loc', inclusive (d>=1)
$  labels:
$     a_G%d     d>1, the node number
$  actual parameters:
$     a_P[]     for out/inout, fixed size repeat block
$    *a_D       dynamic size repeat block
$  items:
$     a_%d      with the repr number of the item

$ print to TARGET file ==================================== $
'a'print char+>ch: put char+TARGET+ch.

'a'print int+>n:
   $ print n in decimal; min int does not end with 9
   n=min int, print char+/-/,subtr+-1+n+n,print int1+n+/1/;
   n<0, print char+/-/,get abs+n+n,print int1+n+/0/;
   print int1+n+/0/.
'a'print int1+>n+>c-q-r:
   divrem+n+10+q+r,(q=0; print int1+q+/0/),
        add+r+c+r, print char+r.
'a'print str+T[]+>ptr:
  put string+TARGET+T+ptr.

$ prefix, formal, local, actual arguments
'a'print prefix:
   print char+/a/,print char+/_/.
'a'print label prefix:
   print prefix,print char+/G/.
'a'local argument+>cnt:
   $ local affix
   print prefix,print char+/L/,print int+cnt.
'a'print int index+>c+>idx:
   print prefix,print char+c,print char+/[/,print int+idx,print char+/]/.
'a'formal argument+>cnt-i-type-out:
   $ formal affix of this rule
   0->i->out,(nxt:get formal+this rule+i+type,incr+i,
     ((type=Iformal out;type=Iformal inout),
        (i=cnt,print int index+/A/+out;incr+out,:nxt);
      type=Iformal repeat,subtr+cnt+i+i,
        (i<0,print prefix,print char+/C/;print int index+/V/+i);
      i=cnt,print prefix,print char+/F/,print int+cnt;
      :nxt)).
'a'print repr+>item:
   $ representation of an item
   was+ITEM+item,
     (get item def+item+item;+),
     (=type*ITEM[item]=
      [Iconstant;Ipointer constant],+;print prefix),
     print int+repr*ITEM[item];
   print ptr+item.
'a'print local label+>label:
   $ local label with prefix a_G
   print label prefix,print int+label.
'a'print goto+>label:
   $ -1: success return, -2: fail return; otherwise jump
   =label=
   [0],internal error+_title_+_line_;
   [-1],(is item flag+this rule+rcan fail,print str+" return 1;";print str+"return;");
   [-2],print str+" return 0;";
   print str+" goto ",print local label+label,print char+/;/.
'a'print GOTO+>label:
   $ goto only if label!=next node idx $
   label=next node idx;
   print goto+label.
$ print an affix ----------------------------------------- $
$ affixes are stored in BUFFER. The format character %p
$   prints a double item from BUFFER
'a'print BUFFER+>ptr:
  =BUFFER[ptr]=
  [Titem],incr+ptr,print repr+BUFFER[ptr];
  [Tconst],incr+ptr,print int+BUFFER[ptr];
  [Tlocal],incr+ptr,local argument+BUFFER[ptr];
  [Tformal],incr+ptr,formal argument+BUFFER[ptr];
  internal error+_title_+_line_.
'a'print ptr+>p:
  was+ITEM+p,tag*ITEM[p]->p,:print ptr;
  was+LEXT+p,get tag image+p+p,print str+LEXT+p;
  was+MESSAGE+p,print str+MESSAGE+p;
  was+BUFFER+p,print BUFFER+p;
  internal error+_title_+_line_.

'a'T+t[]+*+>fmt-ptr-optr:
$ formal characters:
$   r: item, get repr
$   g: goto (return or goto)
$   n: newline
$   p: pointer
$   d: integer
  >>BUFFER->optr,unpack string+t+fmt+BUFFER,add+optr+1+ptr,
  (nxt:>>BUFFER<ptr;
    BUFFER[ptr]!=/%/,print char+BUFFER[ptr],incr+ptr,:nxt;
    incr+ptr,(>>BUFFER>ptr,print char+/%/;
      (=BUFFER[ptr]=
       [/r/],(shift affix block+*,print repr+fmt;print char+/?/),incr+ptr,:nxt;
       [/g/],(shift affix block+*,print goto+fmt;print char+/?/),incr+ptr,:nxt;
       [/G/],(shift affix block+*,print GOTO+fmt;print char+/?/),incr+ptr,:nxt;
       [/n/],print char+newline,incr+ptr,:nxt;
       [/d/],(shift affix block+*,print int+fmt;print char+/?/),incr+ptr,:nxt;
       [/p/],(shift affix block+*,print ptr+fmt;print char+/?/),incr+ptr,:nxt;
       print char+BUFFER[ptr],incr+ptr,:nxt))),
  (shift affix block+*,print str+"[...]";+),
  unstack to+BUFFER+optr.

$ prelude ************************************************* $
$  head of the generated c file, show module names
'a'target prelude-ptr:
  T+"/* ALEPH TARGET FILE%n% * modules:",
  <<ITEM->ptr,(nxt:ptr>>>ITEM;
   (=type*ITEM[ptr]=
    [Dtitle],T+" *%p"+tag*ITEM[ptr];
    [Dmodule],T+" %p"+tag*ITEM[ptr];
    +),next+ITEM+ptr,:nxt),
  T+"%n */%n#include ""A_lice.h""%n%n".
$ main root *********************************************** $
$  generate the 'wait for' external rule.
$     for each module, a_MROOT() generates a procedure which
$     a) checks if it was waiting for;
$     b) if yes, has been executed;
$     c) if not, executes the module's root
$     d) if just executing, aborts the programs
$    rule 'wait for' just calls all these procedures until
$     some returns true (or aborts).
$  a_ROOT() calls initialization, all module roots, and
$    the main root.
'f'is waitfor+>ptr+>w>:
  $ check if the 'wait for' external has ever been called
  is+w;
  (get item def+ptr+ptr,is item flag+ptr+texternal,
    tag*ITEM[ptr]=ext waitfor),1->w;+.
'a'proc waitfor-ptr-head:
  $ create the external 'wait for' rule
  T+"int a_waitfor(int a_F1,int a_F2){%n",
  <<ITEM->ptr,0->head,(nxt:ptr>>>ITEM;
  (=type*ITEM[ptr]=
   [Dmodule],tag*ITEM[ptr]->head;
   [Dtitle],0->head;
   [Irule],(head=0;Sroot!=tag*ITEM[ptr];
     T+" if(a_R%r(a_F1,a_F2)){return 1;}%n"+ptr);
   +),next+ITEM+ptr,:nxt),
   T+" return 0;%n}%n".
'a'target main-ptr-head-w:
  $ for each module create a rule which executes
  $  the module root if it was called for
  <<ITEM->ptr,0->head,0->w,(nxt:ptr>>>ITEM;
   (=type*ITEM[ptr]=
    [Dmodule],tag*ITEM[ptr]->head;
    [Dtitle],0->head;
    [Irule],is waitfor+ptr+w,(head=0;Sroot!=tag*ITEM[ptr];
       T+"a_MROOT(%r,""%p"")%n"+ptr+head);
    +),next+ITEM+ptr,:nxt),
  $ generate 'wait for' if this external is used 
  (w=0;proc waitfor),
  $ procedure a_ROOT calls initialization and the
  $  root of each module, then the main root
  T+"void a_ROOT(void){%n a_data_setup();%n",
       <<ITEM->ptr,0->head,(nxt:ptr>>>ITEM;
   (=type*ITEM[ptr]=
    [Dmodule],tag*ITEM[ptr]->head;
    [Dtitle],0->head;
    [Irule],(head=0;Sroot!=tag*ITEM[ptr];
      T+" a_R%r(0,0); /* %p */%n"+ptr+head);
    +),next+ITEM+ptr,:nxt),
  <<ITEM->ptr,0->head,(nxt:ptr>>>ITEM;
    (=type*ITEM[ptr]=
     [Dmodule],0->head;
     [Dtitle],tag*ITEM[ptr]->head;
     [Irule],(head=0;Sroot!=tag*ITEM[ptr];
      T+" %r(); /* %p */%n"+ptr+head);
    +),next+ITEM+ptr,:nxt),
  T+"}%n".
$ rule declaration **************************************** $
$  prototype for (external) rules with standard call 
$  external rules with pidgin call have no prototypes (they
$     can be #define's)
$  static/extern int/void <ID>(parameters);
$    (int a_F1,int a_F3,int a_A[3],int a_C,int *a_V)

'a'rule typer+>item:
  is item flag+item+rcan fail,T+"static int %r("+item;T+"static void %r("+item.
'a'external rule typer+>item:
  is item flag+item+rcan fail,T+"extern int %p("+tag*ITEM[item];
  T+"extern void %p("+tag*ITEM[item].
'a'arg sep+>sep>:
  sep=0,1->sep;print char+/,/.
'a'out args+>out+>sep>:
  out=0;arg sep+sep,T+"int a_A[%d]"+out.
'a'rule args+>item-n-cnt-type-out-sep:
  get number of formals+item+n,0->cnt->out->sep,
  (nxt: cnt<n,get formal+item+cnt+type,incr+cnt,
     ((type=Iformal out;type=Iformal inout),incr+out,:nxt;
      type=Iformal repeat,out args+out+sep,arg sep+sep,
               T+"int a_C,int *a_V)";
      arg sep+sep,T+"int a_F%d"+cnt,:nxt);
   (n=0,T+"void";out args+out+sep),print char+/)/).
$ check if the external rule uses pidgin parameter passing
'q'is pidgin rule+>item-x:
  $ check if the string starts with a letter
  is item flag+item+texternal,
  get tag image+tag*ITEM[item]+x,string elem+LEXT+x+0+x,
    (=x=[/a/:/z/;/A/:/Z/],-;+).
$  declaration
$    a_L%d     local
$    a_P[%d]   actual out/inout paramters, fixed repeat block
$   *a_D       dynamic repeat block content
'variable'this rule=0. $ This rule
'a'show formals as comment+>item-n-cnt-type:
  get number of formals+item+n,0->cnt,
  (nxt:cnt>=n;
    get formal+item+cnt+type,incr+cnt,
    (=type=
     [Iformal in],    T+"+>a";
     [Iformal out],   T+"+a>";
     [Iformal inout], T+">a>";
     [Iformal table], T+"+t[]";
     [Iformal stack], T+"+[]st[]";
     [Iformal file],  T+"+""""f";
     [Iformal repeat],T+"+*"),:nxt).
'a'declare locals+>minloc+>maxloc:
  minloc=0;
  minloc<=maxloc,T+"int a_L%d;"+minloc,incr+minloc,:declare locals;
  +.
'a'declare callargs+>item+>C1+>C2+>C3-cnt:
  (C2=0;T+"int a_P[%d];"+C2),
  (C3=0;get repeat count+item+cnt,$ even if cnt=1 $
        T+"int *a_D=alloca(sizeof(int)*(%d+%d*a_C));"+C3+cnt).
$ trace and profiling
'a'add rule name as static:
   is item flag+this rule+rspecial,
     T+" static char *a_rulename=""%p"";%n"+this rule;
   +.
'a'add profiling:
   is item flag+this rule+rcount,
     T+" static a_PROFILE a_profile={0ul,NULL,NULL};%n"
       " a_PROFILING(a_profile,a_rulename);%n";
   +.
'a'add tracing-n-cnt:
   is item flag+this rule+rtrace,get number of formals+this rule+n,
     0->cnt,T+" a_trace_rule(a_rulename,%d"+n,
     (nxt:cnt<n,print char+/,/,incr+cnt,formal argument+cnt,:nxt;+),
     T+");%n";
   +.
         
'a'rule declaration head+>rule+>C1+>C2+>C3+>minloc+>maxloc:
   $ rule declaration head, prototype, trace and count
   rule->this rule,rule typer+rule,rule args+rule,
    T+"{ /* %p"+tag*ITEM[rule],
    show formals as comment+rule,T+" */%n",
    declare locals+minloc+maxloc,
    declare callargs+rule+C1+C2+C3,
    $ trace and count: store rule name as static string
    add rule name as static,add profiling,add tracing.
'a'rule declaration tail:
  T+"} /* %p */%n"+this rule.

$ data declaration ***************************************** $
$ apart from rule prototypes, variables, list, files are
$ defined.
$  variable:   static int a_1099=<initial value>; /* <tag> */
$  list,file:  #define a_1101 (a_1100+sizeof_LIST); /* <tag> */
$ external
$  variable:   extern int XXXX;
$  constant:   extern int XXXX;
$  list:       extern void XXXX(int,int); /* initializer */
$  file:       extern void XXXX(int);     /* initializer */
$ an external constant can be a procedure call or a global
$  variable, but not a #define value.

'table'MESSAGE=(
  "sizeof_LIST"   :sizeof list,
  "sizeof_CHFILE" :sizeof chfile,
  "sizeof_DFILE"  :sizeof dfile,
  "BLOCK_TOTAL"   :block total
).

'p'external plain declaration+>item:
  $ variable or constant; prototye definition
  is item flag+item+texternal,T+"extern int %p;%n"+tag*ITEM[item].
'a'var declaration+>item:
  external plain declaration+item;
  T+"static int %r=%d; /* %p */%n"+item+adm*ITEM[item]+tag*ITEM[item].
'a'block declaration+>item+>prev+>sf:
  $ list, file declaration; this defines the offset only
  T+"#define %r ("+item,
  (prev=0,T+"0";T+"%r+%p"+prev+sf),
  T+") /* %p */%n"+tag*ITEM[item],
  (is item flag+item+texternal,
    T+"extern void %p(int,int);%n"+tag*ITEM[item];+).
'a'rule prototype+>item: $ prototype $
  is pidgin rule+item;   $ no prototype $
  is builtin rule+item+#;$ standard rule
  is item flag+item+texternal,external rule typer+item,
          rule args+item,T+";%n";
  rule typer+item,rule args+item,T+"; /* %p */%n"+tag*ITEM[item].
'a'data declaration-ptr-def-prev-sf:
  0->prev->sf,<<ITEM->ptr,(nxt:ptr>>>ITEM;
  (get item def+ptr+def,ptr!=def),next+ITEM+ptr,:nxt;
  (=type*ITEM[ptr]=
   [Iconstant],(external plain declaration+ptr;+);
   [Ivariable;Istatic var],var declaration+ptr;
   [Istack;Itable;Istatic stack],
       block declaration+ptr+prev+sf,ptr->prev,sizeof list->sf;
   [Icharfile],
       block declaration+ptr+prev+sf,ptr->prev,sizeof chfile->sf;
   [Idatafile],
       block declaration+ptr+prev+sf,ptr->prev,sizeof dfile->sf;
   [Irule], rule prototype+ptr;
   +),
   next+ITEM+ptr,:nxt),
  (prev=0,T+"#define %p 0%n"+block total;
          T+"#define %p (%r+%p)%n"+block total+prev+sf),
  T+"int a_DATA_BLOCK[%p]; /* stack, table, charfile, datafile */%n"
    +block total.

$ FILL table ********************************************** $
$  generate the fill table with all fillings. 
$   where: list id, or -1, followed by a sequence of blocks
$     n=0: last block
$     n>0: block of n items
$     n<0: repeat the previous block -n times
'a'push BUFFER+>x: (* x->BUFFER *)BUFFER.

'a'fill table head:
  T+"static int a_FILL[]={ /* fill table */%n".
'a'fill table tail:
  T+"-1}; /* fill table */%n".

'a'const item+v>:
  RR+Tconst+v;
  must+Titem+v,(get item def+v+v;+),
  (=type*ITEM[v]=
   [Iconstant;Ipointer constant],repr*ITEM[v]->v;
   internal error+_title_+_line_).
'a'fill item+size>-v:
  R+Dopen,0->size,(nxt:R+Dclose;
        incr+size,const item+v,push BUFFER+v,:nxt);
  1->size,const item+v,push BUFFER+v.
'p'fill repeater+rep>:
  R+Dstar,const item+rep.
'a'flush buffer+>size+>last+>ptr:
  incr+ptr,(size=0;T+"%d,"+size),
  (nxt:size=0;T+"%d,"+BUFFER[ptr],incr+ptr,decr+size,:nxt),
  (last=0;T+"%d,"+last),
  (nxt:last=0;T+"%d,"+BUFFER[ptr],incr+ptr,decr+last,:nxt).
'a'skip fill initializer:
  R+Dcolon,must+Titem+#,:skip fill initializer;+.
'a'fill entries-list-obuff-size-last-rep:
   must+Titem+list,must+Tconst+#, $ lineno $
    T+"%r,/* %p */%n"+list+tag*ITEM[list],>>BUFFER->obuff,0->size,
    (nxt:R+Dpoint;
         fill item+last,
           (fill repeater+rep,flush buffer+size+last+obuff,
               T+"-%d,%n"+rep,
               unstack to+BUFFER+obuff,0->size;
            add+size+last+size),
           skip fill initializer,:nxt),
    flush buffer+size+0+obuff,unstack to+BUFFER+obuff,
    T+"0,%n".
'a'skip entry:
   R+Dpoint;next symbol,:skip entry.
'a'data section iii:
   $ third pass; generate entries to the table
   (nxt:R+Dexpression,skip entry,:nxt;
        R+Dlist,skip entry,:nxt;
        R+Dfile,skip entry,:nxt;
        R+Dfill,fill entries,:nxt;
        +).
$ RULE call generation ************************************ $
$ generate the rules
'a'data section iv:
   (nxt:R+Dexpression,skip entry,:nxt;
        R+Dlist,skip entry,:nxt;
        R+Dfile,skip entry,:nxt;
        R+Dfill,skip entry,:nxt;
        +),
   (nxt:R+Drule,make rule,:nxt;+),
   (R+Dend;corrupted ice file+_title_+_line_).
$ global
'variable'
  next node idx=0,   $ label of the next node, no jump to it
  called rule=0.     $ rule to be called

$ jump to labels ------------------------------------------ $
$ label generation
'a'Tlabel+>label+>nextidx:
  nextidx->next node idx,(label=0;print local label+label,print char+/:/).
'a'jump to label+>label:
  label=next node idx; $ don't jump $
  T+" %g%n"+label.

$ code generation ----------------------------------------- $
'table'MESSAGE=(
   "calibre"  :Tcalibre,
   "alwb"     :Tlwb,
   "aupb"     :Tupb,
   "vlwb"     :Tvlwb,
   "vupb"     :Tvupb,
   "a_r1"     :r1, $ variable storing classifier's value
   "a_r2"     :r2
). 
$ BUFFER[ptr] starts an affix; generate code for it
'f'T limit tail+>what+code>:
   =what=
   [Dcalibre],Tcalibre->code;
   [Dlwb],    Tlwb->code;
   [Dupb],    Tupb->code;
   [Dvlwb],   Tvlwb->code;
   [Dvupb],   Tvupb->code;
   corrupted ice file+_title_+_line_.
'a'T affix+>ptr:
   =BUFFER[ptr]=
   [Dcolon],incr+ptr,T affix inner+ptr;
   [Dnoarg],+;
   T affix inner+ptr.
'a'T affix inner+>ptr>-x:
   $ generate an affix from BUFFER[ptr]
   =BUFFER[ptr]=
   [Tformal;Tlocal;Titem;Tconst],T+"%p"+ptr,incr+ptr,incr+ptr;
$ TODO: list with bound checks $
   [Dsub],incr+ptr,T+"to_LIST(%p)->offset["+ptr,incr+ptr,incr+ptr,
      T affix inner+ptr,$ BUFFER[ptr]=Dbus $incr+ptr,subtr+BUFFER[ptr]+1+x,
      incr+ptr,(x=0,T+"]";T+"-%d]"+x);
   T limit tail+BUFFER[ptr]+x,incr+ptr,
      T+"to_LIST(%p)->%p"+ptr+x,incr+ptr,incr+ptr.

$ rule call ----------------------------------------------- $
$ called rule, next node idx are there
'a'gen shiftaffix+>fnext+>tnext-w:
   $ shift affix block+*
   get repeat count+this rule+w,
    ((fnext=next node idx;
      fnext=tnext,next node idx->tnext;
      tnext!=next node idx),
         T+"if(a_C>1){a_C--;a_V+=%d;%G}%G%n"+w+tnext+fnext;
     $tnext=next node idx$
         T+"if(a_C<=1){%g} a_C--;a_V+=%d;%n"+fnext+w).
         
'a'gen getaffixno+>n+>ptr+>tnext:
   n!=2,corrupted ice file+_title_+_line_;
   BUFFER[ptr]=Dnoarg; $  dummy affix
   BUFFER[ptr]=Dcolon; $  out affix not used
   T affix+ptr,T+"=a_C;%G%n"+tnext.

'f'next affix+>ptr>:
   BUFFER[ptr]=Dplus,incr+ptr;
   incr+ptr,:next affix.

'a'assignment source+>ptr+>star+v>+block>:
   =BUFFER[ptr]= [Titem;Tlocal;Tformal;Tconst],ptr->v,
     (is+star,T+"{register int %p;"+r2,1->block;0->block);
   r1->v,T+"{register int %p="+v,T affix+ptr,
     (is+star,T+",%p"+r2;+),print char+/;/,1->block.

'a'gen assignment+>rep+>star+>ptr+>tnext-source-v-block-n-cnt:
   $ rep: one more than affixes after * (including star)
   $ star: the last actual affix is the formal *
   $    X->b->c->d->*   (rep=5,star=1)
   $       b=X;c=X;d=X;for(i=0;i<a_C;i++)a_V[i]=X;
   ptr->source,next affix+ptr, $ BUFFER[ptr]=Dstar $
   $ compute number of valid destinations to n
   0->n,1->cnt,(nxt:cnt>=rep;
     incr+cnt,next affix+ptr,
     (=BUFFER[ptr]= [Dstar;Dnoarg;Dcolon],+;incr+n),:nxt),
   $ if n>1 or star, store source
   ((n>1;is+star),assignment source+source+star+v+block;
    0->v->block),
   source->ptr,next affix+ptr,1->cnt,(nxt:cnt>=rep;
     incr+cnt,next affix+ptr,
     (=BUFFER[ptr]= [Dstar;Dnoarg;Dcolon],+;
       T affix+ptr,
       (v=0,print char+/=/,T affix+source,print char+/;/;
        T+"=%p;"+v)),:nxt),
   (star=0;T+"for(%p=0;%p<a_C;%p++)a_V[%p]=%p;"+r2+r2+r2+r2+v),
   (block=0;print char+/}/),T+"%G%n"+tnext.

'a'T rule call+>tag+>C1+>C2+>C3+>n+>fnext+>tnext
              +>rep+>star+>odummy+>idummy+>ptr-x:
   tag->called rule,incr+ptr, $ BUFFER[ptr] is the first affix $
   (is builtin rule+tag+x,
        (x=2,gen shiftaffix+fnext+tnext;
         x=3,gen getaffixno+n+ptr+tnext;
         gen assignment+rep+star+ptr+tnext);
    +).

$ extension ----------------------------------------------- $
$  BUFFER[affix+1] is the stack, then width, followed by
$  a linked list of affixes + target offsets
'a'extension block+>w+>st+>ptr-offs-x:
   incr+ptr,$ affix $
   ptr->offs,(nxt:BUFFER[offs]=Dplus;incr+offs,:nxt),incr+offs,
   (nxt:BUFFER[offs]<0;
        subtr+w+BUFFER[offs]+x,incr+x,incr+offs,
        T+"to_LIST(%p)->top[%d]="+st+x,:nxt),
   T affix+ptr,print char+/;/.
'a'T extension+>ptr+>label-st-w:
   incr+ptr,BUFFER[ptr]->w,incr+ptr,ptr->st,T+" a_extension(%p,%d);"+st+w,
   $ now L->top[1,2,...,k] works
   add+2+ptr+ptr, $ BUFFER[ptr] points to the affix; zero if no more $
   (nxt:extension block+w+st+ptr,BUFFER[ptr]->ptr,(ptr=0;:nxt)),
   T+"to_LIST(%p)->aupb+=%d;%n"+st+w,jump to label+label.

$ classification ------------------------------------------ $
$  BUFFER[affix+1] the affix; BUFFER[area+1] ... describes areas

'a'box classifier+>ptr+v>:
  =BUFFER[ptr]= [Titem;Tlocal;Tformal;Tconst],ptr->v;
     r1->v,T+"register int %p="+v,T affix+ptr,T+";%n".

'q'is complete area+>ptr:
  BUFFER[ptr]=0,incr+ptr,incr+ptr,BUFFER[ptr]=min int,incr+ptr,BUFFER[ptr]=max int.

'a'T single if condition+>lw+>up+>v:
  lw=up,T+"%p==%d"+v+lw;
  lw=min int,T+"%p<=%d"+v+up;
  up=max int,T+"%p>=%d"+v+lw;
  T+"(%d<=%p && %p<=%d)"+lw+v+v+up.

'a'T if condition+>ptr+>v-lw-up:
  incr+ptr,BUFFER[ptr]->lw,incr+ptr,BUFFER[ptr]->up,
     T single if condition+lw+up+v,incr+ptr,
     (BUFFER[ptr]=Dsemicolon,T+"||",:T if condition;+).

'a'T jump to areas+>ptr+>v-goal-fgoal-nextptr:
  $ ptr: pointer to next; label to jump to if true;
  $  (lw,up), Dsemicolon or Dplus
  BUFFER[ptr]->nextptr,
    (nextptr=0, $ last case, may fail
        incr+ptr,BUFFER[ptr]->goal,
        T+" if(!(",T if condition+ptr+v,T+")){a_area_failed(%p);}%n"+v,
        (goal=next node idx;T+" %g"+BUFFER[ptr]);
    is complete area+nextptr,incr+ptr,BUFFER[ptr]->goal,
        incr+nextptr,BUFFER[nextptr]->fgoal,
        (goal=next node idx,(goal=fgoal;
           T+" if(!(",T if condition+ptr+v,T+")){%g}%n"+fgoal);
         T+" if(",T if condition+ptr+v,T+"){%g}%n"+goal,
           (fgoal=next node idx;T+" %g"+fgoal));
    incr+ptr,T+" if(",T if condition+ptr+v,T+"){%g}%n"+BUFFER[ptr],
        nextptr->ptr,:T jump to areas).

'a'Tbox+>affix+>area-v:
  T+"{",incr+affix,box classifier+affix+v,incr+area,
    T jump to areas+area+v,T+"}%n".
$ DATA SETUP ********************************************** $
$  setup list and file data structures. As file area uses
$    list bounds, lists should come first. Add external list
$    and file initializations. Call list_FILL which adds
$    all fillings.
$  void a_data_setup(void){ ... }
$   a_setup_list(0/1,<id>,calibre,lb,ub,fill size);
$   a_setup_chfile(<id>,direction,<stringtable>,<stringptr>);
$   a_setup_dfile(<id>,direction,<stringtable>,<stringptr>,number of areas);
$      a_add_filearea(<id>,<table>,<hash>);
$

'a'list initialization+>kind+>item-cal-lb-up-fill:
   is item flag+item+texternal,get calibre+item+cal,
     T+" %p(%r,%d);%n"+tag*ITEM[item]+item+cal;
   get calibre+item+cal,get vupb+item+up,get vlwb+item+lb,
     get fill+item+fill,
     T+" a_setup_list(%d,%r,%d,%d,%d,%d); /* %p */%n"
        +kind+item+cal+lb+up+fill+tag*ITEM[item].

'a'charfile initialization+>item-dir-id-ptr:
   is item flag+item+texternal,
     T+" %p(%r);%n"+tag*ITEM[item]+item;
   (is item flag+item+toutfile,2->dir;0->dir),
     (is item flag+item+tinfile,incr+dir;+),
     get file data+item+id+ptr+#,
     T+" a_setup_charfile(%r,%d,%r,%r); /* %p */%n"
        +item+dir+id+ptr+tag*ITEM[item].
'f'count file area+>p+cnt>:
   0->cnt,(nxt:p=0;incr+cnt,get file link+p+#+#,:nxt).
'a'datafile initialization+>item-dir-id-ptr-link-cnt:
   is item flag+item+texternal,
     T+" %p(%r);%n"+tag*ITEM[item]+item;
   (is item flag+item+toutfile,2->dir;0->dir),
     (is item flag+item+tinfile,incr+dir;+),
     get file data+item+id+ptr+link,count file area+link+cnt,
     T+" a_setup_dfile(%r,%d,%r,%r,%d); /* %p */%n"+item+dir+id+ptr+cnt+tag*ITEM[item],
     (nxt:link=0;
        get file link+link+cnt+id,
        T+"   a_add_filearea(%r,%r,%d);%n"+item+id+cnt,:nxt).

'a'data initialization-ptr-def:
   T+"static void a_data_setup(void){%n",
   <<ITEM->ptr,(nxt:ptr>>>ITEM;
    (get item def+ptr+def,ptr!=def),next+ITEM+ptr,:nxt;
     (=type*ITEM[ptr]=
       [Itable],list initialization+0+ptr;
       [Istack;Istatic stack],list initialization+1+ptr;
       +),
    next+ITEM+ptr,:nxt),
    <<ITEM->ptr,(nxt:ptr>>>ITEM;
    (get item def+ptr+def,ptr!=def),next+ITEM+ptr,:nxt;
     (=type*ITEM[ptr]=
       [Icharfile],charfile initialization+ptr;
       [Idatafile],datafile initialization+ptr;
       +),
      next+ITEM+ptr,:nxt),
   T+" a_list_fill(a_FILL);%n}%n".

$ ROOT **************************************************** $
'root'wait for+"lexical";+.
'pragmat'endif=compile.
'end'

