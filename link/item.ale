$ item.ale
'pragmat'module="item".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH)
$
$  (C) 2020-2022, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER *************************************************** $
$ read all items from the .ice file

'a'convert to item.
   $ the item for I<idx>
'q'is builtin rule+>item+idx>.
'f'get calibre+>item+x>,get ssel+>item+x>,get fill+>item+x>,
   get vupb+>item+x>,get vlwb+>item+x>,get list link+>item+x>.
'a'put vupb+>item+>x,put vlwb+>item+>x,put fill+>item+>x,
   put list link+>item+>x.
   $ item is a list, get/set data
'f'get number of formals+>item+n>,get formal+>item+>i+type>,
   get repeat count+>item+cnt>.
   $ item is a rule, get number and type of formal affixes
'f'get file data+>item+id>+ptr>+link>,get file link+>link>+hash>+id>.

'q'is item flag+>item+>flag.
'a'set item flag+>item+>flag.
'a'clear item flag+>item+>flag.
'q'get item def+>item+def>.
   $ if item is imported, return the defining item

'a'advance base item+flag>.
'a'head section+>flag.
'a'skip head section.
   $ process/skip head section of the next input file
'a'item section.
'a'skip item section.
   $ process/skip item section of a module/main
'a'file entry.
   $ handles a file entry; storing all details 
'a'check all items.
   $ check that imported tags have a definition

'f'find item lineno+>item+line>+str>+module>.
   $ %i format: find line/source (module) for an item
'f'find lineno+>old+line>+str>.
   $ %l format: find a place in this module

$ item flags $
'constant'
  tpublic	= 0x0004, $ public 
  timported	= 0x0008, $ imported
  texternal	= 0x0010, $ external
$ constant, pointer constant
  tvalue	= 0x0020, $ repr contains the final value
  teval		= 0x0040, $ constant expression is under evaluation
$ file
  tinfile	= 0x0020, $ direction in file declaration
  toutfile	= 0x0040,
$ rule flags
  rside effect	= 0x0100, $ 'a','p'
  rcan fail	= 0x0200, $ 'q','p'
  rno return	= 0x0400, $ 'e'
  rvararg	= 0x8000, $ has formal *
  routvararg	=0x10000, $ has out formal vararg
  rtrace      =0x1000000, $ trace=on, print when enter the rule
  rcount      =0x2000000, $ count=on, profiling
  rbounds     =0x4000000, $ bound checks
$ rule types
  rfunc		=0,
  raction	=rside effect,
  rque		=rcan fail,
  rpred		=rside effect|rcan fail,
  rexit		=rno return,
  rtype		=rside effect|rcan fail|rno return,
  rspecial	=rtrace|rcount|rbounds.

'stack'(flag,type,tag,lineno,adm,repr)ITEM.

$ BODY *************************************************** $
'pragmat'if=compile.

'pragmat'require=("lexical","input","error","version").

$ ITEM stack --------------------------------------------- $
'stack'[20](flag,type,tag,lineno,adm,repr)ITEM.
$ type:  Irule      adm => formals
$        variable   adm => expression (to be evaluated)
$        list       adm => vlwb,vupb,fill,calibre,ssel (+link)
$        pointer    adm => list
$        file       adm => (off,table,link) for string
$ tag:   LEXT entry; data*tag is the global definition
$ lineno:definition line in this module 
$
$ for a module head:
$        tag    => module title
$        type   => Dmodule/Dtitle
$        flag   => use extension
$        adm    => definition list in AUX
$        repr   => link to the following module head
$        lineno => maximal lineno value in this module
$

'a'expand ITEM:
  (* 0->flag->type->tag->lineno->adm->repr *) ITEM.

'q'is item flag+>item+>flag-x:
  bool and+flag*ITEM[item]+flag+x,is+x.
'a'set item flag+>item+>flag:
  bool or+flag*ITEM[item]+flag+flag*ITEM[item].
'a'clear item flag+>item+>flag-mask:
  bool invert+flag+mask,bool and+mask+flag*ITEM[item]+flag*ITEM[item].
'q'get item def+>item+def>:
  is item flag+item+touter,get tag data+tag*ITEM[item]+def.
'a'convert to item:
   addmult+inpt value+<>ITEM+base item+inpt value.
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - -  $
'constant'
  tglobal	= tpublic|timported|texternal,
  touter	= timported|texternal,
  titem mask	= tglobal|rtype|rvararg|routvararg|
                        rtrace|rcount|rbounds.
  
$ AUX stack ---------------------------------------------- $
'stack'[10](vlwb,vupb,fill,calibre=count,width=ssel=item,link=data=AUX)AUX.
$ adm*rule => <count,width,link>
$  followed by <count> many formal types; formal lists have two
$  additional entries: calibre and ssel; <width> is the total 
$  width of the list
$  each formal list is stored only once (linear search)
$ adm*list => <vlwb,vupb,fill,calibre,ssel,link>
$  where vlwb,vupb also stores size estimate,
$  size
$ adm*file => <count,item,link>
'a'push AUX+>x: (* x->data *)AUX.

$ compatibility ------------------------------------------ $
'table'MESSAGE=(
  "%p: incompatible types at %i and %i" :incompatible global types,
  "%p: mixing external at %i and %i"    :incompatible external,
  "%p: doubly defined at %i and %i"     :doubly defined,
  "%p: no definition, requested at %i"  :not defined
).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - - -  $
'q'stack size mismatch+>item1+>item2-x1-x2:
  (get ssel+item1+x1,get ssel+item2+x2,x1!=x2);
  (get calibre+item1+x1,get calibre+item2+x2,x1!=x2).

'q'unequal types+>type1+>type2:
  type1=type2,-;
  type1=Iconstant,type2=Ipointer constant,-;
  type1=Ipointer constant,type2=Iconstant,-;
  +.

'q'incompatible types+>item1+>item2-type:
  (type*ITEM[item1]->type,unequal types+type+type*ITEM[item2]);
  type=Irule,adm*ITEM[item1]!=adm*ITEM[item2];  $ have different formal list $
  (type=Istack;type=Itable;type=Istatic stack),stack size mismatch+item1+item2;
  -.

'a'check compatibility+>tag+>item1+>item2:
   incompatible types+item1+item2,error+incompatible global types+tag+item1+item2;
   is item flag+item1+texternal,
     (is item flag+item2+texternal;error+incompatible external+tag+item1+item2);
   is item flag+item2+texternal,error+incompatible external+tag+item2+item1;
   is item flag+item1+tpublic,
     (is item flag+item2+tpublic,error+doubly defined+tag+item1+item2;+);
   is item flag+item2+tpublic,put tag data+tag+item2;
   +.

'a'enter item+>item-tag-def:
   is item flag+item+tglobal, $ if not global, don't do anything
     tag*ITEM[item]->tag,get tag data+tag+def,
     (def=0,put tag data+tag+item;
      check compatibility+tag+def+item);
   +.

$ item interface ----------------------------------------- $
'variable'link formals=0. $ link all formals $

'f'get calibre+>item+x>: calibre*AUX[adm*ITEM[item]]->x.
'f'get ssel+>item+x>: ssel*AUX[adm*ITEM[item]]->x.
'f'get vupb+>item+x>: vupb*AUX[adm*ITEM[item]]->x.
'f'get vlwb+>item+x>: vlwb*AUX[adm*ITEM[item]]->x.
'f'get fill+>item+x>: fill*AUX[adm*ITEM[item]]->x.
'f'get list link+>item+x>:link*AUX[adm*ITEM[item]]->x.
'a'put vlwb+>item+>x: x->vlwb*AUX[adm*ITEM[item]].
'a'put vupb+>item+>x: x->vupb*AUX[adm*ITEM[item]].
'a'put fill+>item+>x: x->fill*AUX[adm*ITEM[item]].
'a'put list link+>item+>x:x->link*AUX[adm*ITEM[item]].

'f'get number of formals+>item+n>: count*AUX[adm*ITEM[item]]->n.
'f'get formal+>item+>i+type>-p:
   (adm*ITEM[item]->p,i>=count*AUX[p]),0->type;
   incr+p,add+i+p+p,AUX[p]->type.
'f'get repeat count+>item+cnt>-p-n:
   0->cnt,adm*ITEM[item]->p,count*AUX[p]->n,
   (nxt:n=0;
        decr+n,incr+p,(AUX[p]=Iformal repeat,n->cnt;:nxt)).

'f'get file data+>item+id>+ptr>+link>-p:
  adm*ITEM[item]->p,item*AUX[p]->id,count*AUX[p]->ptr,link*AUX[p]->link.

'f'get file link+>link>+hash>+id>:
  link=0,0->id->hash;
  count*AUX[link]->hash,item*AUX[link]->id,link*AUX[link]->link.

$ item section ******************************************** $
'q'compare formals+>p1+>p2-w:
   count*AUX[p1]=count*AUX[p2],
   width*AUX[p1]->w,width*AUX[p2]=w,(nxt:w=0;
     incr+p1,incr+p2,AUX[p1]=AUX[p2],decr+w,:nxt).

'a'search formals+>old+>ptr>-link:
   link formals->link,
   (nxt:link=0,link formals->link*AUX[ptr],ptr->link formals;
    compare formals+link+ptr,unstack to+AUX+old,link->ptr;
    link*AUX[link]->link,:nxt).

'a'formal affixes+>formals+>cnt-x1-x2-type:
  cnt=0;
  decr+cnt,must+Ttype+type,push AUX+type,
    ((type=Iformal stack;type=Iformal table),
       must+Tconst+x1,must+Tconst+x2,
       formal affixes+formals+cnt, $ store the rest $
       incr+width*AUX[formals],push AUX+x1,
       incr+width*AUX[formals],push AUX+x2;
     :formal affixes).

'a'store formal affixes+formals>-cnt-old:
   must+Tconst+cnt,>>AUX->old,
     (* cnt->count->width,0->link *)AUX,>>AUX->formals,
     formal affixes+formals+cnt,
     search formals+old+formals.

'a'store list bounds+bounds>-cal-ssel:
   must+Tconst+cal,must+Tconst+ssel,
   (* 0->vlwb->vupb->fill,cal->calibre,ssel->ssel,-1->link *)AUX,
   >>AUX->bounds.

'f'check item ID+>ID:
   ID=>>ITEM;corrupted ice file+_title_+_line_.

'a'read item-ID-flag-lineno:
   expand ITEM,
   must+Ttype+type*ITEM,must+Titem+ID,check item ID+ID,
   must+Tconst+flag,bool and+flag+titem mask+flag*ITEM,
   must+Tconst+lineno,
   (lineno<=0;
    lineno>max lineno,corrupted ice file+_title_+_line_;
    lineno->lineno*ITEM),
   (=type*ITEM=
    [Irule], store formal affixes+adm*ITEM;
    [Istack;Itable;Istatic stack],store list bounds+adm*ITEM;
    [Iconstant;Ivariable;Istatic var;Ipointer constant;
     Ichar file;Idata file],+;
    corrupted ice file+_title_+_line_),
   must+Tstring+tag*ITEM, enter item+>>ITEM.

'a'item section:
   was error;
   (nxt:R+Dpoint; read item,:nxt).

'a'skip item section:
   R+Dpoint;next symbol,:skip item section.

$ file entry ********************************************** $
'f'check type+>item+>type:
  (=type*ITEM[item]=
   [Icharfile;Idatafile],type!=Dfile;
   [Itable;Istack;Istatic stack],type!=Dlist;
   +),corrupted ice file+_title_+_line_;
  +.
'a'file area+>ptr-list-hash:
  R+Dsub,(nxt:R+Dbus;
          must+Titem+list,check type+list+Dlist,must+Tconst+hash,
          (* hash->count,list->item,0->link *)AUX, 
          >>AUX->link*AUX[ptr],>>AUX->ptr,:nxt);
  +.
'a'file entry-item-ptr-x:
   $ I8 [I9 670911447 I75 208619606 I77 -1497425117 I76 -1890251351 ]2 I1 I168 .
   $ <item> Dsub (<tag> <hash>)* Dbus 
   $     <direction 0..3> <stdstr> <ptr> Dpoint
   must+Titem+item,check type+item+Dfile,
     (* 0->count->item->link *)AUX,>>AUX->ptr->adm*ITEM[item],
     file area+ptr,must+Tconst+x, $ direction $
     ((x=1;x=3),set item flag+item+tinfile;+),
     ((x=2;x=3),set item flag+item+toutfile;+),
     must+Titem+x,x->item*AUX[ptr],  $ item, @StringTable $
     must+Titem+x,x->count*AUX[ptr], $ pointer constant $
     must+Dpoint+#.

$ string table ******************************************** $
$ @StringTable and @@make is defined here
'stack'(next,def)LEXT=(
  "@StringTable",   (0,0):StdString,
  "@@make",         (0,0):Sassignment,
  "shiftaffixblock",(0,0):Sshiftaffix,
  "getaffixblockno",(0,0):Sgetaffixno
).
'constant'
  tassignment	= texternal|rvararg|routvararg,
  tshiftaffix	= tpublic|rpred.  

'a'add stdstring:
  (* 0->vlwb->vupb->fill,1->calibre->ssel,-1->link *)AUX,
  (* tpublic->flag,Itable->type,0->lineno,StdString->tag,
            >>AUX->adm,0->repr *)ITEM,
  put tag data+StdString+>>ITEM.

'a'add assignment external-old:  $ >in+*+out> $
   >>AUX->old,(* 3->count->width,0->link *)AUX,
   (* tassignment->flag,Irule->type,0->lineno,Sassignment->tag,
           >>AUX->adm,0->repr *)ITEM,
   push AUX+Iformal in,push AUX+Iformal repeat,push AUX+Iformal out,
   search formals+old+adm*ITEM,put tag data+Sassignment+>>ITEM.
'a'add shiftaffix external-old: $ +* $
   >>AUX->old,(* 1->count->width,0->link *)AUX,
   (* tshiftaffix->flag,Irule->type,0->lineno,Sshiftaffix->tag,
           >>AUX->adm,0->repr *)ITEM,
   push AUX+Iformal shift,
   search formals+old+adm*ITEM,put tag data+Sshiftaffix+>>ITEM.
'a'add getaffixno external-old: $ +>n + * $
   >>AUX->old,(* 2->count->width,0->link *)AUX,
   (* tpublic->flag,Irule->type,0->lineno,Sgetaffixno->tag,
           >>AUX->adm,0->repr *)ITEM,
   push AUX+Iformal out,push AUX+Iformal shift,
   search formals+old+adm*ITEM,put tag data+Sgetaffixno+>>ITEM.

'q'is builtin rule+>item+idx>:
  =tag*ITEM[item]=
  [Sassignment],1->idx;
  [Sshiftaffix],2->idx;
  [Sgetaffixno],3->idx;
  -.
$ head section ******************************************** $
$ each module has an ITEM entry linked through the repr field
'variable'
   max lineno=0,   $ maximal lineno in this module
   base item=0,    $ ITEM[base] describes this module
   first item=0.   $ the first module starts here

'table'MESSAGE=(
  "module with the same title ""%p""" :same title,
  "two main modules: ""%p"" and ""%p""":two main modules,
  "no main module":no main module,
  "incompatible .ice format": incompatible format
).

'a'check module title-ptr:
   first item->ptr,(nxt:ptr=0;
     (type*ITEM=Dtitle,type*ITEM[ptr]=Dtitle),
        error+two main modules+tag*ITEM+tag*ITEM[ptr];
     tag*ITEM=tag*ITEM[ptr],warning+same title+tag*ITEM;
     repr*ITEM[ptr]->ptr,:nxt).
'a'check ice compat-n:
   must+Tconst+n,
     (n=target word size;
      error+incompatible format,corrupted ice file+_title_+_line_),
   must+Tconst+n,
     (n=max stack size;
      error+incompatible format,corrupted ice file+_title_+_line_),
   must+Tconst+n,
     (n=max repeat size;
      error+incompatible format,corrupted ice file+_title_+_line_).
'a'read definition list-n-str:
   must+Tconst+n,
     (n>=max lineno,n->max lineno;
      corrupted ice file+_title_+_line_),
     must+Tstring+str,
     (* n->width,str->data *)AUX,
     (adm*ITEM=0,>>AUX->adm*ITEM;+),
     (R+Dpoint;:read definition list).

'a'head section+>flag:
  expand ITEM, flag->flag*ITEM,
  (R+Dmodule,Dmodule->type*ITEM;
   R+Dtitle,Dtitle->type*ITEM,set target file;
   corrupted ice file+_title_+_line_),
  must+Tstring+tag*ITEM, check module title, $ warn for the same title 
  check ice compat, $target word size, stack sizes
  0->max lineno,read definition list,max lineno->lineno*ITEM,
  $ finally link them $
  (base item=0,>>ITEM->first item;>>ITEM->repr*ITEM[base item]),
  >>ITEM->base item.
  
'a'advance base item+flag>:
$  (base item=0;repr*ITEM[base item]->base item),
  (base item=0,first item->base item;repr*ITEM[base item]->base item),
  (base item=0,0->flag;
    lineno*ITEM[base item]->max lineno,
    flag*ITEM[base item]->flag).

'a'skip head section:
  R+Dpoint;next symbol,:skip head section.

$ find position ******************************************* $
'f'search for line+>ptr+>old+line>+str>:
   (old<=1;old>lineno*ITEM[ptr]),0->line,Squote image->str;
   adm*ITEM[ptr]->ptr,old->line,
      (nxt:old>width*AUX[ptr],subtr+old+width*AUX[ptr]+line,add+ptr+2+ptr,:nxt;
           data*AUX[ptr]->str).

'f'find lineno+>old+line>+str>:
   base item=0,old->line,Squote image->str;
   search for line+base item+old+line+str.

'f'find item lineno+>item+line>+str>+module>-ptr-nptr:
   first item->ptr,
   (nxt:repr*ITEM[ptr]->nptr,((is+nptr,nptr<item),nptr->ptr,:nxt;+)),
   tag*ITEM[ptr]->module,search for line+ptr+lineno*ITEM[item]+line+str.

$ check if all items are defined ************************** $
'a'check all items-ptr-def-main:
  <<ITEM->ptr,0->main,(nxt:ptr>>>ITEM;
  (type*ITEM[ptr]=Dtitle,1->main;type*ITEM[ptr]=Dmodule),
     next+ITEM+ptr,:nxt;
  get item def+ptr+def,
     (is item flag+def+tpublic;
      is item flag+def+texternal;
      error+not defined+tag*ITEM[ptr]+ptr),next+ITEM+ptr,:nxt;
  next+ITEM+ptr,:nxt),
  (main=1;error+no main module).

$ ROOT **************************************************** $

'root'add stdstring,add assignment external,
      add shiftaffix external,add getaffixno external.
'pragmat'endif=compile.
'end'

