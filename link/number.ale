$ hadnling target numbers for ALEPH
'pragmat'module=number,title="number v2.0".

$ *************************************************************
$  This code is part of ALEPH-M (Modular ALEPH-v2)
$
$  (C) 2020-2023, L.Csirmaz
$
$  ALEPH-M is a free software, your can redistribute and/or
$  modify it under the terms of the GNU General Public License
$  as published by the Free Software Foundation, either version
$  3 of the License, or (at your option) any later version.
$
$  ALEPH-M is distributed in the hope that it will be useful,
$  but  WITHOUT ANY WARRANTY; without even the implied warranty
$  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
$  the GNU General Public License for more details.
$
$ ************************************************************* 

$ HEADER ****************************************************** $
$ target numbers are stored in the NUMBER[] stack,
$    each number occupies one or more consecutive slots.
$ actual arithmetic operations depend on the target word size
$    and performed in the arithmetic module.

$ target numbers
'f'get number zero+x>.
   $ return pointer to the zero target value
'a'get target number value+>x+n>.
   $ get target number value: list estimator and fill repeat
   $ works for non-negative small numbers only
'a'enter const string+>sign+>ptr+x>.
   $ store the decimal string from BUFFER[ptr+1],
   $   each entry is /0/ .. /9/;  error if overflow
'a'get number repr+>x.
   $ get the decimal representation of NUMBER[x] to BUFFER

$ target strings
'a'enter target string+>ptr+width>+x>.
   $ a traget string, return a number; followed by width calls of
'a'next target string value+>cnt>+x>.
   $ fails if cnt<1, otherwise returns the next string number

$ enhanced register functions
'a'load register+>type+>x+reg>.
   $ type=0: number, type=1: const, type=2: register
'a'store register+>reg+x>.
   $ store register value as a number and free it
'q'minmax registers+>reg1+>reg2.
   $ if reg1=target min, reg2=targat max

'static''variable'target min int,target max int.
   $ NUMBERs containing these values

$ BODY ******************************************************** $
'pragmat'if=compile.

'pragmat'require=("arithm","lexical","error","config").

'variable' zero ptr=0. $ the zero value in NUMBER

'static''variable'target max int=0,target min int=0.
'variable'rtarget min=0,rtarget max=0,max decimal=0.
   $ registers with these values
'variable'last digit=0.
   $ the last digit value in decimal repr.

'stack'[2]NUMBER.

'a'extend BUFFER+>x: (* x->BUFFER *)BUFFER.

$ maximal target word is all 1 of length target word size.
$ in decimal it is written as 65536; max decimal=6553,
$ last digit=7 (for the decimal representation of min int).
$   max int:     0111 1111 1111
$   min int:     1000 0000 0000

'a'load register+>type+>x+reg>:
   type=0,read register+NUMBER+x+reg;
   type=2,dupl register+x+reg;
   putcst register+x+reg.

'q'same number block+>x-y-cnt:
   >>NUMBER->y,0->cnt,(nxt:cnt>=target word width;
     NUMBER[x]=NUMBER[y],incr+cnt,decr+x,decr+y,:nxt).
'a'store register+>reg+x>-old-cnt:
   >>NUMBER->old,zero ptr->x,0->cnt,write register+reg+NUMBER, $top of NUMBER
   (nxt:x>old; $ new
        same number block+x,unstack to+NUMBER+old; $ found
        cnt>100,>>NUMBER->x;
        incr+cnt,add+x+target word width+x,:nxt).

$ target numbers ******************************************************
'f'get number zero+x>: zero ptr->x.
   $ NUMBER with zero value
'a'get target number value+>ptr+n>-v:
   $ return the value of a target number, works for small positive numbers
   read register+NUMBER+ptr+v,getcst register+v+n.

'a'get digit+>ptr+d>:
   =BUFFER[ptr]=
   [/0/:/9/],subtr+BUFFER[ptr]+/0/+d;
   internal error+_rule_.

'a'add digit+>v+>d-w:
   $ v*10+d -> v
   putcst register+10+w,reg operator+Atimes+w+v,
   putcst register+d+w, reg operator+Aplus+w+v.
'a'enter const string+>sign+>ptr+x>-v-d:
   $ BUFFER[ptr+1] constains /0/../9/ digits, store as NUMBER
   putcst register+0+v,incr+ptr,(nxt:ptr>>>BUFFER;
     (get digit+ptr+d,reg compare2+Alt+v+max decimal),add digit+v+d,incr+ptr,:nxt;
     reg compare2+Alt+v+max decimal,corrupt ice file+_rule_;
     d<last digit,add digit+v+d,incr+ptr,:nxt;
     d<last digit,corrupt ice file+_rule_;
     (is+sign,ptr=>>BUFFER),add digit+v+d,incr+ptr,:nxt;
     corrupt ice file+_rule_),
   (is+sign,reg operator+Aneg+v+v;+),store register+v+x.

'a'get number repr+>x-v:
   $ get the decimal representation of NUMBER[x] to BUFFER.
   $ use (-1-target max int) for target min int
  (read register+NUMBER+x+v,reg compare2+Aeq+rtarget min+v),
       $ it is target min int
       free register+v,extend BUFFER+/(/,extend BUFFER+/-/,
       extend BUFFER+/1/,extend BUFFER+/-/,
       dupl register+rtarget max+v,get register repr+v,
       extend BUFFER+/)/;
   reg compare+Alt0+v, $ it is negative
       reg operator+Aneg+v+v,extend BUFFER+/-/,get register repr+v;
   get register repr+v.

'a'get register repr+>x-v-w:
   $ release register x at the end, >=0
   dupl register+x+v,putcst register+10+w,reg operator+Adiv+w+v,
   (reg compare+Aeq0+v;dupl register+v+w,get register repr+w),
   $ v is x/10
   putcst register+10+w,reg operator+Atimes+w+v,reg operator+Aminus+v+x,
   $ now x is the remainder, print it
   getcst register+x+w,add+w+/0/+w,extend BUFFER+w.

'q'minmax registers+>reg1+>reg2:
    reg compare2+Aeq+reg1+rtarget min,reg compare2+Aeq+reg2+rtarget max.

$ target strings ******************************************************
'a'enter target string+>ptr+width>+x>-n-i-v:
   $ pack the characters in BUFFER[ptr+1]... and create a representation
   $  make the utf-8 encoding, and then store it in NUMBERS in reverse
   $  order. For now it is done for 32 bit targets only.
   subtr+>>BUFFER+ptr+n,pack string+BUFFER+n+LEXT,
      copy string+LEXT+>>LEXT+BUFFER,unstack string+LEXT,
      string width+BUFFER+>>BUFFER+width,width->i,
      (nxt:i<1,>>NUMBER->x;
           load register+1+BUFFER+v,write register+v+NUMBER,
                 decr+i,unstack+BUFFER,:nxt).

'a'next target string value+>cnt>+x>-ptr:
   cnt>1,decr+cnt,>>NUMBER->ptr,subtr+ptr+target word width+ptr,
       unstack to+NUMBER+ptr,>>NUMBER->x;
   cnt=1,decr+cnt,>>NUMBER->ptr,subtr+ptr+target word width+ptr,
       unstack to+NUMBER+ptr,0->x;
   0->x.

$ initialize **********************************************************
'a'initialize numbers-v-w-i:
   $ create the first entry in NUMBER
   putcst register+0+v,write register+v+NUMBER,>>NUMBER->zero ptr,
   $
   putcst register+0+rtarget max,     $ 0111 1111 1111 1111
   putcst register+1+v,1->i,          $ 0000 0010 0000 0000
   (nxt:i>=target word size;
        dupl register+v+w,reg operator+Aor+w+rtarget max,
        dupl register+v+w,reg operator+Aplus+w+v, $ shift left
        incr+i,:nxt),
   $ now v=target min int
   dupl register+v+rtarget min,       $ 1000 0000 0000 0000
   free register+v,
   dupl register+rtarget max+max decimal,putcst register+10+w,
      reg operator+Adiv+w+max decimal,
   dupl register+max decimal+w,putcst register+10+v,
      reg operator+Atimes+v+w,dupl register+rtarget max+v,
      reg operator+Aminus+w+v, getcst register+v+last digit,
      incr+last digit,
   store register+rtarget min+target min int,
   store register+rtarget max+target max int.

'root' waitfor+"arithmetic",initialize numbers.

'pragmat'endif=compile.

'end'







