$ node generation
'pragmat'module="node".
$ HEADER ***************************************************** $
'a'generate rule+>rtag.

$ BODY ******************************************************* $
'pragmat'if=compile,prototype=none.
$
$ generate nodes for rules, also apply some optimization.
$ node types:
$  -  call
$  -  extension
$  -  classifier
$  -  head / tail
$ A call has zero, one or two exits; a classifier has one exit
$  for each alternative (one of them must succeed); an
$  extension has one exit. Eventually, each exit is a label of
$  some node.
$ There are three no-op nodes: +, -, jump. After assigning labels
$  the are left out. As a final optimization, identical nodes can
$  be merged, this can trigger further merging.
$ ----------------------------------------------------------- $
$ Data flow is recalculated for formal in/out/inout and local
$  variables to see if set variables are actually used; if not
$  then the assignment can be skipped. It requires traversing
$  the flow backwards.
$ Each compound block stores a flag for all relevant formal/local
$  -- at entry v has a value and it is used
$     Example: at 2 this flag is set and "2->v" cannot be
$     optimized out:
$        1->v, (l1: use v, (l2:condition,:l1; 2->v,:l2))
$              ^1          ^2
$ 
$ A backward pass computes it. Suppose we are at the RULE or
$ EXTENSION and  have this bit at the (potential) T and the F
$ exits. I the RULE is an 'exit', clear. Otherwise get it
$ from T, modify by the out affix (if any). If the RULE can
$ fail, OR the F bit, and add the in affix (if any). 
$ A "jump" retrieves the bit from the destination, or clear if
$ it is not there.
$ PLUS retrieves the bit from T exit, MINUS from the F exit.
$ A compound block gets the T and F bits, and returns the front bit.
$
$ In compound block, the T exit at the semicolon is the T exit 
$  of the block; otherwise it is the actual value.
$ The F exit is the F exit of the block for non-heads, for a head
$  it is the T value of the next head, or the F exit of the block
$  if this is the last alternative.

$ OPEN of the compound block is followed by entries for all in/out/
$  /inout/local up to that block.
$   UTused, UFused <- final values, set when entering the region
$   Uflag          <- to be computed, this is the final value
$   Ualt           <- value at the next alternative

$ the RULE stack is filled
$
$   NODE	<NODE entry>
$   use		formal/local 
$   FALSE	0/*RULE (label, optional)
$   use/set/spare formal/local (if true)
$   TRUE	0/*RULE (label)
$   SINK
$
$   JUMP	*LLOC entry
$   PLUS	0/*RULE
$   MINUS	0/*RULE
$
$   OPEN	number of saved flags; a JUMP points here
$   0		<flags for each relevant formal/local>
$
$   CLOSE	*RULE (the OPEN pair)
$
$   SCOLON	0 (semicolon to separate alternatives)
$   HEAD	0 (just after the head to indicate that this it is)

$ 'stack'(orepr=calibre,otype=ssel,flag,type,repr,tag)LLOC=().
$  for formal list, calibre and ssel is here; calibre=-1 if no selector list
$  type: Iformal XXX -- formal              tag: offset for in/out/inout/local
$        Ilocal  -- local                   otherwise -1
$        Imacro  -- textual replacement     repr: QBUFFER ptr, tag: formal (LADM)
$        Ilabel  -- label                   repr: RULE ptr

'pragmat'require=("disc","tags","types","display","buffer","ice","symbols"
).

$ definitions from buffer
'stack'(flag,data)RULE.

$ run data flow several times
$  1) prepare diagnostics: do not expand macros;
$  2) diagnostics: do not store anything
$  3) prepare generation: expand macros
$  4) node generation (with full affix expansion)

'variable'
  expand flag=0,  $ expand macros $
  addRULE flag=3, $ push RULE adds new entry;
                  $   3: create RULE entries, fill data (before 1 and 2)
                  $   2: generate code
                  $   1: diagnostics
  RULEtop=0.      $ RULE top pointer when RULEflag=0
'a'push RULE+>flag+>data:
   next+RULE+RULEtop,(addRULE flag=3,extend RULE+flag+data; +).


'constant'
  Umark		= 0x100000,
  Uopen		= 0x100001, $ followed by many 0 for formal/local flags
  Uclose	= 0x100002, $ points back to Uopen
  Uhead		= 0x100003, $ after the head of an alternative
  Unode		= 0x100004, $ rule,extension
  Utrue		= 0x100005, $ true exit
  Ufalse	= 0x100006, $ false exit
  Usink		= 0x100007, $ 'exit' rule
  Uplus		= 0x100008, $ +
  Uminus	= 0x100009,
  Ujump		= 0x10000a,
  Ubox		= 0x10000b,
  Uuse		= 0x100011, $ formal/local used here
  Uset		= 0x100012, $ formal/local set
  Uspare	= 0x100013, $ formal/local set but not used later
  Usemicolon	= 0x10000f.

$ --------------------------------------- $
$ create LLOC stack entries for formals;
$  fill calibre and ssel for lists
'a'setup formal stack+>rtag-formal-type:
  $ this is called only once for the rule
  scratch+LLOC,get adm+rtag+formal,
  (nxt:formal=0;
    get type+formal+type,
    (* -1->repr,type->type,formal->tag,0->flag->calibre->ssel *)LLOC,
    ((type=Iformal stack;type=Iformal table),
       get formal calibre+formal+calibre*LLOC,
       get formal ssel+formal+ssel*LLOC;
     +),get adm+formal+formal,:nxt).
'a'setup label+label>:
  $ compound block: if has a label, create the LLOC entry
  Q+Dlabel,must Qtag+label,
    (* 0->repr,Ilabel->type,label->tag,0->flag->orepr->otype*)LLOC,
    >>LLOC->label;
  0->label.
'a'setup locals-local:
  $ compound block: create LLOC entry for each local
  Q+Dlocal,(nxt:Q+Dcolon;
    must Qtag+local,
    (*-1->repr,Ilocal->type,local->tag,0->flag->orepr->otype*)LLOC,
    :nxt);
  +.
$ rule structure =========================================== $

'variable'min local=0,max local=0. $ number of local affixes $

'a'count local+>cnt+>loc:
  addRULE flag!=3;
  type*LLOC[loc]!=Ilocal;
  (min local=0,cnt->min local;+),
  max+cnt+max local.
'pragmat'macro=count local.

'a'start range+>label+rloc>-loc-cnt:
  push RULE+Uopen+0,RULEtop->rloc,(is+label,rloc->repr*LLOC[label];+),
  <<LLOC->loc,0->cnt,(nxt:loc>>>LLOC;
    (=type*LLOC[loc]=
     [Iformal in;Iformal out;Iformal inout;Ilocal],
        incr+cnt,push RULE+0+loc,
        (repr*LLOC[loc]<0,cnt->repr*LLOC[loc],
             count local+cnt+loc,
             diagnose local+rloc+cnt+loc;
         +);
     +),
    next+LLOC+loc,:nxt).
'a'close range+>rloc:
  push RULE+Uclose+rloc.
$ use/set values ------------------------------------ $
'constant'
  Uin		=0x234501,
  Uout		=0x234502,
  Uinout	=0x234503,
  Uslicein	=0x234511,
  Usliceout	=0x234512,
  Usliceinout	=0x234513.
'f'utype to slice+>in+out>:bool or+in+0x10+out.
'q'in utype+>utype-x:bool and+utype+1+x,x!=0.
     $ used before the call
'q'out utype+>utype-x:bool and+utype+2+x,x!=0.
     $ used after the call
$ macro replacement --------------------------------- $
'a'expand macro+>tag-loc-Qa-Qb-dpos-dnum-mpos-mnum:
  $ tag has the rmacro flag; it behaves as a compound block
  $ formals of the macro are on LLOC with type Imacro or Ilocal
  >>LLOC->loc,
  macro call head+tag+Qa+Qb,save disc position+dpos+dnum,
    search macro rule+tag+mpos+mnum,restore disc position+mpos+mnum,
    (addRULE flag=2,w rule body;g rule body),mustQ+Dpoint,
  restore disc position+dpos+dnum,macro call tail+Qa+Qb,
  unstack to+LLOC+loc.

$ OPTIMIZATION ====================================== $
$ read the rule, populate the RULE stack, 
$   traverse it, then read the rule again.
$ this part populates RULE; rule names start with "g"

$ BUFFER
'a'push BUFFER+*+>x: 
  extend BUFFER+x,(shift affix block+*,:push BUFFER;+).

$ extension ----------------------------------------- $
'a'g transport list:
  g simple affix+Uin+#,$ skip destination
    (nxt:Q+Dto,(Qcons+#;must Qtag+#),:nxt;+),
    (Q+Dextension;Qahead+Dend;:g transport list).
'a'g extension:
  must Qtag+#,push RULE+Unode+0,g transport list,push RULE+Utrue+0.
$ classification ------------------------------------ $
$ if addRULE flag=3 then store classification areas in a linked
$  list in BUFFER so that whole classification can be generated
$  The Utrue data of the box is the first classification Unode;
$  the classification Unode data is a BUFFER pointer.
'a'g read box:
    push RULE+Unode+0,g simple affix+Uin+#,push RULE+Utrue+0,
    push RULE+Ubox+0,mustQ+Dbox.
'a'g area+buff>-x:
    addRULE flag!=3,Qskip+Darea,0->buff;
    >>BUFFER->buff,get linenum+x,push BUFFER+Dconst+x,
    (nxt:Q+Darea,extend BUFFER+Dplus;
      Q+Dcolon,extend BUFFER+Dcolon,:nxt;
      Q+Dsemicolon,extend BUFFER+Dsemicolon,:nxt;
      Qcons+x,push BUFFER+Dconst+x,:nxt;
      must Qtag+x,extend BUFFER+x,:nxt).
'a'g classification-last-buff:
    mustQ+Darea,g area+buff,
    push RULE+Unode+buff,push RULE+Ufalse+0,RULEtop->last,push RULE+Utrue+0,
    push RULE+Uhead+0,g alt tail,
    (Q+Dsemicolon,push RULE+Usemicolon+0,:g classification;
     $ the last area does not have false branch
     Umark->flag*RULE[last]).
$ actual rule --------------------------------------- $
'a'g handle affix+>tag+>utype:
   (in utype+utype,push RULE+Uuse+repr*LLOC[tag];+),
   (out utype+utype,extend BUFFER+utype,
     (utype>=Uslicein,extend BUFFER+Uuse;extend BUFFER+Uset),
     extend BUFFER+tag;+).
'a'g handle vararg block+>ptr+>formal-ftype:
   $ ptr points to the * formal affix of the rule (actual affix);
   $ formal is the first after * in the actual rule
   $ in/inout are used, inout/out are set
   next+LLOC+ptr,get type+formal+ftype,get adm+formal+formal,
   (=ftype=
   [Iformal in],   g handle affix+ptr+Uin;
   [Iformal out],  g handle affix+ptr+Uout;
   [Iformal inout],g handle affix+ptr+Uinout;
   +),
   (formal=0;:g handle vararg block).
'a'g handle shiftrule+>ptr: $ shift affix block+* 
   next+LLOC+ptr,(=type*LLOC[ptr]=
     [Ilabel],+;
     [Iformal in],   g handle affix+ptr+Uin,:g handle shiftrule;
     [Iformal out],  g handle affix+ptr+Uout,:g handle shiftrule;
     [Iformal inout],g handle affix+ptr+Uinout,:g handle shiftrule;
     :g handle shiftrule).
     
'p'g limit:
   Q+Dvlwb;Q+Dvupb;Q+Dlwb;Q+Dupb;Q+Dcalibre.
'a'g simple affix+>utype+repeat>-tag-type:
   0->repeat,
     (Qcons+#;
      g limit,must Qtag+#;
     Q+Dsub,must Qtag+#,utype to slice+utype+type,g simple affix+type+#,
       mustQ+Dbus,(Qcons+#;must Qtag+#);
     Q+Dnoarg;
     must Qtag+tag,get type+tag+type,
       (=type=
        [Iformal repeat],tag->repeat; $ * actual affix $
        [Iformal in;Iformal out;Iformal inout;Ilocal],
           g handle affix+tag+utype;
         +)).
'a'g match formal actual+>ftype+repeat>-tag-type:
  $ we are expecting an affix of type "ftype"
  $ we can get the formal affix *
  =ftype=
  [Iformal file;Iformal table;Iformal stack], 
     must Qtag+tag,get type+tag+type,
     (type=Iformal repeat,tag->repeat;0->repeat);
  [Iformal shift], must Qtag+repeat;
  [Iformal in],    g simple affix+Uin+repeat;
  [Iformal out],   g simple affix+Uout+repeat;
  [Iformal inout], g simple affix+Uinout+repeat;
  internal error+_line_.

'a'g actual rule+>tag-oldBUFF-formal-ftype-repeat-frep:
  $ collect which formal/local this rule uses and sets
  $  Uuse <#counter>
  $ before calling, collect in and inout (plus slice)
  $ after return, set out and inout (plus slice)
  $ collect out/inout affixes in BUFFER, and copy from
  $   there to RULE after the Ufalse entry (if the rule
  $   can fail).
  $ If * is the last actual affix, all in/inout is used,
  $   and all inout/out is set
  $ 'get affix blockno' and 'shift affix block' are exceptions
  push RULE+Unode+0,>>BUFFER->oldBUFF,
  0->repeat->frep,get adm+tag+formal,
  (nxt:Q+Dplus,get type+formal+ftype,
    (ftype=Iformal repeat,
      get adm+formal+formal,formal->repeat,get type+formal+ftype;+),
    g match formal actual+ftype+frep,
    get adm+formal+formal,(formal=0,repeat->formal;+),:nxt;
  +),
  $ frep: the last actual affix is *; this is a LLOC pointer
  (frep=0;
   tag=Xshift affix,g handle shiftrule+frep;
   is tag flag+tag+rshiftrule;
   g handle vararg block+frep+repeat),
  (is tag flag+tag+rcan fail,push RULE+Ufalse+0;+),
  oldBUFF->frep,
  (nxt-flag-utype:frep>=>>BUFFER;
    incr+frep,BUFFER[frep]->utype,incr+frep,BUFFER[frep]->flag,
      incr+frep,push RULE+flag+repr*LLOC[BUFFER[frep]],
      diagnose out affix+utype+BUFFER[frep],:nxt),
  unstack to+BUFFER+oldBUFF,
  (is tag flag+tag+rno return,push RULE+Usink+0;push RULE+Utrue+0).
$ structure ----------------------------------------- $
'a'g compound-loc:
  >>LLOC->loc,g rule body,unstack to+LLOC+loc.

'a'g alt sequence:
  g member,push RULE+Uhead+0,g alt tail,
    (Q+Dsemicolon,push RULE+Usemicolon+0,:g alt sequence;+).

'a'g alt tail:
  Q+Dcomma,g member,:g alt tail;+.

'a'g member-tag:
  Q+Dopen,g compound,mustQ+Dclose;
  Q+Dextension,g extension;
  Q+Djump,must Qtag+tag,push RULE+Ujump+repr*LLOC[tag];
  Q+Dplus,push RULE+Uplus+0;
  Q+Dminus,push RULE+Uminus+0;
  must Qtag+tag,tag->rule called,
    ((is+expand flag,is tag flag+tag+rmacro),expand macro+tag;
     g actual rule+tag).

'a'g rule body-label-rloc:
  setup label+label,$ add label to LLOC, if any $
  setup locals,     $ add locals to LLOC, some of them before label
  start range+label+rloc,
   (Q+Dbox,g read box,g classification;
    g alt sequence),
  close range+rloc.

$ traversing RULE stack ============================= $
$ flags for formal/local stored variables
'constant'
  Ufinal	= 0x01, $ final flag, 0: not used afterward, 1: used
  UTused	= 0x02, $ final value, used at true exit
  UFused	= 0x04, $ final value, used at false exit
  Uflag		= 0x08, $ running flag
  Ualt		= 0x10, $ usage at the head of the next alternative
  Uzero		= 0x20. $ this bit is always zero

'variable'Ufinal changed=0.
   $ repeat scanning until no more changes are
'a'set RULE flag+>base+>off+>v:
  addmult+off+<>RULE+base+base,bool or+flag*RULE[base]+v+flag*RULE[base].
'a'clear RULE flag+>base+>off+>v:
  addmult+off+<>RULE+base+base,bool invert+v+v,bool and+flag*RULE[base]+v+flag*RULE[base].  
'q'is RULE flag+>base+>off+>v-x:
  addmult+off+<>RULE+base+base,bool and+flag*RULE[base]+v+x,x!=0.

'a'copy Uf1 to Uf2+>base+>Uf1+>Uf2-off:
  $ at the end of an alternative copy UT to Uflag
  1->off,(nxt:is RULE flag+base+off+Umark; $ no more stored value $
    (is RULE flag+base+off+Uf1,set RULE flag+base+off+Uf2;
         clear RULE flag+base+off+Uf2),incr+off,:nxt).
'a'merge Uf1 to Uf2+>base+>Uf1+>Uf2-off:
  1->off,(nxt:is RULE flag+base+off+Umark;
    (is RULE flag+base+off+Uf1,
       (Uf2!=Ufinal;is RULE flag+base+off+Uf2;1->Ufinal changed),
       set RULE flag+base+off+Uf2;+),
    incr+off,:nxt).
'a'copy jump Uf+>from+>to-off:
  $ copy final flags from -> to; clear local affixes
  1->off,(nxt:is RULE flag+from+off+Umark;
    (is RULE flag+from+off+Ufinal,set RULE flag+to+off+Uflag;
     clear RULE flag+to+off+Uflag),incr+off,:nxt),
  (nxt:is RULE flag+to+off+Umark;
       clear RULE flag+to+off+Uflag,incr+off,:nxt).

'a'set flags for region+>base+>region+>head-off:
  $ region is a pointer to an inner region; set UT/UF used flags
  $  UT is coming from Uflag, UF is from head (=Ualt or =UFused)
  $ flags can only increase.
  1->off,(nxt:is RULE flag+base+off+Umark;
     (is RULE flag+base+off+Uflag,set RULE flag+region+off+UTused;+),
     (is RULE flag+base+off+head,set RULE flag+region+off+UFused;+),
     clear RULE flag+region+off+Uflag,incr+off,:nxt).
'a'recover flags from region+>base+>region-off:
  $ when the region is done, retrieve Uflags from the region
  1->off,(nxt:is RULE flag+base+off+Umark;
    (is RULE flag+region+off+Uflag,set RULE flag+base+off+Uflag;
      clear RULE flag+base+off+Uflag),incr+off,:nxt).

'a'set flags for rule+>rtag-base-formal-type-cnt:
   $ set the UTused, UFused flags for the rule.
   $  UFused = 0 (as no set is required for false exit)
   $  UTused = 1 for out and inout affixes
   get adm+rtag+formal,0->cnt,data*RULE->base,$ flag*RULE=Uclose $
   (nxt:formal=0;
     get type+formal+type,(=type=
       [Iformal in],incr+cnt;
       [Iformal out;Iformal inout],incr+cnt,set RULE flag+base+cnt+UTused;
       +),
     get adm+formal+formal,:nxt).
$ - - - - - - - - - - - - - - - - - - - - - - - - - - $
'variable' Uptr=0.
'p'B+>x: flag*RULE[Uptr]=x,previous+RULE+Uptr.
'p'Bdata+>x+d>: flag*RULE[Uptr]=x,data*RULE[Uptr]->d,previous+RULE+Uptr.
'a'Bset flag+>new-ptr:Uptr->ptr,next+RULE+ptr,new->flag*RULE[ptr].
'a'Bset data+>new-ptr:Uptr->ptr,next+RULE+ptr,new->data*RULE[ptr].
'a'Bback: previous+RULE+Uptr.
'f'Bget ptr+n>:Uptr->n,next+RULE+n.

$ Uptr is just before Uclose; UT,UF flags are set
'a'Uregion+>base:
  copy Uf1 to Uf2+base+UFused+Ualt,
  (nxt:Ualternative+base,copy Uf1 to Uf2+base+Uflag+Ualt,
    (B+Usemicolon,:nxt;
     B+Ubox,(U actual rule+base+UFused;internal error+_line_);
     +)),
  $ skip the storeage area $
  (nxt:B+Uopen;Bback,:nxt),
  $ set the final flags for this region
  merge Uf1 to Uf2+base+Uflag+Ufinal.

'p'U actual rule+>base+>Uf-cnt:
  $ 'exit' clears all flags; otherwise keep Uflag
  $ Uf specifies the false branch
  (B+Utrue;B+Usink,copyUf1 to Uf2+base+Uzero+Uflag),
    (nxt:Bdata+Uuse+cnt,set RULE flag+base+cnt+Uflag,:nxt;
         Bdata+Uset+cnt,
              (is RULE flag+base+cnt+Uflag;Bset flag+Uspare),
              clear RULE flag+base+cnt+Uflag,:nxt;
         Bdata+Uspare+cnt,
              (is RULE flag+base+cnt+Uflag,Bset flag+Uset;+),
              clear RULE flag+base+cnt+Uflag,:nxt;
         B+Umark,:nxt; $ skip it over
         B+Ufalse, merge Uf1 to Uf2+base+Uf+Uflag,:nxt;
         B+Unode;
         internal error+_line_).
'p'U member+>base+>Uf-ptr:
  Bdata+Ujump+ptr, $ptr points to Uopen; copy Uflags from there
     copy jump Uf+ptr+base;
  B+Uplus,copy Uf1 to Uf2+base+UTused+Uflag;
  B+Uminus,copy Uf1 to Uf2+base+Uf+Uflag;
  U actual rule+base+Uf;
  Bdata+Uclose+ptr,$ set up flags for this region
     set flags for region+base+ptr+Uf,
     Uregion+ptr,recover flags from region+base+ptr.
'a'Ualternative+>base:
  copy Uf1 to Uf2+base+UTused+Uflag,(nxt:
    B+Uhead,(Umember+base+Ualt;internal error+_line_);
    Umember+base+UFused,:nxt;
    +).
'a'traverse RULE+>tag-ptr:
  set flags for rule+tag,
  (nxt: >>RULE->Uptr,(Bdata+Uclose+ptr;internal error+_line_),
        0->Ufinal changed,Uregion+ptr,(Ufinal changed=0;:nxt)).
$ --------------------------------------------------- $
$ find labels; at the end true/false should refer to nodes
$ in the first backward scan fill true/false/open entries,
$   all labels are Ltrue/Lfalse, Unode, Uopen
$ in the second forward scan follow all unresolved pointers
$   No loop should occur, as they have been filtered out
'constant'
  Ltrue label   = -1,	$ true exit label
  Lfalse label	= -2.	$ false exit label
'a'Lscan i+>tlab+>flab+nlab>-alab-ulab:
  flab->alab->ulab,tlab->nlab,
  (nxt:B+Usemicolon,nlab->alab,tlab->nlab,flab->ulab,:nxt;
       B+Uplus,Bset data+nlab,:nxt;
       B+Uminus,Bset data+ulab,ulab->nlab,:nxt;
       B+Uhead,alab->ulab,:nxt;
       B+Utrue,Bset data+nlab,:nxt;
       B+Ufalse,Bset data+ulab,ulab->nlab,:nxt;
       B+Unode,Bget ptr+nlab,:nxt;
       Bdata+Ujump+nlab,:nxt;
       B+Uclose,Lscan i+nlab+ulab+nlab,:nxt;
       B+Uopen,Bset data+nlab;
       Bback,:nxt).
'a'Lunroll+>ptr-data:
   data*RULE[ptr]->data,
     (data=Ltrue label;
      data=Lfalse label;
      data=0,internal error+_line_;
      flag*RULE[data]=Unode;
      0->data*RULE[ptr],Lunroll+data,data*RULE[data]->data*RULE[ptr]).
'a'Lscan ii-ptr:
   <<RULE->ptr,(nxt:ptr>>>RULE;
    ((flag*RULE[ptr]=Utrue;flag*RULE[ptr]=Ufalse),Lunroll+ptr;+),
    next+RULE+ptr,:nxt).
'a'Lfind labels:
  >>RULE->Uptr,(B+Uclose;internal error+_line_),
  Lscan i+Ltrue label+Lfalse label+#,
  Lscan ii.
$ --------------------------------------------------- $
$ diagnostics: compute mentioned/used flags
'constant'
  UDuse		= 0x100, $ affix in Uuse
  UDset		= 0x200. $ affix in Uset

'a'merge DU flags+>base+>region-off:
  1->off,(nxt:is RULE flag+base+off+Umark;
    (is RULE flag+region+off+UDuse,set RULE flag+base+off+UDuse;+),
    (is RULE flag+region+off+UDset,set RULE flag+base+off+UDset;+),
    incr+off,:nxt).
'p'DU rule+>base-cnt:
  (B+Utrue;B+Usink),(nxt:
    Bdata+Uuse+cnt,set RULE flag+base+cnt+UDuse,:nxt;
    Bdata+Uset+cnt,set RULE flag+base+cnt+UDset,:nxt;
    B+Uspare,:nxt;
    B+Umark,:nxt;
    B+Ufalse,:nxt;
    B+Unode;
    +).
'p'DU member+>base-ptr:
  B+Ujump;B+Uplus;B+Uminus;DU rule+base;
  Bdata+Uclose+ptr,DU region+ptr,merge DU flags+base+ptr.
'a'DU alternative+>base:
  B+Uhead,(DU member+base;+);
  DU member+base,:DU alternative;
  +.
'a'DU region+>base:
  (nxt:DU alternative+base,(B+Usemicolon,:nxt;
                       B+Ubox,(DU rule+base;+);+)),
  $ skip storage region $
  (nxt:B+Uopen;previous+RULE+Uptr,:nxt).
'a'compute DU flags-ptr:
  >>RULE->Uptr,(Bdata+Uclose+ptr;internal error+_line_),
  DU region+ptr.
$ for a formal/local
$  UDuse:   the variable has been used somewhere
$  Ufinal:  the original value is used
$  UDset:   a value has been assigned to it
$ formal in/inout: Ufinal should be set
$ formal inout:  UDset=0: can be in
$ local: complain if UDset but not UDuse;
$        places where Uuse => Uspare
'variable'rule compiled=0, rule called=0.
'table'MESSAGE=(
  "rule %p: value of local affix %p not used":local affix set only,
  "rule %p: affix %p set but not used": out affix not used,
  "rule %p: original value of formal affix %p not used":
       original value not used,
  "rule %p: formal affix %p does not change, can be in":
       formal can be in
).
'a'diagnose local+>base+>off+>loc:
   addRULE flag!=1;
   type*LLOC[loc]!=Ilocal;
   is RULE flag+base+off+UDuse;
   is RULE flag+base+off+UDset,
     warning+4+local affix set only+rule compiled+tag*LLOC[loc];
   +.
'a'diagnose out affix+>utype+>loc:
  addRULE flag!=1;
  flag*RULE[RULEtop]!=Uspare;
  utype=Uinout,warning+1+out affix not used+rule called+tag*LLOC[loc];
  warning+4+out affix not used+rule called+tag*LLOC[loc].
'a'diagnose formals-loc-base-off:
  <<LLOC->loc,<<RULE->base,1->off,
  (nxt: loc>>>LLOC;
    (=type*LLOC[loc]=
     [Iformal in],(is RULE flag+base+off+Ufinal;
         is RULE flag+base+off+UDset,
            warning+4+original value not used+rule compiled+tag*LLOC[loc];
         +),incr+off;
     [Iformal inout],(is RULE flag+base+off+Ufinal;
         is RULE flag+base+off+UDset,
            warning+4+original value not used+rule compiled+tag*LLOC[loc];
         warning+4+formal can be in+rule compiled+tag*LLOC[loc]),
         incr+off;
     [Iformal out],incr+off;
     +),next+LLOC+loc,:nxt).
$ --------------------------------------------------- $
$ run this without macro expansion as line numbers
$   (and warnings) are untractable
'a'diagnose rule+>tag-dpos-dnum-rptr:
   tag->rule compiled,save disc position+dpos+dnum,
   0->expand flag,3->addRULE flag,scratch+RULE,scratch+BUFFER,
   >>RULE->rptr->RULEtop,
   setup formal stack+tag,g rule body,mustQ+Dpoint,
   $ now RULE stack is filled
   traverse RULE+tag, $ compute flags
   compute DU flags,  $ and the diagnostic bits
   $ redo, and give dignostic messages
   restore disc position+dpos+dnum,1->addRULE flag,rptr->RULEtop,
   setup formal stack+tag,diagnose formals,
   g rule body,mustQ+Dpoint,
   restore disc position+dpos+dnum.
$ code generation ==================================== $
$ determining the size of the stack frame for each call:
$  no * in the called rule:
$   C1: number of all affixes (if all affixes are set/retrieved from the stack)
$   C2: number of out/inout affixes (if only these are passed by name)
$  there is a * affix in the called rule:
$   the above numbers are BEFORE *. Affixes after * are passed on the stack
$   C3: total number of variable affixes passed; this can be zero
$  rep: whether there is a * actual affix (if C3 is zero, this must be set)
$ if rep=0 (no tailing * affix) or C3=0, then this call requires stack size
$  C1+C3 // C2+C3 // zero
$ if rep!=0 and C3!=0, the stack sizes are
$  C1  //  C2  // C3 + dynamic
$ If C3=0 no need to allocate dymamic stack even if there is a * formal.
$ 
$ ---------------------------------------------------- $
$ traverse RULE and assign nodes to unassigned Unode entries
$ node -1 and -2 are the true and false returns, respectively
'variable'node count=0.            $ node count $
'variable'C1=0,C2=0,C3=0.          $ affix count for a rule $
'a'reset rule count:
  0->C1->C2->C3.
'a'count rule affix+>ftype+>repeat:
  is+repeat,incr+C3; $ affix in the variable block $
  incr+C1,(=ftype=[Iformal out;Iformal inout],incr+C2;+).
'a'count star affix+>rep:
  rep=0,add+C3+C1+C1,add+C3+C2+C2,0->C3; $ no trailing * affix $
  C3>0,decr+C3;
  +.
'pragmat'macro=(reset rule count,count rule affix,count star affix).

'a'assign nodes-node-ptr:
  <NODE->node,0->node count,<<RULE->ptr,
  (nxt:ptr>>>RULE;
   ((flag*RULE[ptr]=Unode,data*RULE[ptr]=0),
       node->data*RULE[ptr],incr+node count,next+NODE+node;+),
   next+RULE+ptr,:nxt).
$ exit label ----------------------------------------- $
'a'w label+>ptr-label:
   $ we are looking at Utrue,Ufalse,Umark. Figure out the label
   W+Dout,(ptr=0,Wcons+0;
      data*RULE[ptr]->label,
      (flag*RULE[ptr]=Usink,Wcons+0; $ final label for 'exit' $
       label=-1,Wcons+-1;
       label=-2,Wcons+-2;
       W+data*RULE[label])). $ otherwise this is a NODE $
$ extension ------------------------------------------ $
'a'w transport list+cnt>-x: $ store in BUFFER $
   0->cnt,
   (nxt:w simple affix+Uin+#,
     (nxt:Q+Dto,extend BUFFER+Dto,incr+cnt,
             (Qcons+x;must Qtag+x,get repr+x+x),
             push BUFFER+Dconst+x,:nxt;
          +),
    (Q+Dextension;Q+Dend;:nxt)).
'a'w extension-tag-cnt-optr-ptr:
   must Qtag+tag,push RULE+Unode+0,
   W+Dextension,W+data*RULE[RULEtop],Wtag+tag,
   >>BUFFER->optr,w transport list+cnt,Wcons+cnt,
   optr->ptr,incr+ptr,w copy affix from BUFFER+ptr,
   unstack to+BUFFER+optr,push RULE+Utrue+0,w label+RULEtop,
   W+Dcomma.
$ actual rule --------------------------------------- $
'p'w limit+x>:
  Q+Dupb,Dupb->x;
  Q+Dlwb,Dlwb->x;
  Q+Dvupb,Dvupb->x;
  Q+Dvlwb,Dvlwb->x.
$ replacement for L*L[>>L], figure out the standard selector
'f'final ssel+>tag+>loc+x>: $ use the appropriate standard selector, x>0
  is+loc,ssel*LLOC[loc]->x;
  was+LLOC+tag,ssel*LLOC[tag]->x;
  get ssel+tag+x.
        
'a'w handle affix+>utype:
  (in utype+utype,push RULE+Uuse+0;+),
  $ Dminus marks a RULE entry $
  (out utype+utype,push BUFFER+Dminus;+).
'a'w before vararg block+>ptr+>formal-ftype:
  next+LLOC+ptr,get type+formal+ftype,get adm+formal+formal,
  (=ftype=[Iformal in;Iformal inout],push RULE+Uuse+0;+),
  (formal=0;:w before vararg block).
'a'w before shiftrule+>ptr:
  next+LLOC+ptr,(=type*LLOC[ptr]= [Ilabel],+;
    [Iformal in;Iformal inout],push RULE+Uuse+0,:w before shiftrule;
    :w before shiftrule).
'a'w after vararg block+>ptr+>formal-ftype:
  next+LLOC+ptr,get type+formal+ftype,get adm+formal+formal,
  (=ftype=[Iformal out;Iformal inout],push RULE+Uset+0;+),
  (formal=0;:w after vararg block).
'a'w after shiftrule+>ptr:
  next+LLOC+ptr,(=type*LLOC[ptr]= [Ilabel],+;
   [Iformal out;Iformal inout],push RULE+Uset+0,:w after shiftrule;
   :w after shiftrule).

'a'w simple affix+>utype+repeat>-tag-type-local-x:
   0->repeat,
    (Qcons+x,push BUFFER+Dconst+x;
     Q+Dcalibre,must Qtag+tag,
       (has formal type+tag,push BUFFER+Dcalibre+tag;
        get calibre+tag+x,push BUFFER+Dconst+x);
     w limit+x,must Qtag+tag,push BUFFER+x+tag;
     Q+Dnoarg,push BUFFER+Dnoarg;
     Q+Dsub,must Qtag+tag,push BUFFER+Dsub+tag,utype to slice+utype+type,
       w simple affix+type+#,mustQ+Dbus,
         $ this is the selector $
       (Qcons+x;must Qtag+x,get repr+x+x),
       push BUFFER+Dbus+Dconst+x;
     must Qlist+tag+local,get type+tag+type,(=type=
       [Iformal repeat],push BUFFER+Dstar,tag->repeat; $ actual * affix $
       [Istack;Itable;Istatic stack;Iformal stack;Iformal table],
          final ssel+tag+local+x,push BUFFER+Dsub+tag+Dupb+tag+Dbus+Dconst+x;
       [Iformal in;Iformal out;Iformal inout;Ilocal],
          w handle affix+utype,push BUFFER+tag;
       push BUFFER+tag)).
       
'a'w match formal actual+>ftype+repeat>-tag-type:
  $ we are expecting an affix of type "ftype"
  $ we can get the formal affix *
  =ftype=
  [Iformal file;Iformal table;Iformal stack],
    must Qtag+tag,get type+tag+type,
    (type=Iformal repeat,extend BUFFER+Dstar,tag->repeat;
     extend BUFFER+tag,0->repeat);
  [Iformal shift], must Qtag+repeat,extend BUFFER+repeat;
  [Iformal in],    w simple affix+Uin+repeat;
  [Iformal out],   w simple affix+Uout+repeat;
  [Iformal inout], w simple affix+Uinout+repeat;
  internal error+_line_.

'a'w copy affix from BUFFER+>b>:
  $ BUFFER contains an affix; no Dminus symbol is there
  (nxt:b>>>BUFFER;
    BUFFER[b]=Dplus;
    BUFFER[b]=Dminus,incr+b,push RULE+Uuse+0,:nxt;
    BUFFER[b]=Dconst,incr+b,Wcons+BUFFER[b],incr+b,:nxt;
    was+LLOC+BUFFER[b],Wtag+BUFFER[b],incr+b,:nxt;
    was+LADM+BUFFER[b],Wtag+BUFFER[b],incr+b,:nxt;
    W+BUFFER[b],incr+b,:nxt).

'a'copy spare affix+>ftype+>b>:
   ftype=Iformal out,W+Dnoarg,
     (nxt:b>>>BUFFER;
          BUFFER[b]=Dplus;
          BUFFER[b]=Dconst,incr+b,incr+b,:nxt;
          incr+b,:nxt);
   W+Dcolon,w copy affix from BUFFER+b.

'a'w after affixes+>tag+>b+>cnt+>rep-formal-ftype-repeat:
  incr+b, $ now BUFFER[b] looks at Dplus $
  get adm+tag+formal,0->repeat,
  (nxt:b>>>BUFFER; $ no more affixes
    get type+formal+ftype,
      (ftype=Iformal repeat, $ formal * affix, number of blocks
             W+Dstar,(rep=0;subtr+1+cnt+cnt),Wcons+cnt,
             get adm+formal+formal,formal->repeat,:nxt;
       incr+b, $ skip Dplus $
       (BUFFER[b]=Dstar,W+Dstar,incr+b;
        ((ftype=Iformal out;ftype=Iformal inout),BUFFER[b]=Dminus),
           incr+b,push RULE+Uuse+0,
           (flag*RULE[RULEtop]=Uspare,copy spare affix+ftype+b;
            w copy affix from BUFFER+b);
         w copy affix from BUFFER+b),
       get adm+formal+formal,(formal=0,repeat->formal;+),
       :nxt)).

'a'w actual rule+>tag-oldBUFF-formal-ftype-repeat-count-frep-flabel:
   push RULE+Unode+0,W+Dnode,W+data*RULE[RULEtop],Wtag+tag,$ node ID+rule $
   >>BUFFER->oldBUFF,reset rule count,
   0->repeat->frep->count,get adm+tag+formal,
   $ store all affixes in BUFFER as they come
   (nxt:Q+Dplus,extend BUFFER+Dplus,get type+formal+ftype,
     (ftype=Iformal repeat,
       get adm+formal+formal,formal->repeat,get type+formal+ftype;+),
     count rule affix+ftype+repeat,w match formal actual+ftype+frep,
     get adm+formal+formal,(formal=0,incr+count,repeat->formal;+),:nxt;
   +),
   count star affix+frep,Wcons+C1,Wcons+C2,Wcons+C3,
   (frep=0;
    tag=Xshift affix, w before shiftrule+frep;
    is tag flag+tag+rshiftrule;
    w before vararg block+frep+repeat),
   (is tag flag+tag+rcan fail,push RULE+Ufalse+0,RULEtop->flabel;
    0->flabel), $ w label+flabel
   w after affixes+tag+oldBUFF+count+frep,
   (frep=0;
    tag=Xshift affix,w after shiftrule+frep;
    is tag flag+tag+rshiftrule;
    w after vararg block+frep+repeat),
   push RULE+Utrue+0,w label+flabel,w label+RULEtop,W+Dcomma,
   unstack to+BUFFER+oldBUFF.

$ classification ------------------------------------- $
'a'w area+>buff:
   $ BUFFER[buff] contains the area description until Dplus
   W+Darea,incr+buff,w copy affix from BUFFER+buff.
'a'w read box-ptr-buff-fptr:
   push RULE+Unode+0,W+Dbox,W+data*RULE[RULEtop], $ the node ID $
   >>BUFFER->buff->ptr,w simple affix+Uin+#,incr+ptr,
   w copy affix from BUFFER+ptr,unstack to+BUFFER+buff,
   push RULE+Utrue+0,data*RULE[RULEtop]->ptr,push RULE+Ubox+0,mustQ+Dbox,
   (nxt:ptr=0;
      $ RULE[ptr] is (Unode,BUFFER),(Ufalse/Umark,next),(Utrue,tptr)
      data*RULE[ptr]->buff,next+RULE+ptr,data*RULE[ptr]->fptr,
      next+RULE+ptr,w area+buff,w label+ptr,fptr->ptr,:nxt),
   W+Dcomma.
'a'w classification:
   mustQ+Darea,Qskip+Darea,push RULE+Unode+0,push RULE+Ufalse+0,
   push RULE+Utrue+0,push RULE+Uhead+0,w alt tail,
   (Q+Dsemicolon,push RULE+Usemicolon+0,:w classification;+).
$ structure ------------------------------------------ $
'a'w compound-loc:
  >>LLOC->loc,w rule body,unstack to+LLOC+loc.
'a'w alt sequence:
   w member,push RULE+Uhead+0,w alt tail,
     (Q+Dsemicolon,push RULE+Usemicolon+0,:w alt sequence;+).
'a'w alt tail:
   Q+Dcomma,w member,:w alt tail;+.
'a'w member-tag:
   Q+Dopen,w compound,mustQ+Dclose;
   Q+Dextension,w extension;
   Q+Djump,must Qtag+#,push RULE+Ujump+0;
   Q+Dplus,push RULE+Uplus+0;
   Q+Dminus,push RULE+Uminus+0;
   must Qtag+tag,(is tag flag+tag+rmacro,expand macro+tag;
     w actual rule+tag).
'a'w rule body-label-rloc:
   setup label+label, $ add label to LLOC, if any $
   setup locals,      $ add locals to LLOC $
   start range+label+rloc,
    (Q+Dbox,w read box,w classification;
     w alt sequence),
   close range+rloc.

$ ==================================================== $
'a'generate rule+>tag-dpos-dnum-rptr:
  diagnose rule+tag,
  ((-repr:get repr+tag+repr,repr=0),Qskip+Dpoint;
  $ if macro and not public, dont't do anything
   tag->rule compiled,save disc position+dpos+dnum,
   1->expand flag,3->addRULE flag,scratch+RULE,scratch+BUFFER,
   >>RULE->rptr->RULEtop,
   0->min local->max local,
   setup formal stack+tag,g rule body,mustQ+Dpoint,
   traverse RULE+tag,Lfind labels,assign nodes,
   restore disc position+dpos+dnum,
   W+Drule,Wtag+tag, Wcons+min local,Wcons+max local,Wcons+node count,
   2->addRULE flag,1->expand flag,rptr->RULEtop,
   setup formal stack+tag,w rule body,mustQ+Dpoint,
   W+Dpoint).

$  w rule head+>tag-x:
$    <RULE>,<tag>,#locals,#nodes, <point>
$    W+Drule,Wtag+tag, Wcons+min local,Wcons+max local,Wcons+node count,
$    Dnode,<node>,<tag>,C1,C2,C3,<source>*,Dout,<node/0/->,<source>*,Dout,<node/->
$    Dbox,<node>,<source>,(Darea,<area>,Dout,<node/->)*,Dbox
$    Dextension,<node>,<list>,#width,(<source>,(Dto,off)+)+,Dout <node/->
$    <source> ::= <tag> | <formal> | <local> | Dnoarg | <index> |
$                  Dstar | <limitop><list>
$    <index> ::= Dsub, <list> <source>, Dbus, #offset
$    <list> ::= <tag> | <formal>
$    W+Dpoint.

'root'+.

'pragmat'endif=compile.

'end'

