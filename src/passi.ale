$ program
'pragmat'module="passi".
$ HEADER ******************************************************* $
$ pass one
$
'a'pass I.
   $ the main program
'a'was root scanned.
   $ had we a 'root'?

$ BODY ********************************************************* $
'pragmat'if=compile.

$ external stuff $
'pragmat'require=("display","lexical","symbols","tags","pragmats",
  "lists","rules","vars","files","rulebody").

'table'MESSAGE=(
$error:
 "misplaced symbol %p"          :wrong symbol,
 "'external' can be used in library mode only":external in library mode,
 "more than one 'root'"         :more than one root,
 "no 'root'"                    :no root,
$ warning:
 "%p %p: library item redefined (%l)" :library item redefined
).

'variable'root scanned=0.
'a'was root scanned: 
   is+root scanned;
   Xerror+0+no root.

'a'pass I-err:
  ahead+Send symb;      $ we reached the end
    $ handle pragmats and conditional pragmats
  R+Sprag symb,program pragmat+err,
     (err=2;            $ end of conditional pragmat
      err=1,skip to point,               :pass I;
                                         :pass I);
  is pragmat value+pgt skip,
      skip silently,Rskip+Spoint,        :pass I;
  $ declaration
  declaration+0,                         :pass I;
  R+Sstatic,static declaration,          :pass I;
  $ root
  R+Sroot symb,root,                     :pass I;
  $ library extensions
  R+Senquiry,tag enquiry,                :pass I;
  R+Sext symb,external declaration,      :pass I;
  $ unknown or mispalced symbol
  R+Sdummy symb,skip to point,           :pass I;
  error+wrong symbol+inpt,skip to point, :pass I.

$ in library mode only
'a'tag enquiry-tag-z-l-type:
  (is pragmat value+pgt library,is raw tag+tag),
     find raw usage+tag+z,
     $ 0: not mentioned; 1: needs definition; 2: has definition
     (z=0,skip silently,Rskip+Spoint;
      z=2,get tag entry+tag+tag,get defline+tag+z,get linenum+l,
                  get type+tag+type,
                  Xwarning+8+z+library item redefined+type+tag+l,
                  skip silently,Rskip+Spoint;
      +);        $ execute what comes after it
  $ a tag must follow
  error+wrong symbol+Senquiry,skip to point.

'p'declaration+>ext:
  R+Stable symb,  table declaration+ext;
  R+Sstack symb,  stack declaration+ext;
  R+Svar symb,    variable declaration+ext;
  R+Scons symb,   constant declaration+ext;
  R+Scharfile,    charfile declaration+ext;
  R+Sdatafile,    datafile declaration+ext;
  R+Saction,      rule declaration+r action+ext;
  R+Sfunction,    rule declaration+r func+ext;
  R+Squestion,    rule declaration+r que+ext;
  R+Spredicate,   rule declaration+r pred+ext;
  R+Sexit,        rule declaration+r exit+ext.

'a'external declaration:
  is pragmat value+pgt library,
    (declaration+1;
     R+Sdummy symb,  skip to point;
     error+wrong symbol+inpt,skip to point);
  error+external in library mode,skip to point.

'a'static declaration:
  R+Svar symb,    static variable declaration;
  R+Sstack symb,  static stack declaration;
  R+Sdummy symb,  skip to point;
  error+wrong symbol+inpt,skip to point.

'a'root:
  is+root scanned,error+more than one root,skip to point;
  1->root scanned,root body.

'root'+.
'pragmat'endif=compile.
'end'


