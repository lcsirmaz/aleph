$ disc output $
'pragmat'module="disc".

$ writing DISC
'a'D+>x,D cons+>x,D string+>x,Dtag+>x.
$ reading from DISC
'p'Q+>x,Q cons+x>,Q string+x>,Qtag+x>.
'q'Qahead+>x.
'a'must Q+>x,must Qcons+x>,must Qtag+x>,Qskip+>x.
'a'must Qlist+x>+y>.

'f'save disc position+pos>+lnum>.
'a'restore disc position+>pos+>lnum.
$ open / close
'a'open disc+>mode,close disc,delete disc,rewind disc.
$ macro replacement
'a'macro call head+>tag+Qa>+Qb>,
   macro call tail+>Qa+>Qb.

$ exported disc symbols
'constant'
  $ files
  Dfile,
  $ expression operators
  Dor,Dand,Dxor,Dcompl,Ddiv,
    $ Dplus,Dminus,Dcalibre,Dlwb,Dupb,Dopen,Dclose
  $ other
  Darea,  Dbox,   Dbus, Dcalibre, Dclose, Dcolon, Dconst,
  Dcomma, Dend, Dexpression, Dextension, Dfill, Djump,
  Dlabel, Dline, Dlist, Dlocal, Dlwb, Dmodule, Dminus, Dnoarg,
  Dopen, Dplus, Dpoint, Dpragmat, Droot, Drule,
  Dsemicolon, Dstar, Dsub, Dtitle, Dto, Dupb,
  Dvlwb, Dvupb.

'table'DSYMB.

'pragmat'if=compile.

'table'DSYMB=( $ disk symbols
  "&":Dand,  "'area'":Darea,
  "=":Dbox,   "]":Dbus, 
  "<>":Dcalibre, ")":Dclose, ":":Dcolon, ",":Dcomma, "~":Dcompl, "'const'":Dconst,
  "/":Ddiv,
  "'end'":Dend, "'expression'":Dexpression, "'extension'":Dextension,
  "'file'":Dfile, "'fill'":Dfill,
  "'jump'":Djump,
  "'label'":Dlabel, "\n":Dline, "'list'":Dlist, "'local'":Dlocal, "'lwb'":Dlwb, 
  "'module'":Dmodule,"-":Dminus,
  "#":Dnoarg,
  "(":Dopen, "|":Dor,
  "+":Dplus, ".":Dpoint, "'pragmat'":Dpragmat,
  "'root'":Droot, "'rule'":Drule,
  ";":Dsemicolon, "*":Dstar, "[":Dsub,
  "'title'":Dtitle, "'to'":Dto,
  "'upb'":Dupb,
  "'vlwb'":Dvlwb, "'vupb'":Dvupb,
  "^":Dxor
).

'pragmat'require=("lexical","display","obj","tags","types","symbols").
$ ------------------------------------------------------------ $
'datafile' DISC[DSYMB;LADM;LLOC;LEXT] = "/tmp/aleph.tmp">.
$ temporary file(s)
'stack'LEXT=(
  "/tmp/aleph.tmp" :disc file
).

'table'MESSAGE=(
   "cannot create temp file %p, error code=%d, aborting"
          :cannot open disc file,
   $ internal error $
   "FATAL (disc), line=%d" : fatal
).

'a'open disc+>mode-err:
   open file+DISC+mode+LEXT+disc file,
     (mode=/r/,0->Qbuffer ptr->Qshift,0->linenum,next disc symbol;+);
   get file error+DISC+err,
     Xerror+0+cannot open disc file+disc file+err,internal error+fatal+_line_.
'a'close disc:
   close file+DISC.
'a'delete disc:
   close disc,unlink file+LEXT+disc file.
'a'rewind disc:
  $ rewind disc file, prepare for macro substitution
  0->Qbuffer ptr->Qshift,restore disc position+0+0.

'a'D+>x: $ x is a pointer to DSYMB, or coming from Dtag
    put data+DISC+x+pointer.
'a'D cons+>n:
   put data+DISC+n+numerical.
'a'D string+>x: $ x is a pointer to LEXT
   put data+DISC+x+pointer.
'a'D tag+>tag: $ x is a pointer to LADM or LLOC
   was+LADM+tag,(has formal type+tag,repr*LADM[tag]->tag,:D tag;D+tag);
   was+LLOC+tag,D+tag;
   internal error+fatal+_line_. $ D+tag $

$ reading with text substitution ----------------------------- $
$ if LLshift>0 and the disc symbol is a pointer to LLOC,
$    1) add LLshift to the pointer (formal/local for the macro)
$    2) check if  flag*LLOC[ptr]=Lsubst / type*LLOC[ptr]=Imacro
$         repr*LLOC[ptr] -> QBUFFER[], return symbols until Dend
$ implicit selectors: only when reading from disc.
$   Actual list affix +T means +T*T[>>T], where T*T is 1 if T
$   has no selector list (independently of the actual instance)
$   calibre*LLOC[ptr] and ssel*LLOC[ptr] stores the correct
$   values. (For repacement it has been resolved earlier; if
$   T has selector list, exact match is required, thus the stored
$   values are correct.)

'variable'
  Qsymbol=0,	$ next symbol from the disc
  Qtype=0,	$ symbol type: 0: numerical, 1: pointer
  Qposition=0,	$ disc position we are looking at
  Qlinenum=0,	$ line number to be restored
  linenum=0.	$ actual line number for messages

'stack'[1] QBUFFER. $ replacement text is stored here
'variable'
  Qbuffer ptr=0,$ where to read from QBUFFER
  Qshift=0,	$ LLOC pointers are shifted by this amount
  Qlocal=0.	$ LLOC replacement point 

'a'read from QBUFFER:
  $ get next symbol from QBUFFER until Dend
  incr+Qbuffer ptr,QBUFFER[Qbuffer ptr]->Qsymbol,
    (Qsymbol=Dend,0->Qbuffer ptr,0->Qlocal,next disc symbol;
     Qsymbol=Dconst,0->Qtype,incr+Qbuffer ptr,
       QBUFFER[Qbuffer ptr]->Qsymbol;
     1->Qtype).

'a'substitute:
  $ is it a formal to be substituted?
  was+LLOC+Qsymbol,add+Qsymbol+Qshift+Qsymbol,
     (type*LLOC[Qsymbol]!=Imacro;
      $ replace, save this formal affix
      Qsymbol->Qlocal,repr*LLOC[Qsymbol]->Qbuffer ptr,
        read from QBUFFER);
  +.

'a'next disc symbol:
  is+Qbuffer ptr,0->Qlocal,read from QBUFFER;
  set linenum+linenum,(nxt:
   get file pos+DISC+Qposition,linenum->Qlinenum,
    (get data+DISC+Qsymbol+Qtype,
      ((Qsymbol=Dline,Qtype=1),incr+linenum,:nxt;
       (is+Qshift,Qtype=1),substitute;
       +);
     Dend->Qsymbol,1->Qtype)).

'f'save disc position+pos>+lnum>:
   is+Qbuffer ptr,internal error+fatal+_line_;
   Qposition->pos,Qlinenum->lnum.
'a'restore disc position+>pos+>lnum:
   is+Qbuffer ptr,internal error+fatal+_line_;
   set file pos+DISC+pos,lnum->linenum,next disc symbol.

'p'Q+>x: x=Qsymbol,is+Qtype,next disc symbol.
'q'Qahead+>x: x=Qsymbol,is+Qtype.
'a'must Q+>x: Q+x; internal error+fatal+_line_.
'p'Qcons+x>: Qtype=0,Qsymbol->x,next disc symbol.
'a'must Qcons+x>: is+Qtype,internal error+fatal+_line_;
             Qsymbol->x,next disc symbol.
'p'Qtag+x>: is+Qtype,(=Qsymbol=[LADM;LLOC],Qsymbol->x,next disc symbol;
                      -).
'p'Qstring+x>:
  is+Qtype,was+LEXT+Qsymbol,Qsymbol->x,next disc symbol.

'a'must Qtag+x>: Qtag+x;internal error+fatal+_line_.
'a'must Qlist+tag>+local>:
   $ they should come in this order as Qtag destroys Qlocal
   Qlocal->local,must Qtag+tag.
'a'Qskip+>to:
   Qahead+Dend;
   Q+to;
   next disc symbol,:Qskip.

$ macro substitution ========================================= $
$ tricky because of the * affix.
$ when we see a formal affix (including *) it is replaced by
$  the stored content, which might be several affixes for *
$
$ 'a'RULE+T[]+*+>V : ... ,macro1+*, ... ,macro1+T+*,
$ 'a'macro1+*+>a   : ... ,macro2+*, ... ,macro2+a+*,
$ 'a'macro2+*+>b
$  m1:   *1=>*0, a=>V;             *1=>T*T+*0, a=>T*T
$  m2:   *2=>*0, b=>V; *2=>V+*0, b=>V
$                           *2=>T*T+*0,b=>T*T; *2=>T*T+T*T+*0,b=>T*T
$ if the block is a single *, then it is from the very first rule.
$
$ these rules assume that everything is correct;

'a'putQ+*+>v:
  (* v->QBUFFER *)QBUFFER,(shift affix block+*,:putQ;+).

'a'copy QBUFFER affix+>ptr>:
  $ ptr points to an an affix; copy to the enf of QBUFFER
  $ until Dplus or Dend
  =QBUFFER[ptr]= [Dplus;Dend],incr+ptr,putQ+Dend;
   [Dconst],incr+ptr,putQ+Dconst+QBUFFER[ptr],incr+ptr,:copy QBUFFER affix;
   putQ+QBUFFER[ptr],incr+ptr,:copy QBUFFER affix.

$ - - - - - - - - - - - - $
$ routines to retrieve selector number and ssel
$ replacement for a*L, selector is replaced by the number
'a'read selector+x>-tag:
  Qcons+x; $ this is the selector
  must Qtag+tag,get repr+tag+x. $ x>0 $
$ replacement for L*L[>>L], figure out the standard selector
'f'final ssel+>tag+>loc+x>:
  $ use the appropriate standard selector, x>0
  is+loc,ssel*LLOC[loc]->x;
  was+LLOC+tag,ssel*LLOC[tag]->x;
  get ssel+tag+x.

$ - - - - - - - - - - - - $
'p'limit op+op>:
  $ limit operator, followed by a list tag
  Qsymbol->op,(Q+Dvlwb;Q+Dvupb;Q+Dlwb;Q+Dupb;Q+Dcalibre).

'a'fsimple affix+atype>-x-tag-type-loc:
  $ read and store a simple affix. Take care of implicit selectors
  $ don't store anything for Dnoarg; otherwise the replacement text
  $  atype: Inoarg, Iformal repeat, other
  Qcons+x,putQ+Dconst+x,0->atype;
  limit op+x,must Qtag+tag,putQ+x+tag,0->atype;
  Q+Dsub,putQ+Dsub,fsimple affix+atype,mustQ+Dbus,must Qtag+tag,
    read selector+x,putQ+Dbus+tag+Dconst+x;
  Q+Dnoarg,Inoarg->atype;
  must Qlist+tag+loc,0->atype,get type+tag+type,(=type=
    [Iconstant;Ipointer constant;Ivariable;Istatic var;
     Iformal in;Iformal out;Iformal inout;Ilocal],putQ+tag;
    [Istack;Itable;Istatic stack;Iformal stack;Iformal table],
     $ T ==> T*T[>>T] $
     final ssel+tag+loc+x,putQ+Dsub+Dupb+tag+Dbus+tag+Dconst+x;
    [Iformal repeat],putQ+tag,Iformal repeat->atype;
    internal error+fatal+_line_).

'a'match formal actual+>ftype+atype>-tag:
  $ the actual affix can be * while we are expecting something else
  $ don't store anything for Dnoarg, otherwise store the replacement
  =ftype=
  [Iformal file;Iformal table;Iformal stack],
    must Qtag+tag,putQ+tag,get type+tag+atype;
  [Iformal in;Iformal out;Iformal inout],fsimple affix+atype;
  internal error+fatal+_line_.

'a'handle formal list+>formal+>type:
  $ if this is a formal list, supply list data
  =type=
  [Iformal stack;Iformal table],
      get formal calibre+formal+calibre*LLOC,
      get formal ssel+formal+ssel*LLOC;
  +.

'a'expand varargs+>repeat-formal-ftype-atype-lrep-block:
   $ repeat is the formal repeat affix of this macro (LADM)
   $ block=0: * is matched immediately
   $ block=1: there is at least one full block
  get adm+repeat+formal,>>LLOC->lrep,0->block,
  (nxt:get type+formal+ftype,match formal actual+ftype+atype,
    (atype=Iformal repeat; $ the last actual affix is a *, it is on QBUFFER
     (block=0, $ add the next entry to LLOC $
       (* 0->repr,formal->tag,Imacro->type,0->flag->calibre->ssel *)LLOC,
       handle formal list+formal+ftype; $ and correct lists $
      +),      $ not in the first round
    (atype!=Inoarg; $ dummy argument is like a local affix $
     block=0,-1->repr*LLOC,Ilocal->type*LLOC,putQ+>>LLOC;
     putQ+Dnoarg),
    get adm+formal+formal,(formal=0,1->block,get adm+repeat+formal;+),
    (Q+Dplus,putQ+Dplus,:nxt;+))),
  (-aformal-qptr:block=0,
    $ no repeat block; the actual affix * is in the top of QBUFFER, 
    $  it belongs to the very first rule
    QBUFFER->aformal,putQ+Dend,$ this is the replacement text for * %
    get adm+aformal+aformal,(nxt:formal=0; $ then aformal=0
      (* >>QBUFFER->repr,formal->tag,Imacro->type,0->flag->calibre->ssel *)LLOC,
      get type+formal+ftype,handle formal list+formal+ftype,
      putQ+repr*LADM[aformal]+Dend,
      get adm+formal+formal,get adm+aformal+aformal,:nxt);
   putQ+Dend, $second case, lrep is the * affix in LLOC
    repr*LLOC[lrep]->qptr,incr+qptr,
    $ qptr looks at the replacement text of *
    (nxt:formal=0;
     next+LLOC+lrep,(type*LLOC[lrep]=Imacro,>>QBUFFER->repr*LLOC[lrep];+),
     copy QBUFFER affix+qptr,get adm+formal+formal,:nxt)).

'a'macro arguments+>tag-formal-ftype-atype:
  $ set up the LLOC structure for the formals of rule "tag"
  get adm+tag+formal,(nxt:formal=0;
  (* >>QBUFFER->repr,formal->tag,Imacro->type,0->flag->calibre->ssel *)LLOC,
  mustQ+Dplus,get type+formal+ftype,handle formal list+formal+ftype,
  (ftype=Iformal repeat,expand varargs+formal;
   match formal actual+ftype+atype,
     (atype=Inoarg, $ dummy affix as actual, make it a local one $
        -1->repr*LLOC,Ilocal->type*LLOC;
      putQ+Dend),
     get adm+formal+formal,:nxt)).
  
'a'macro call head+>tag+Qa>+Qb>-Lptr:
   >>QBUFFER->Qa,Qshift->Qb,>>LLOC->Lptr,
   macro arguments+tag,
   subtr+Lptr+<<LLOC+Qshift,next+LLOC+Qshift.

'a'macro call tail+>Qa+>Qb:
   Qb->Qshift,unstack to+QBUFFER+Qa.


'root'+.
'pragmat'endif=compile.
'end'

